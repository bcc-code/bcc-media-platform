/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/assets/{id}": {
    /** Image typed files can be dynamically resized and transformed to fit any need. */
    get: operations["getAsset"];
  };
  "/auth/login": {
    /** Retrieve a Temporary Access Token */
    post: operations["login"];
  };
  "/auth/refresh": {
    /** Refresh a Temporary Access Token. */
    post: operations["refresh"];
  };
  "/auth/logout": {
    /** Log Out */
    post: operations["logout"];
  };
  "/auth/password/request": {
    /** Request a reset password email to be send. */
    post: operations["passwordRequest"];
  };
  "/auth/password/reset": {
    /** The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password. */
    post: operations["passwordReset"];
  };
  "/auth/oauth": {
    /** List configured OAuth providers. */
    get: operations["oauth"];
  };
  "/auth/oauth/{provider}": {
    /** Start OAuth flow using the specified provider */
    get: operations["oauthProvider"];
  };
  "/extensions/interfaces": {
    /** List all installed custom interfaces. */
    get: operations["getInterfaces"];
  };
  "/extensions/layouts": {
    /** List all installed custom layouts. */
    get: operations["getLayouts"];
  };
  "/extensions/displays": {
    /** List all installed custom displays. */
    get: operations["getDisplays"];
  };
  "/extensions/modules": {
    /** List all installed custom modules. */
    get: operations["getModules"];
  };
  "/server/info": {
    /** Perform a system status check and return the options. */
    get: operations["serverInfo"];
  };
  "/server/ping": {
    /** Ping, pong. Ping.. pong. */
    get: operations["ping"];
  };
  "/utils/random/string": {
    /** Returns a random string of given length. */
    get: operations["random"];
  };
  "/utils/sort/{collection}": {
    /** Re-sort items in collection based on start and to value of item */
    post: operations["sort"];
  };
  "/items/ageratings": {
    /** List the ageratings items. */
    get: operations["readItemsAgeratings"];
    /** Create a new ageratings item. */
    post: operations["createItemsAgeratings"];
  };
  "/items/ageratings/{id}": {
    /** Retrieve a single ageratings item by unique identifier. */
    get: operations["readSingleItemsAgeratings"];
    /** Delete an existing ageratings item. */
    delete: operations["deleteSingleItemsAgeratings"];
    /** Update an existing ageratings item. */
    patch: operations["updateSingleItemsAgeratings"];
  };
  "/items/ageratings_translations": {
    /** List the ageratings_translations items. */
    get: operations["readItemsAgeratingsTranslations"];
    /** Create a new ageratings_translations item. */
    post: operations["createItemsAgeratingsTranslations"];
  };
  "/items/ageratings_translations/{id}": {
    /** Retrieve a single ageratings_translations item by unique identifier. */
    get: operations["readSingleItemsAgeratingsTranslations"];
    /** Delete an existing ageratings_translations item. */
    delete: operations["deleteSingleItemsAgeratingsTranslations"];
    /** Update an existing ageratings_translations item. */
    patch: operations["updateSingleItemsAgeratingsTranslations"];
  };
  "/items/assetfiles": {
    /** List the assetfiles items. */
    get: operations["readItemsAssetfiles"];
    /** Create a new assetfiles item. */
    post: operations["createItemsAssetfiles"];
  };
  "/items/assetfiles/{id}": {
    /** Retrieve a single assetfiles item by unique identifier. */
    get: operations["readSingleItemsAssetfiles"];
    /** Delete an existing assetfiles item. */
    delete: operations["deleteSingleItemsAssetfiles"];
    /** Update an existing assetfiles item. */
    patch: operations["updateSingleItemsAssetfiles"];
  };
  "/items/asset_management": {
    /** List the asset_management items. */
    get: operations["readItemsAssetManagement"];
    /** Create a new asset_management item. */
    post: operations["createItemsAssetManagement"];
  };
  "/items/asset_management/{id}": {
    /** Retrieve a single asset_management item by unique identifier. */
    get: operations["readSingleItemsAssetManagement"];
    /** Delete an existing asset_management item. */
    delete: operations["deleteSingleItemsAssetManagement"];
    /** Update an existing asset_management item. */
    patch: operations["updateSingleItemsAssetManagement"];
  };
  "/items/assets": {
    /** List the assets items. */
    get: operations["readItemsAssets"];
    /** Create a new assets item. */
    post: operations["createItemsAssets"];
  };
  "/items/assets/{id}": {
    /** Retrieve a single assets item by unique identifier. */
    get: operations["readSingleItemsAssets"];
    /** Delete an existing assets item. */
    delete: operations["deleteSingleItemsAssets"];
    /** Update an existing assets item. */
    patch: operations["updateSingleItemsAssets"];
  };
  "/items/assetstreams": {
    /** List the assetstreams items. */
    get: operations["readItemsAssetstreams"];
    /** Create a new assetstreams item. */
    post: operations["createItemsAssetstreams"];
  };
  "/items/assetstreams/{id}": {
    /** Retrieve a single assetstreams item by unique identifier. */
    get: operations["readSingleItemsAssetstreams"];
    /** Delete an existing assetstreams item. */
    delete: operations["deleteSingleItemsAssetstreams"];
    /** Update an existing assetstreams item. */
    patch: operations["updateSingleItemsAssetstreams"];
  };
  "/items/assetstreams_audio_languages": {
    /** List the assetstreams_audio_languages items. */
    get: operations["readItemsAssetstreamsAudioLanguages"];
    /** Create a new assetstreams_audio_languages item. */
    post: operations["createItemsAssetstreamsAudioLanguages"];
  };
  "/items/assetstreams_audio_languages/{id}": {
    /** Retrieve a single assetstreams_audio_languages item by unique identifier. */
    get: operations["readSingleItemsAssetstreamsAudioLanguages"];
    /** Delete an existing assetstreams_audio_languages item. */
    delete: operations["deleteSingleItemsAssetstreamsAudioLanguages"];
    /** Update an existing assetstreams_audio_languages item. */
    patch: operations["updateSingleItemsAssetstreamsAudioLanguages"];
  };
  "/items/assetstreams_subtitle_languages": {
    /** List the assetstreams_subtitle_languages items. */
    get: operations["readItemsAssetstreamsSubtitleLanguages"];
    /** Create a new assetstreams_subtitle_languages item. */
    post: operations["createItemsAssetstreamsSubtitleLanguages"];
  };
  "/items/assetstreams_subtitle_languages/{id}": {
    /** Retrieve a single assetstreams_subtitle_languages item by unique identifier. */
    get: operations["readSingleItemsAssetstreamsSubtitleLanguages"];
    /** Delete an existing assetstreams_subtitle_languages item. */
    delete: operations["deleteSingleItemsAssetstreamsSubtitleLanguages"];
    /** Update an existing assetstreams_subtitle_languages item. */
    patch: operations["updateSingleItemsAssetstreamsSubtitleLanguages"];
  };
  "/items/calendar": {
    /** List the calendar items. */
    get: operations["readItemsCalendar"];
    /** Create a new calendar item. */
    post: operations["createItemsCalendar"];
  };
  "/items/calendar/{id}": {
    /** Retrieve a single calendar item by unique identifier. */
    get: operations["readSingleItemsCalendar"];
    /** Delete an existing calendar item. */
    delete: operations["deleteSingleItemsCalendar"];
    /** Update an existing calendar item. */
    patch: operations["updateSingleItemsCalendar"];
  };
  "/items/calendarevent": {
    /** List the calendarevent items. */
    get: operations["readItemsCalendarevent"];
    /** Create a new calendarevent item. */
    post: operations["createItemsCalendarevent"];
  };
  "/items/calendarevent/{id}": {
    /** Retrieve a single calendarevent item by unique identifier. */
    get: operations["readSingleItemsCalendarevent"];
    /** Delete an existing calendarevent item. */
    delete: operations["deleteSingleItemsCalendarevent"];
    /** Update an existing calendarevent item. */
    patch: operations["updateSingleItemsCalendarevent"];
  };
  "/items/categories": {
    /** List the categories items. */
    get: operations["readItemsCategories"];
    /** Create a new categories item. */
    post: operations["createItemsCategories"];
  };
  "/items/categories/{id}": {
    /** Retrieve a single categories item by unique identifier. */
    get: operations["readSingleItemsCategories"];
    /** Delete an existing categories item. */
    delete: operations["deleteSingleItemsCategories"];
    /** Update an existing categories item. */
    patch: operations["updateSingleItemsCategories"];
  };
  "/items/categories_translations": {
    /** List the categories_translations items. */
    get: operations["readItemsCategoriesTranslations"];
    /** Create a new categories_translations item. */
    post: operations["createItemsCategoriesTranslations"];
  };
  "/items/categories_translations/{id}": {
    /** Retrieve a single categories_translations item by unique identifier. */
    get: operations["readSingleItemsCategoriesTranslations"];
    /** Delete an existing categories_translations item. */
    delete: operations["deleteSingleItemsCategoriesTranslations"];
    /** Update an existing categories_translations item. */
    patch: operations["updateSingleItemsCategoriesTranslations"];
  };
  "/items/collections": {
    /** List the collections items. */
    get: operations["readItemsCollections"];
    /** Create a new collections item. */
    post: operations["createItemsCollections"];
  };
  "/items/collections/{id}": {
    /** Retrieve a single collections item by unique identifier. */
    get: operations["readSingleItemsCollections"];
    /** Delete an existing collections item. */
    delete: operations["deleteSingleItemsCollections"];
    /** Update an existing collections item. */
    patch: operations["updateSingleItemsCollections"];
  };
  "/items/collections_episodes": {
    /** List the collections_episodes items. */
    get: operations["readItemsCollectionsEpisodes"];
    /** Create a new collections_episodes item. */
    post: operations["createItemsCollectionsEpisodes"];
  };
  "/items/collections_episodes/{id}": {
    /** Retrieve a single collections_episodes item by unique identifier. */
    get: operations["readSingleItemsCollectionsEpisodes"];
    /** Delete an existing collections_episodes item. */
    delete: operations["deleteSingleItemsCollectionsEpisodes"];
    /** Update an existing collections_episodes item. */
    patch: operations["updateSingleItemsCollectionsEpisodes"];
  };
  "/items/collections_relations": {
    /** List the collections_relations items. */
    get: operations["readItemsCollectionsRelations"];
    /** Create a new collections_relations item. */
    post: operations["createItemsCollectionsRelations"];
  };
  "/items/collections_relations/{id}": {
    /** Retrieve a single collections_relations item by unique identifier. */
    get: operations["readSingleItemsCollectionsRelations"];
    /** Delete an existing collections_relations item. */
    delete: operations["deleteSingleItemsCollectionsRelations"];
    /** Update an existing collections_relations item. */
    patch: operations["updateSingleItemsCollectionsRelations"];
  };
  "/items/collections_seasons": {
    /** List the collections_seasons items. */
    get: operations["readItemsCollectionsSeasons"];
    /** Create a new collections_seasons item. */
    post: operations["createItemsCollectionsSeasons"];
  };
  "/items/collections_seasons/{id}": {
    /** Retrieve a single collections_seasons item by unique identifier. */
    get: operations["readSingleItemsCollectionsSeasons"];
    /** Delete an existing collections_seasons item. */
    delete: operations["deleteSingleItemsCollectionsSeasons"];
    /** Update an existing collections_seasons item. */
    patch: operations["updateSingleItemsCollectionsSeasons"];
  };
  "/items/collections_shows": {
    /** List the collections_shows items. */
    get: operations["readItemsCollectionsShows"];
    /** Create a new collections_shows item. */
    post: operations["createItemsCollectionsShows"];
  };
  "/items/collections_shows/{id}": {
    /** Retrieve a single collections_shows item by unique identifier. */
    get: operations["readSingleItemsCollectionsShows"];
    /** Delete an existing collections_shows item. */
    delete: operations["deleteSingleItemsCollectionsShows"];
    /** Update an existing collections_shows item. */
    patch: operations["updateSingleItemsCollectionsShows"];
  };
  "/items/collections_translations": {
    /** List the collections_translations items. */
    get: operations["readItemsCollectionsTranslations"];
    /** Create a new collections_translations item. */
    post: operations["createItemsCollectionsTranslations"];
  };
  "/items/collections_translations/{id}": {
    /** Retrieve a single collections_translations item by unique identifier. */
    get: operations["readSingleItemsCollectionsTranslations"];
    /** Delete an existing collections_translations item. */
    delete: operations["deleteSingleItemsCollectionsTranslations"];
    /** Update an existing collections_translations item. */
    patch: operations["updateSingleItemsCollectionsTranslations"];
  };
  "/items/config": {
    /** List the config items. */
    get: operations["readItemsConfig"];
    /** Create a new config item. */
    post: operations["createItemsConfig"];
  };
  "/items/config/{id}": {
    /** Retrieve a single config item by unique identifier. */
    get: operations["readSingleItemsConfig"];
    /** Delete an existing config item. */
    delete: operations["deleteSingleItemsConfig"];
    /** Update an existing config item. */
    patch: operations["updateSingleItemsConfig"];
  };
  "/items/episodes": {
    /** List the episodes items. */
    get: operations["readItemsEpisodes"];
    /** Create a new episodes item. */
    post: operations["createItemsEpisodes"];
  };
  "/items/episodes/{id}": {
    /** Retrieve a single episodes item by unique identifier. */
    get: operations["readSingleItemsEpisodes"];
    /** Delete an existing episodes item. */
    delete: operations["deleteSingleItemsEpisodes"];
    /** Update an existing episodes item. */
    patch: operations["updateSingleItemsEpisodes"];
  };
  "/items/episodes_categories": {
    /** List the episodes_categories items. */
    get: operations["readItemsEpisodesCategories"];
    /** Create a new episodes_categories item. */
    post: operations["createItemsEpisodesCategories"];
  };
  "/items/episodes_categories/{id}": {
    /** Retrieve a single episodes_categories item by unique identifier. */
    get: operations["readSingleItemsEpisodesCategories"];
    /** Delete an existing episodes_categories item. */
    delete: operations["deleteSingleItemsEpisodesCategories"];
    /** Update an existing episodes_categories item. */
    patch: operations["updateSingleItemsEpisodesCategories"];
  };
  "/items/episodes_tags": {
    /** List the episodes_tags items. */
    get: operations["readItemsEpisodesTags"];
    /** Create a new episodes_tags item. */
    post: operations["createItemsEpisodesTags"];
  };
  "/items/episodes_tags/{id}": {
    /** Retrieve a single episodes_tags item by unique identifier. */
    get: operations["readSingleItemsEpisodesTags"];
    /** Delete an existing episodes_tags item. */
    delete: operations["deleteSingleItemsEpisodesTags"];
    /** Update an existing episodes_tags item. */
    patch: operations["updateSingleItemsEpisodesTags"];
  };
  "/items/episodes_translations": {
    /** List the episodes_translations items. */
    get: operations["readItemsEpisodesTranslations"];
    /** Create a new episodes_translations item. */
    post: operations["createItemsEpisodesTranslations"];
  };
  "/items/episodes_translations/{id}": {
    /** Retrieve a single episodes_translations item by unique identifier. */
    get: operations["readSingleItemsEpisodesTranslations"];
    /** Delete an existing episodes_translations item. */
    delete: operations["deleteSingleItemsEpisodesTranslations"];
    /** Update an existing episodes_translations item. */
    patch: operations["updateSingleItemsEpisodesTranslations"];
  };
  "/items/episodes_usergroups": {
    /** List the episodes_usergroups items. */
    get: operations["readItemsEpisodesUsergroups"];
    /** Create a new episodes_usergroups item. */
    post: operations["createItemsEpisodesUsergroups"];
  };
  "/items/episodes_usergroups/{id}": {
    /** Retrieve a single episodes_usergroups item by unique identifier. */
    get: operations["readSingleItemsEpisodesUsergroups"];
    /** Delete an existing episodes_usergroups item. */
    delete: operations["deleteSingleItemsEpisodesUsergroups"];
    /** Update an existing episodes_usergroups item. */
    patch: operations["updateSingleItemsEpisodesUsergroups"];
  };
  "/items/episodes_usergroups_download": {
    /** List the episodes_usergroups_download items. */
    get: operations["readItemsEpisodesUsergroupsDownload"];
    /** Create a new episodes_usergroups_download item. */
    post: operations["createItemsEpisodesUsergroupsDownload"];
  };
  "/items/episodes_usergroups_download/{id}": {
    /** Retrieve a single episodes_usergroups_download item by unique identifier. */
    get: operations["readSingleItemsEpisodesUsergroupsDownload"];
    /** Delete an existing episodes_usergroups_download item. */
    delete: operations["deleteSingleItemsEpisodesUsergroupsDownload"];
    /** Update an existing episodes_usergroups_download item. */
    patch: operations["updateSingleItemsEpisodesUsergroupsDownload"];
  };
  "/items/episodes_usergroups_earlyaccess": {
    /** List the episodes_usergroups_earlyaccess items. */
    get: operations["readItemsEpisodesUsergroupsEarlyaccess"];
    /** Create a new episodes_usergroups_earlyaccess item. */
    post: operations["createItemsEpisodesUsergroupsEarlyaccess"];
  };
  "/items/episodes_usergroups_earlyaccess/{id}": {
    /** Retrieve a single episodes_usergroups_earlyaccess item by unique identifier. */
    get: operations["readSingleItemsEpisodesUsergroupsEarlyaccess"];
    /** Delete an existing episodes_usergroups_earlyaccess item. */
    delete: operations["deleteSingleItemsEpisodesUsergroupsEarlyaccess"];
    /** Update an existing episodes_usergroups_earlyaccess item. */
    patch: operations["updateSingleItemsEpisodesUsergroupsEarlyaccess"];
  };
  "/items/languages": {
    /** List the languages items. */
    get: operations["readItemsLanguages"];
    /** Create a new languages item. */
    post: operations["createItemsLanguages"];
  };
  "/items/languages/{id}": {
    /** Retrieve a single languages item by unique identifier. */
    get: operations["readSingleItemsLanguages"];
    /** Delete an existing languages item. */
    delete: operations["deleteSingleItemsLanguages"];
    /** Update an existing languages item. */
    patch: operations["updateSingleItemsLanguages"];
  };
  "/items/lists": {
    /** List the lists items. */
    get: operations["readItemsLists"];
    /** Create a new lists item. */
    post: operations["createItemsLists"];
  };
  "/items/lists/{id}": {
    /** Retrieve a single lists item by unique identifier. */
    get: operations["readSingleItemsLists"];
    /** Delete an existing lists item. */
    delete: operations["deleteSingleItemsLists"];
    /** Update an existing lists item. */
    patch: operations["updateSingleItemsLists"];
  };
  "/items/lists_relations": {
    /** List the lists_relations items. */
    get: operations["readItemsListsRelations"];
    /** Create a new lists_relations item. */
    post: operations["createItemsListsRelations"];
  };
  "/items/lists_relations/{id}": {
    /** Retrieve a single lists_relations item by unique identifier. */
    get: operations["readSingleItemsListsRelations"];
    /** Delete an existing lists_relations item. */
    delete: operations["deleteSingleItemsListsRelations"];
    /** Update an existing lists_relations item. */
    patch: operations["updateSingleItemsListsRelations"];
  };
  "/items/main_content": {
    /** List the main_content items. */
    get: operations["readItemsMainContent"];
    /** Create a new main_content item. */
    post: operations["createItemsMainContent"];
  };
  "/items/main_content/{id}": {
    /** Retrieve a single main_content item by unique identifier. */
    get: operations["readSingleItemsMainContent"];
    /** Delete an existing main_content item. */
    delete: operations["deleteSingleItemsMainContent"];
    /** Update an existing main_content item. */
    patch: operations["updateSingleItemsMainContent"];
  };
  "/items/page_management": {
    /** List the page_management items. */
    get: operations["readItemsPageManagement"];
    /** Create a new page_management item. */
    post: operations["createItemsPageManagement"];
  };
  "/items/page_management/{id}": {
    /** Retrieve a single page_management item by unique identifier. */
    get: operations["readSingleItemsPageManagement"];
    /** Delete an existing page_management item. */
    delete: operations["deleteSingleItemsPageManagement"];
    /** Update an existing page_management item. */
    patch: operations["updateSingleItemsPageManagement"];
  };
  "/items/pages": {
    /** List the pages items. */
    get: operations["readItemsPages"];
    /** Create a new pages item. */
    post: operations["createItemsPages"];
  };
  "/items/pages/{id}": {
    /** Retrieve a single pages item by unique identifier. */
    get: operations["readSingleItemsPages"];
    /** Delete an existing pages item. */
    delete: operations["deleteSingleItemsPages"];
    /** Update an existing pages item. */
    patch: operations["updateSingleItemsPages"];
  };
  "/items/seasons": {
    /** List the seasons items. */
    get: operations["readItemsSeasons"];
    /** Create a new seasons item. */
    post: operations["createItemsSeasons"];
  };
  "/items/seasons/{id}": {
    /** Retrieve a single seasons item by unique identifier. */
    get: operations["readSingleItemsSeasons"];
    /** Delete an existing seasons item. */
    delete: operations["deleteSingleItemsSeasons"];
    /** Update an existing seasons item. */
    patch: operations["updateSingleItemsSeasons"];
  };
  "/items/seasons_translations": {
    /** List the seasons_translations items. */
    get: operations["readItemsSeasonsTranslations"];
    /** Create a new seasons_translations item. */
    post: operations["createItemsSeasonsTranslations"];
  };
  "/items/seasons_translations/{id}": {
    /** Retrieve a single seasons_translations item by unique identifier. */
    get: operations["readSingleItemsSeasonsTranslations"];
    /** Delete an existing seasons_translations item. */
    delete: operations["deleteSingleItemsSeasonsTranslations"];
    /** Update an existing seasons_translations item. */
    patch: operations["updateSingleItemsSeasonsTranslations"];
  };
  "/items/seasons_usergroups": {
    /** List the seasons_usergroups items. */
    get: operations["readItemsSeasonsUsergroups"];
    /** Create a new seasons_usergroups item. */
    post: operations["createItemsSeasonsUsergroups"];
  };
  "/items/seasons_usergroups/{id}": {
    /** Retrieve a single seasons_usergroups item by unique identifier. */
    get: operations["readSingleItemsSeasonsUsergroups"];
    /** Delete an existing seasons_usergroups item. */
    delete: operations["deleteSingleItemsSeasonsUsergroups"];
    /** Update an existing seasons_usergroups item. */
    patch: operations["updateSingleItemsSeasonsUsergroups"];
  };
  "/items/sections": {
    /** List the sections items. */
    get: operations["readItemsSections"];
    /** Create a new sections item. */
    post: operations["createItemsSections"];
  };
  "/items/sections/{id}": {
    /** Retrieve a single sections item by unique identifier. */
    get: operations["readSingleItemsSections"];
    /** Delete an existing sections item. */
    delete: operations["deleteSingleItemsSections"];
    /** Update an existing sections item. */
    patch: operations["updateSingleItemsSections"];
  };
  "/items/sections_translations": {
    /** List the sections_translations items. */
    get: operations["readItemsSectionsTranslations"];
    /** Create a new sections_translations item. */
    post: operations["createItemsSectionsTranslations"];
  };
  "/items/sections_translations/{id}": {
    /** Retrieve a single sections_translations item by unique identifier. */
    get: operations["readSingleItemsSectionsTranslations"];
    /** Delete an existing sections_translations item. */
    delete: operations["deleteSingleItemsSectionsTranslations"];
    /** Update an existing sections_translations item. */
    patch: operations["updateSingleItemsSectionsTranslations"];
  };
  "/items/sections_usergroups": {
    /** List the sections_usergroups items. */
    get: operations["readItemsSectionsUsergroups"];
    /** Create a new sections_usergroups item. */
    post: operations["createItemsSectionsUsergroups"];
  };
  "/items/sections_usergroups/{id}": {
    /** Retrieve a single sections_usergroups item by unique identifier. */
    get: operations["readSingleItemsSectionsUsergroups"];
    /** Delete an existing sections_usergroups item. */
    delete: operations["deleteSingleItemsSectionsUsergroups"];
    /** Update an existing sections_usergroups item. */
    patch: operations["updateSingleItemsSectionsUsergroups"];
  };
  "/items/shows": {
    /** List the shows items. */
    get: operations["readItemsShows"];
    /** Create a new shows item. */
    post: operations["createItemsShows"];
  };
  "/items/shows/{id}": {
    /** Retrieve a single shows item by unique identifier. */
    get: operations["readSingleItemsShows"];
    /** Delete an existing shows item. */
    delete: operations["deleteSingleItemsShows"];
    /** Update an existing shows item. */
    patch: operations["updateSingleItemsShows"];
  };
  "/items/shows_translations": {
    /** List the shows_translations items. */
    get: operations["readItemsShowsTranslations"];
    /** Create a new shows_translations item. */
    post: operations["createItemsShowsTranslations"];
  };
  "/items/shows_translations/{id}": {
    /** Retrieve a single shows_translations item by unique identifier. */
    get: operations["readSingleItemsShowsTranslations"];
    /** Delete an existing shows_translations item. */
    delete: operations["deleteSingleItemsShowsTranslations"];
    /** Update an existing shows_translations item. */
    patch: operations["updateSingleItemsShowsTranslations"];
  };
  "/items/shows_usergroups": {
    /** List the shows_usergroups items. */
    get: operations["readItemsShowsUsergroups"];
    /** Create a new shows_usergroups item. */
    post: operations["createItemsShowsUsergroups"];
  };
  "/items/shows_usergroups/{id}": {
    /** Retrieve a single shows_usergroups item by unique identifier. */
    get: operations["readSingleItemsShowsUsergroups"];
    /** Delete an existing shows_usergroups item. */
    delete: operations["deleteSingleItemsShowsUsergroups"];
    /** Update an existing shows_usergroups item. */
    patch: operations["updateSingleItemsShowsUsergroups"];
  };
  "/items/tags": {
    /** List the tags items. */
    get: operations["readItemsTags"];
    /** Create a new tags item. */
    post: operations["createItemsTags"];
  };
  "/items/tags/{id}": {
    /** Retrieve a single tags item by unique identifier. */
    get: operations["readSingleItemsTags"];
    /** Delete an existing tags item. */
    delete: operations["deleteSingleItemsTags"];
    /** Update an existing tags item. */
    patch: operations["updateSingleItemsTags"];
  };
  "/items/tvguideentry": {
    /** List the tvguideentry items. */
    get: operations["readItemsTvguideentry"];
    /** Create a new tvguideentry item. */
    post: operations["createItemsTvguideentry"];
  };
  "/items/tvguideentry/{id}": {
    /** Retrieve a single tvguideentry item by unique identifier. */
    get: operations["readSingleItemsTvguideentry"];
    /** Delete an existing tvguideentry item. */
    delete: operations["deleteSingleItemsTvguideentry"];
    /** Update an existing tvguideentry item. */
    patch: operations["updateSingleItemsTvguideentry"];
  };
  "/items/tvguideentry_link": {
    /** List the tvguideentry_link items. */
    get: operations["readItemsTvguideentryLink"];
    /** Create a new tvguideentry_link item. */
    post: operations["createItemsTvguideentryLink"];
  };
  "/items/tvguideentry_link/{id}": {
    /** Retrieve a single tvguideentry_link item by unique identifier. */
    get: operations["readSingleItemsTvguideentryLink"];
    /** Delete an existing tvguideentry_link item. */
    delete: operations["deleteSingleItemsTvguideentryLink"];
    /** Update an existing tvguideentry_link item. */
    patch: operations["updateSingleItemsTvguideentryLink"];
  };
  "/items/usergroups": {
    /** List the usergroups items. */
    get: operations["readItemsUsergroups"];
    /** Create a new usergroups item. */
    post: operations["createItemsUsergroups"];
  };
  "/items/usergroups/{id}": {
    /** Retrieve a single usergroups item by unique identifier. */
    get: operations["readSingleItemsUsergroups"];
    /** Delete an existing usergroups item. */
    delete: operations["deleteSingleItemsUsergroups"];
    /** Update an existing usergroups item. */
    patch: operations["updateSingleItemsUsergroups"];
  };
  "/activity": {
    /** Returns a list of activity actions. */
    get: operations["getActivities"];
  };
  "/activity/comment": {
    /** Creates a new comment. */
    post: operations["createComment"];
  };
  "/activity/{id}": {
    /** Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information. */
    get: operations["getActivity"];
  };
  "/activity/comment/{id}": {
    /** Delete an existing comment. Deleted comments can not be retrieved. */
    delete: operations["deleteComment"];
    /** Update the content of an existing comment. */
    patch: operations["updateComment"];
  };
  "/collections": {
    /** Returns a list of the collections available in the project. */
    get: operations["getCollections"];
    /** Create a new collection in Directus. */
    post: operations["createCollection"];
  };
  "/collections/{id}": {
    /** Retrieves the details of a single collection. */
    get: operations["getCollection"];
    /** Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution. */
    delete: operations["deleteCollection"];
    /** Update an existing collection. */
    patch: operations["updateCollection"];
  };
  "/fields": {
    /** Returns a list of the fields available in the project. */
    get: operations["getFields"];
  };
  "/fields/{collection}": {
    /** Returns a list of the fields available in the given collection. */
    get: operations["getCollectionFields"];
    /** Create a new field in a given collection. */
    post: operations["createField"];
  };
  "/fields/{collection}/{id}": {
    /** Retrieves the details of a single field in a given collection. */
    get: operations["getCollectionField"];
    /** Delete an existing field. */
    delete: operations["deleteField"];
    /** Update an existing field. */
    patch: operations["updateField"];
  };
  "/files": {
    /** List the files. */
    get: operations["getFiles"];
    /** Create a new file */
    post: operations["createFile"];
  };
  "/files/{id}": {
    /** Retrieve a single file by unique identifier. */
    get: operations["getFile"];
    /** Delete an existing file. */
    delete: operations["deleteFile"];
    /** Update an existing file, and/or replace it's file contents. */
    patch: operations["updateFile"];
  };
  "/folders": {
    /** List the folders. */
    get: operations["getFolders"];
    /** Create a new folder. */
    post: operations["createFolder"];
  };
  "/folders/{id}": {
    /** Retrieve a single folder by unique identifier. */
    get: operations["getFolder"];
    /** Delete an existing folder */
    delete: operations["deleteFolder"];
    /** Update an existing folder */
    patch: operations["updateFolder"];
  };
  "/permissions": {
    /** List all permissions. */
    get: operations["getPermissions"];
    /** Create a new permission. */
    post: operations["createPermission"];
  };
  "/permissions/me": {
    /** List the permissions that apply to the current user. */
    get: operations["getMyPermissions"];
  };
  "/permissions/{id}": {
    /** Retrieve a single permissions object by unique identifier. */
    get: operations["getPermission"];
    /** Delete an existing permission */
    delete: operations["deletePermission"];
    /** Update an existing permission */
    patch: operations["updatePermission"];
  };
  "/presets": {
    /** List the presets. */
    get: operations["getPresets"];
    /** Create a new preset. */
    post: operations["createPreset"];
  };
  "/presets/{id}": {
    /** Retrieve a single preset by unique identifier. */
    get: operations["getPreset"];
    /** Delete an existing preset. */
    delete: operations["deletePreset"];
    /** Update an existing preset. */
    patch: operations["updatePreset"];
  };
  "/relations": {
    /** List the relations. */
    get: operations["getRelations"];
    /** Create a new relation. */
    post: operations["createRelation"];
  };
  "/relations/{id}": {
    /** Retrieve a single relation by unique identifier. */
    get: operations["getRelation"];
    /** Delete an existing relation. */
    delete: operations["deleteRelation"];
    /** Update an existing relation */
    patch: operations["updateRelation"];
  };
  "/revisions": {
    /** List the revisions. */
    get: operations["getRevisions"];
  };
  "/revisions/{id}": {
    /** Retrieve a single revision by unique identifier. */
    get: operations["getRevision"];
  };
  "/roles": {
    /** List the roles. */
    get: operations["getRoles"];
    /** Create a new role. */
    post: operations["createRole"];
  };
  "/roles/{id}": {
    /** Retrieve a single role by unique identifier. */
    get: operations["getRole"];
    /** Delete an existing role */
    delete: operations["deleteRole"];
    /** Update an existing role */
    patch: operations["updateRole"];
  };
  "/settings": {
    /** List the settings. */
    get: operations["getSettings"];
    /** Update the settings */
    patch: operations["updateSetting"];
  };
  "/users": {
    /** List the users. */
    get: operations["getUsers"];
    /** Create a new user. */
    post: operations["createUser"];
  };
  "/users/{id}": {
    /** Retrieve a single user by unique identifier. */
    get: operations["getUser"];
    /** Delete an existing user */
    delete: operations["deleteUser"];
    /** Update an existing user */
    patch: operations["updateUser"];
  };
  "/users/invite": {
    /** Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account. */
    post: operations["invite"];
  };
  "/users/invite/accept": {
    /** Accepts and enables an invited user using a JWT invitation token. */
    post: operations["acceptInvite"];
  };
  "/users/me": {
    /** Retrieve the currently authenticated user. */
    get: operations["getMe"];
    /** Update the currently authenticated user. */
    patch: operations["updateMe"];
  };
  "/users/me/track/page": {
    /** Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used. */
    patch: operations["updateLastUsedPageMe"];
  };
  "/users/me/tfa/enable": {
    /** Enables two-factor authentication for the currently authenticated user. */
    post: operations["meTfaEnable"];
  };
  "/users/me/tfa/disable": {
    /** Disables two-factor authentication for the currently authenticated user. */
    post: operations["meTfaDisable"];
  };
  "/webhooks": {
    /** Get all webhooks. */
    get: operations["getWebhooks"];
    /** Create a new webhook. */
    post: operations["createWebhook"];
  };
  "/webhooks/{id}": {
    /** Retrieve a single webhook by unique identifier. */
    get: operations["getWebhook"];
    /** Delete an existing webhook */
    delete: operations["deleteWebhook"];
    /** Update an existing webhook */
    patch: operations["updateWebhook"];
  };
}

export interface components {
  schemas: {
    ItemsAgeratings: {
      code?: string;
      date_created?: string | null;
      date_updated?: string | null;
      sort?: number | null;
      title?: string | null;
      translations?: (
        | number
        | components["schemas"]["ItemsAgeratingsTranslations"]
      )[];
    };
    ItemsAgeratingsTranslations: {
      ageratings_code?: string | components["schemas"]["ItemsAgeratings"];
      description?: string | null;
      id?: number;
      languages_code?: string | components["schemas"]["ItemsLanguages"];
    };
    ItemsAssetfiles: {
      asset_id?: number | components["schemas"]["ItemsAssets"];
      audio_language_id?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      date_created?: string | null;
      date_updated?: string | null;
      extra_metadata?: string[] | null;
      id?: number;
      mime_type?: string;
      path?: string;
      storage?: string;
      subtitle_language_id?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      type?: string;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
    };
    ItemsAssetManagement: { [key: string]: any };
    ItemsAssets: {
      date_created?: string | null;
      date_updated?: string | null;
      duration?: number;
      encoding_version?: string | null;
      id?: number;
      legacy_id?: number | null;
      main_storage_path?: string | null;
      mediabanken_id?: string | null;
      name?: string;
      status?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      files?: (number | components["schemas"]["ItemsAssetfiles"])[];
      streams?: (number | components["schemas"]["ItemsAssetstreams"])[];
    };
    ItemsAssetstreams: {
      asset_id?: number | components["schemas"]["ItemsAssets"];
      date_created?: string | null;
      date_updated?: string | null;
      encryption_key_id?: string | null;
      extra_metadata?: string[] | null;
      id?: number;
      legacy_videourl_id?: number | null;
      path?: string;
      service?: string;
      status?: string;
      type?: string;
      url?: string;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      audio_languages?: (
        | number
        | components["schemas"]["ItemsAssetstreamsAudioLanguages"]
      )[];
      subtitle_languages?: (
        | number
        | components["schemas"]["ItemsAssetstreamsSubtitleLanguages"]
      )[];
    };
    ItemsAssetstreamsAudioLanguages: {
      assetstreams_id?:
        | (number | components["schemas"]["ItemsAssetstreams"])
        | null;
      id?: number;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
    };
    ItemsAssetstreamsSubtitleLanguages: {
      assetstreams_id?:
        | (number | components["schemas"]["ItemsAssetstreams"])
        | null;
      id?: number;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
    };
    ItemsCalendar: { [key: string]: any };
    ItemsCalendarevent: {
      date_created?: string | null;
      date_updated?: string | null;
      end?: string | null;
      id?: number;
      start?: string;
      status?: string;
      title?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
    };
    ItemsCategories: {
      appear_in_search?: boolean | null;
      date_created?: string | null;
      date_updated?: string | null;
      id?: number;
      legacy_id?: number | null;
      parent_id?: (number | components["schemas"]["ItemsCategories"]) | null;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      episodes?: (number | components["schemas"]["ItemsEpisodesCategories"])[];
      subcategories?: (number | components["schemas"]["ItemsCategories"])[];
      translations?: (
        | number
        | components["schemas"]["ItemsCategoriesTranslations"]
      )[];
    };
    ItemsCategoriesTranslations: {
      categories_id?: number | components["schemas"]["ItemsCategories"];
      id?: number;
      languages_code?: string | components["schemas"]["ItemsLanguages"];
      name?: string;
    };
    ItemsCollections: {
      content?: string;
      date_created?: string | null;
      date_updated?: string | null;
      id?: number;
      legacy_order_by?: string | null;
      list_id?: (number | components["schemas"]["ItemsLists"]) | null;
      show_episodes_in_section?: boolean | null;
      show_id?: (number | components["schemas"]["ItemsShows"]) | null;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      config?: string;
      translatable_details?: string;
      translations?: (
        | number
        | components["schemas"]["ItemsCollectionsTranslations"]
      )[];
      used_in_sections?: (number | components["schemas"]["ItemsSections"])[];
    };
    ItemsCollectionsEpisodes: {
      collections_id?:
        | (number | components["schemas"]["ItemsCollections"])
        | null;
      episodes_id?: (number | components["schemas"]["ItemsEpisodes"]) | null;
      id?: number;
      sort?: number | null;
    };
    ItemsCollectionsRelations: {
      collection?: string | null;
      collections_id?:
        | (number | components["schemas"]["ItemsCollections"])
        | null;
      id?: number;
      item?: (string | { [key: string]: any })[] | null;
    };
    ItemsCollectionsSeasons: {
      collections_id?:
        | (number | components["schemas"]["ItemsCollections"])
        | null;
      id?: number;
      seasons_id?: (number | components["schemas"]["ItemsSeasons"]) | null;
    };
    ItemsCollectionsShows: {
      collections_id?:
        | (number | components["schemas"]["ItemsCollections"])
        | null;
      id?: number;
      shows_id?: (number | components["schemas"]["ItemsShows"]) | null;
    };
    ItemsCollectionsTranslations: {
      collections_id?: number | components["schemas"]["ItemsCollections"];
      id?: number;
      languages_code?: string | components["schemas"]["ItemsLanguages"];
      title?: string | null;
    };
    ItemsConfig: { [key: string]: any };
    ItemsEpisodes: {
      agerating_code?:
        | (string | components["schemas"]["ItemsAgeratings"])
        | null;
      asset_id?: (number | components["schemas"]["ItemsAssets"]) | null;
      available_from?: string | null;
      available_to?: string | null;
      date_created?: string | null;
      date_updated?: string | null;
      /** For showing "S1:E2" and for sorting. */
      episode_number?: number | null;
      id?: number;
      image_file_id?: (string | components["schemas"]["Files"]) | null;
      legacy_description_id?: number | null;
      legacy_extra_description_id?: number | null;
      legacy_id?: number | null;
      legacy_program_id?: number | null;
      legacy_tags_id?: number | null;
      legacy_title_id?: number | null;
      migration_data?: string[] | null;
      publish_date?: string;
      season_id?: (number | components["schemas"]["ItemsSeasons"]) | null;
      status?: string;
      type?: string;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      availability?: string;
      categories?: (
        | number
        | components["schemas"]["ItemsEpisodesCategories"]
      )[];
      download_usergroups?: (
        | number
        | components["schemas"]["ItemsEpisodesUsergroupsDownload"]
      )[];
      earlyaccess_usergroups?: (
        | number
        | components["schemas"]["ItemsEpisodesUsergroupsEarlyaccess"]
      )[];
      metadata?: string;
      tags?: (number | components["schemas"]["ItemsEpisodesTags"])[];
      technical_details?: string;
      translatable_details?: string;
      translations?: (
        | number
        | components["schemas"]["ItemsEpisodesTranslations"]
      )[];
      usergroups?: (
        | number
        | components["schemas"]["ItemsEpisodesUsergroups"]
      )[];
    };
    ItemsEpisodesCategories: {
      categories_id?: number | components["schemas"]["ItemsCategories"];
      episodes_id?: number | components["schemas"]["ItemsEpisodes"];
      id?: number;
    };
    ItemsEpisodesTags: {
      episodes_id?: number | components["schemas"]["ItemsEpisodes"];
      id?: number;
      tags_id?: number | components["schemas"]["ItemsTags"];
    };
    ItemsEpisodesTranslations: {
      description?: string | null;
      episodes_id?: number | components["schemas"]["ItemsEpisodes"];
      extra_description?: string | null;
      id?: number;
      is_primary?: boolean;
      languages_code?: string | components["schemas"]["ItemsLanguages"];
      title?: string | null;
    };
    ItemsEpisodesUsergroups: {
      episodes_id?: number | components["schemas"]["ItemsEpisodes"];
      id?: number;
      type?: string | null;
      usergroups_code?: string | components["schemas"]["ItemsUsergroups"];
    };
    ItemsEpisodesUsergroupsDownload: {
      episodes_id?: number | components["schemas"]["ItemsEpisodes"];
      id?: number;
      usergroups_code?: string | components["schemas"]["ItemsUsergroups"];
    };
    ItemsEpisodesUsergroupsEarlyaccess: {
      episodes_id?: number | components["schemas"]["ItemsEpisodes"];
      id?: number;
      usergroups_code?: string | components["schemas"]["ItemsUsergroups"];
    };
    ItemsLanguages: {
      code?: string;
      legacy_2_letter_code?: string | null;
      legacy_3_letter_code?: string | null;
      name?: string | null;
    };
    ItemsLists: {
      date_created?: string | null;
      date_updated?: string | null;
      id?: number;
      legacy_category_id?: number | null;
      legacy_name_id?: number | null;
      name?: string;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      relations?: (number | components["schemas"]["ItemsListsRelations"])[];
    };
    ItemsListsRelations: {
      collection?: string | null;
      id?: number;
      item?: (string | { [key: string]: any })[] | null;
      lists_id?: (number | components["schemas"]["ItemsLists"]) | null;
      sort?: number | null;
    };
    ItemsMainContent: { [key: string]: any };
    ItemsPageManagement: { [key: string]: any };
    ItemsPages: {
      code?: string | null;
      date_created?: string | null;
      date_updated?: string | null;
      id?: number;
      sort?: number | null;
      status?: string;
      system_page?: boolean | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      "notice-vw3saw"?: string;
      sections?: (number | components["schemas"]["ItemsSections"])[];
    };
    ItemsSeasons: {
      agerating_code?:
        | (string | components["schemas"]["ItemsAgeratings"])
        | null;
      available_from?: string | null;
      available_to?: string | null;
      date_created?: string | null;
      date_updated?: string | null;
      id?: number;
      image_file_id?: (string | components["schemas"]["Files"]) | null;
      legacy_description_id?: number | null;
      legacy_id?: number | null;
      legacy_title_id?: number | null;
      publish_date?: string;
      /** Used for "S1:E2" and for sorting. */
      season_number?: number;
      show_id?: number | components["schemas"]["ItemsShows"];
      status?: string;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      availability?: string;
      episodes?: (number | components["schemas"]["ItemsEpisodes"])[];
      metadata?: string;
      related?: string;
      technical_details?: string;
      translations?: (
        | number
        | components["schemas"]["ItemsSeasonsTranslations"]
      )[];
      usergroups?: (number | components["schemas"]["ItemsSeasonsUsergroups"])[];
    };
    ItemsSeasonsTranslations: {
      description?: string | null;
      id?: number;
      is_primary?: boolean;
      languages_code?: string | components["schemas"]["ItemsLanguages"];
      legacy_description_id?: number | null;
      legacy_title_id?: number | null;
      seasons_id?: number | components["schemas"]["ItemsSeasons"];
      title?: string | null;
    };
    ItemsSeasonsUsergroups: {
      id?: number;
      seasons_id?: number | components["schemas"]["ItemsSeasons"];
      usergroups_code?: string | components["schemas"]["ItemsUsergroups"];
    };
    ItemsSections: {
      collection_id?:
        | (number | components["schemas"]["ItemsCollections"])
        | null;
      date_created?: string | null;
      date_updated?: string | null;
      display_contract?: string | null;
      id?: number;
      legacy_id?: number | null;
      page?: number | components["schemas"]["ItemsPages"];
      status?: string;
      type?: string;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      Visibility?: string;
      configuration?: string;
      translatable_details?: string;
      translations?: (
        | number
        | components["schemas"]["ItemsSectionsTranslations"]
      )[];
      usergroups?: (
        | number
        | components["schemas"]["ItemsSectionsUsergroups"]
      )[];
    };
    ItemsSectionsTranslations: {
      id?: number;
      languages_code?: string | components["schemas"]["ItemsLanguages"];
      legacy_title_id?: number | null;
      sections_id?: number | components["schemas"]["ItemsSections"];
      title?: string;
    };
    ItemsSectionsUsergroups: {
      id?: number;
      sections_id?: number | components["schemas"]["ItemsSections"];
      usergroups_code?: string | components["schemas"]["ItemsUsergroups"];
    };
    ItemsShows: {
      agerating_code?:
        | (string | components["schemas"]["ItemsAgeratings"])
        | null;
      available_from?: string | null;
      available_to?: string | null;
      date_created?: string | null;
      date_updated?: string | null;
      id?: number;
      image_file_id?: (string | components["schemas"]["Files"]) | null;
      legacy_description_id?: number | null;
      legacy_id?: number | null;
      legacy_title_id?: number | null;
      publish_date?: string;
      status?: string;
      type?: string;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      availability?: string;
      metadata?: string;
      related?: string;
      seasons?: (number | components["schemas"]["ItemsSeasons"])[];
      technical_details?: string;
      translations?: (
        | number
        | components["schemas"]["ItemsShowsTranslations"]
      )[];
      usergroups?: (number | components["schemas"]["ItemsShowsUsergroups"])[];
    };
    ItemsShowsTranslations: {
      description?: string | null;
      id?: number;
      is_primary?: boolean;
      languages_code?: string | components["schemas"]["ItemsLanguages"];
      legacy_description_id?: number | null;
      legacy_tags?: string | null;
      legacy_tags_id?: number | null;
      legacy_title_id?: number | null;
      shows_id?: number | components["schemas"]["ItemsShows"];
      title?: string | null;
    };
    ItemsShowsUsergroups: {
      id?: number;
      shows_id?: number | components["schemas"]["ItemsShows"];
      usergroups_code?: string | components["schemas"]["ItemsUsergroups"];
    };
    ItemsTags: {
      code?: string | null;
      date_created?: string | null;
      date_updated?: string | null;
      id?: number;
      name?: string;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      episodes?: (number | components["schemas"]["ItemsEpisodesTags"])[];
    };
    ItemsTvguideentry: {
      date_created?: string | null;
      date_updated?: string | null;
      description?: string | null;
      end?: string | null;
      event?: (number | components["schemas"]["ItemsCalendarevent"]) | null;
      id?: number;
      image?: (string | components["schemas"]["Files"]) | null;
      start?: string | null;
      status?: string | null;
      title?: string | null;
      /** Will use the image from the linked episode if it has one. */
      use_image_from_link?: boolean;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      link?: (number | components["schemas"]["ItemsTvguideentryLink"])[];
    };
    ItemsTvguideentryLink: {
      collection?: string | null;
      id?: number;
      item?: (string | { [key: string]: any })[] | null;
      tvguideentry_id?:
        | (number | components["schemas"]["ItemsTvguideentry"])
        | null;
    };
    ItemsUsergroups: {
      code?: string;
      date_created?: string | null;
      date_updated?: string | null;
      /** One per line */
      emails?: string | null;
      name?: string;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      episode_earlyaccess?: (
        | number
        | components["schemas"]["ItemsEpisodesUsergroupsEarlyaccess"]
      )[];
    };
    Activity: {
      /** Unique identifier for the object. */
      id?: number;
      /** Action that was performed. */
      action?: "create" | "update" | "delete" | "login";
      /** The user who performed this action. */
      user?: (string | components["schemas"]["Users"]) | null;
      /** When the action happened. */
      timestamp?: string;
      /** The IP address of the user at the time the action took place. */
      ip?: string;
      /** User agent string of the browser the user used when the action took place. */
      user_agent?: string;
      /** Collection identifier in which the item resides. */
      collection?: string | components["schemas"]["Collections"];
      /** Unique identifier for the item the action applied to. This is always a string, even for integer primary keys. */
      item?: string;
      /** User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app. */
      comment?: string | null;
      revisions?: (number | components["schemas"]["Revisions"])[];
    };
    Collections: {
      /** The collection key. */
      collection?: string;
      icon?: string | null;
      note?: string | null;
      display_template?: string | null;
      hidden?: boolean;
      singleton?: boolean;
      translations?: string[] | null;
      archive_field?: string | null;
      archive_app_filter?: boolean;
      archive_value?: string | null;
      unarchive_value?: string | null;
      sort_field?: string | null;
      accountability?: string | null;
      color?: string | null;
      item_duplication_fields?: string[] | null;
      sort?: number | null;
      group?: (string | components["schemas"]["Collections"]) | null;
      collapse?: string;
      collection_divider?: string;
      archive_divider?: string;
      sort_divider?: string;
      accountability_divider?: string;
      duplication_divider?: string;
    };
    Fields: {
      id?: number;
      /** Unique name of the collection this field is in. */
      collection?: string;
      /** Unique name of the field. Field name is unique within the collection. */
      field?: string;
      special?: string[] | null;
      interface?: string | null;
      options?: string[] | null;
      display?: string | null;
      display_options?: string[] | null;
      readonly?: boolean;
      hidden?: boolean;
      sort?: number | null;
      width?: string | null;
      translations?: string[] | null;
      note?: string | null;
      conditions?: string[] | null;
      required?: boolean | null;
      group?: (number | components["schemas"]["Fields"]) | null;
      validation?: string[] | null;
      validation_message?: string | null;
    };
    Files: {
      /** Unique identifier for the file. */
      id?: string;
      /** Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`). */
      storage?: string;
      /** Name of the file on disk. By default, Directus uses a random hash for the filename. */
      filename_disk?: string;
      /** How you want to the file to be named when it's being downloaded. */
      filename_download?: string;
      /** Title for the file. Is extracted from the filename on upload, but can be edited by the user. */
      title?: string;
      /** MIME type of the file. */
      type?: string;
      /** Virtual folder where this file resides in. */
      folder?: (string | components["schemas"]["Folders"]) | null;
      /** Who uploaded the file. */
      uploaded_by?: string | components["schemas"]["Users"];
      /** When the file was uploaded. */
      uploaded_on?: string;
      modified_by?: (string | components["schemas"]["Users"]) | null;
      modified_on?: string;
      /** Character set of the file. */
      charset?: string | null;
      /** Size of the file in bytes. */
      filesize?: number;
      /** Width of the file in pixels. Only applies to images. */
      width?: number | null;
      /** Height of the file in pixels. Only applies to images. */
      height?: number | null;
      /** Duration of the file in seconds. Only applies to audio and video. */
      duration?: number | null;
      /** Where the file was embedded from. */
      embed?: string | null;
      /** Description for the file. */
      description?: string | null;
      /** Where the file was created. Is automatically populated based on EXIF data for images. */
      location?: string | null;
      /** Tags for the file. Is automatically populated based on EXIF data for images. */
      tags?: string[] | null;
      /** IPTC, EXIF, and ICC metadata extracted from file */
      metadata?: { [key: string]: any } | null;
      storage_divider?: string;
    };
    Folders: {
      /** Unique identifier for the folder. */
      id?: string;
      /** Name of the folder. */
      name?: string;
      /** Unique identifier of the parent folder. This allows for nested folders. */
      parent?: (string | components["schemas"]["Folders"]) | null;
    };
    Permissions: {
      /** Unique identifier for the permission. */
      id?: number;
      /** Unique identifier of the role this permission applies to. */
      role?: string | null;
      /** What collection this permission applies to. */
      collection?: string;
      /** What action this permission applies to. */
      action?: "create" | "read" | "update" | "delete";
      /** JSON structure containing the permissions checks for this permission. */
      permissions?: { [key: string]: any } | null;
      /** JSON structure containing the validation checks for this permission. */
      validation?: { [key: string]: any } | null;
      /** JSON structure containing the preset value for created/updated items. */
      presets?: { [key: string]: any } | null;
      /** CSV of fields that the user is allowed to interact with. */
      fields?: string[] | null;
    };
    Presets: {
      /** Unique identifier for this single collection preset. */
      id?: number;
      /** Name for the bookmark. If this is set, the preset will be considered a bookmark. */
      bookmark?: string | null;
      /** The unique identifier of the user to whom this collection preset applies. */
      user?: (string | components["schemas"]["Users"]) | null;
      /** The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role. */
      role?: (string | components["schemas"]["Roles"]) | null;
      /** What collection this collection preset is used for. */
      collection?: string | components["schemas"]["Collections"];
      /** Search query. */
      search?: string | null;
      /** Key of the layout that is used. */
      layout?: string;
      /** Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
      layout_query?: { [key: string]: any } | null;
      /** Options of the views. The properties in here are controlled by the layout. */
      layout_options?: { [key: string]: any } | null;
      refresh_interval?: number | null;
      filter?: string[] | null;
      icon?: string;
      color?: string | null;
    };
    Relations: {
      /** Unique identifier for the relation. */
      id?: number;
      /** Collection that has the field that holds the foreign key. */
      many_collection?: string;
      /** Foreign key. Field that holds the primary key of the related collection. */
      many_field?: string;
      /** Collection on the _one_ side of the relationship. */
      one_collection?: string;
      /** Alias column that serves as the _one_ side of the relationship. */
      one_field?: string | null;
      one_collection_field?: string | null;
      one_allowed_collections?: string[] | null;
      /** Field on the junction table that holds the many field of the related relation. */
      junction_field?: string | null;
      sort_field?: string | null;
      one_deselect_action?: string;
    };
    Revisions: {
      /** Unique identifier for the revision. */
      id?: number;
      /** Unique identifier for the activity record. */
      activity?: number | components["schemas"]["Activity"];
      /** Collection of the updated item. */
      collection?: string | components["schemas"]["Collections"];
      /** Primary key of updated item. */
      item?: string;
      /** Copy of item state at time of update. */
      data?: { [key: string]: any } | null;
      /** Changes between the previous and the current revision. */
      delta?: { [key: string]: any };
      /** If the current item was updated relationally, this is the id of the parent revision record */
      parent?: number | null;
    };
    Roles: {
      /** Unique identifier for the role. */
      id?: string;
      /** Name of the role. */
      name?: string;
      /** The role's icon. */
      icon?: string;
      /** Description of the role. */
      description?: string | null;
      /** Array of IP addresses that are allowed to connect to the API as a user of this role. */
      ip_access?: string[];
      /** Whether or not this role enforces the use of 2FA. */
      enforce_tfa?: boolean;
      /** Admin role. If true, skips all permission checks. */
      admin_access?: boolean;
      /** The users in the role are allowed to use the app. */
      app_access?: boolean;
      users?: (string | components["schemas"]["Users"])[];
    };
    Settings: {
      /** Unique identifier for the setting. */
      id?: number;
      /** The name of the project. */
      project_name?: string;
      /** The url of the project. */
      project_url?: string | null;
      /** The brand color of the project. */
      project_color?: string | null;
      /** The logo of the project. */
      project_logo?: string | null;
      /** The foreground of the project. */
      public_foreground?: string | null;
      /** The background of the project. */
      public_background?: string | null;
      /** Note rendered on the public pages of the app. */
      public_note?: string | null;
      /** Allowed authentication login attempts before the user's status is set to blocked. */
      auth_login_attempts?: number;
      /** Authentication password policy. */
      auth_password_policy?: string | null;
      /** What transformations are allowed in the assets endpoint. */
      storage_asset_transform?: ("all" | "none" | "presets") | null;
      /** Array of allowed */
      storage_asset_presets?:
        | {
            /** Key for the asset. Used in the assets endpoint. */
            key?: string;
            /** Whether to crop the thumbnail to match the size, or maintain the aspect ratio. */
            fit?: "cover" | "contain" | "inside" | "outside";
            /** Width of the thumbnail. */
            width?: number;
            /** Height of the thumbnail. */
            height?: number;
            /** No image upscale */
            withoutEnlargement?: boolean;
            /** Quality of the compression used. */
            quality?: number;
            /** Reformat output image */
            format?: "" | "jpeg" | "png" | "webp" | "tiff";
            /** Additional transformations to apply */
            transforms?:
              | {
                  /** The Sharp method name */
                  method?: string;
                  /** A list of arguments to pass to the Sharp method */
                  arguments?:
                    | {
                        /** A JSON representation of the argument value */
                        argument?: string;
                      }[]
                    | null;
                }[]
              | null;
          }[]
        | null;
      custom_css?: string | null;
      /** Default folder to place files */
      storage_default_folder?: string;
      basemaps?: string[] | null;
      mapbox_key?: string | null;
      module_bar?: string[] | null;
      project_descriptor?: string | null;
      translation_strings?: string[] | null;
      default_language?: string;
      branding_divider?: string;
      modules_divider?: string;
      security_divider?: string;
      files_divider?: string;
      map_divider?: string;
    };
    Users: {
      /** Unique identifier for the user. */
      id?: string;
      /** First name of the user. */
      first_name?: string;
      /** Last name of the user. */
      last_name?: string;
      /** Unique email address for the user. */
      email?: string;
      /** Password of the user. */
      password?: string;
      /** The user's location. */
      location?: string | null;
      /** The user's title. */
      title?: string | null;
      /** The user's description. */
      description?: string | null;
      /** The user's tags. */
      tags?: string[] | null;
      /** The user's avatar. */
      avatar?: (string | components["schemas"]["Files"]) | null;
      /** The user's language used in Directus. */
      language?: string;
      /** What theme the user is using. */
      theme?: "light" | "dark" | "auto";
      /** The 2FA secret string that's used to generate one time passwords. */
      tfa_secret?: string | null;
      /** Status of the user. */
      status?: "active" | "invited" | "draft" | "suspended" | "deleted";
      /** Unique identifier of the role of this user. */
      role?: string | components["schemas"]["Roles"];
      /** Static token for the user. */
      token?: string | null;
      last_access?: string | null;
      /** Last page that the user was on. */
      last_page?: string | null;
      provider?: string;
      external_identifier?: string | null;
      auth_data?: string[] | null;
      email_notifications?: boolean | null;
      preferences_divider?: string;
      admin_divider?: string;
    };
    Webhooks: {
      /** The index of the webhook. */
      id?: number;
      /** The name of the webhook. */
      name?: string;
      /** Method used in the webhook. */
      method?: string;
      /** The url of the webhook. */
      url?: string | null;
      /** The status of the webhook. */
      status?: string;
      /** If yes, send the content of what was done */
      data?: boolean;
      /** The actions that triggers this webhook. */
      actions?: string[] | null;
      collections?: string[];
      headers?: string[] | null;
      triggers_divider?: string;
    };
  };
  responses: {
    /** Error: Not found. */
    NotFoundError: {
      content: {
        "application/json": {
          error?: {
            code?: number;
            message?: string;
          };
        };
      };
    };
    /** Error: Unauthorized request */
    UnauthorizedError: {
      content: {
        "application/json": {
          error?: {
            code?: number;
            message?: string;
          };
        };
      };
    };
  };
  parameters: {
    /** Index */
    Id: number;
    /** Unique identifier for the object. */
    UUId: string;
    /** Collection of which you want to retrieve the items from. */
    Collection: string;
    /** Filter by items that contain the given search query in one of their fields. */
    Search: string;
    /** Cursor for use in pagination. Often used in combination with limit. */
    Page: number;
    /** How many items to skip when fetching data. */
    Offset: number;
    /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
    Sort: string[];
    /** What metadata to return in the response. */
    Meta: string;
    /** A limit on the number of objects that are returned. */
    Limit: number;
    /** Select items in collection by given conditions. */
    Filter: string[];
    /** Control what fields are being returned in the object. */
    Fields: string[];
    /** Controls if the API sets a cookie or returns a JWT on successful login. */
    Mode: "jwt" | "cookie";
  };
}

export interface operations {
  /** Image typed files can be dynamically resized and transformed to fit any need. */
  getAsset: {
    parameters: {
      path: {
        /** The id of the file. */
        id: string;
      };
      query: {
        /** The key of the asset size configured in settings. */
        key?: string;
        /** A JSON array of image transformations */
        transforms?: string;
        /** Download the asset to your computer */
        download?: boolean;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "text/plain": string;
        };
      };
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a Temporary Access Token */
  login: {
    responses: {
      /** Successful authentification */
      200: {
        content: {
          "application/json": {
            data?: {
              access_token?: string;
              expires?: number;
              refresh_token?: string;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Email address of the user you're retrieving the access token for. */
          email: string;
          /** Password of the user. */
          password: string;
          /** Choose between retrieving the token as a string, or setting it as a cookie. */
          mode?: "json" | "cookie";
          /** If 2FA is enabled, you need to pass the one time password. */
          otp?: string;
        };
      };
    };
  };
  /** Refresh a Temporary Access Token. */
  refresh: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: {
              access_token?: string;
              expires?: number;
              refresh_token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** JWT access token you want to refresh. This token can't be expired. */
          refresh_token?: string;
        };
      };
    };
  };
  /** Log Out */
  logout: {
    responses: {
      /** Request successful */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** JWT access token you want to logout. */
          refresh_token?: string;
        };
      };
    };
  };
  /** Request a reset password email to be send. */
  passwordRequest: {
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Email address of the user you're requesting a reset for. */
          email: string;
        };
      };
    };
  };
  /** The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password. */
  passwordReset: {
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** One-time use JWT token that is used to verify the user. */
          token: string;
          /** New password for the user. */
          password: string;
        };
      };
    };
  };
  /** List configured OAuth providers. */
  oauth: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: string[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Start OAuth flow using the specified provider */
  oauthProvider: {
    parameters: {
      path: {
        /** Key of the activated OAuth provider. */
        provider: string;
      };
      query: {
        /** Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned. */
        redirect?: string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: {
              token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** List all installed custom interfaces. */
  getInterfaces: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List all installed custom layouts. */
  getLayouts: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List all installed custom displays. */
  getDisplays: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List all installed custom modules. */
  getModules: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Perform a system status check and return the options. */
  serverInfo: {
    parameters: {
      query: {
        /** The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server. */
        super_admin_token: number;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Ping, pong. Ping.. pong. */
  ping: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/text": string;
        };
      };
    };
  };
  /** Returns a random string of given length. */
  random: {
    parameters: {
      query: {
        /** Length of the random string. */
        length?: number;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: string;
          };
        };
      };
    };
  };
  /** Re-sort items in collection based on start and to value of item */
  sort: {
    parameters: {
      path: {
        /** Collection identifier */
        collection: string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Primary key of item to move */
          item?: number;
          /** Primary key of item where to move the current item to */
          to?: number;
        };
      };
    };
  };
  /** List the ageratings items. */
  readItemsAgeratings: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAgeratings"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new ageratings item. */
  createItemsAgeratings: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAgeratings"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsAgeratings"][]
          | components["schemas"]["ItemsAgeratings"];
      };
    };
  };
  /** Retrieve a single ageratings item by unique identifier. */
  readSingleItemsAgeratings: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAgeratings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing ageratings item. */
  deleteSingleItemsAgeratings: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing ageratings item. */
  updateSingleItemsAgeratings: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAgeratings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsAgeratings"];
      };
    };
  };
  /** List the ageratings_translations items. */
  readItemsAgeratingsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAgeratingsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new ageratings_translations item. */
  createItemsAgeratingsTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAgeratingsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsAgeratingsTranslations"][]
          | components["schemas"]["ItemsAgeratingsTranslations"];
      };
    };
  };
  /** Retrieve a single ageratings_translations item by unique identifier. */
  readSingleItemsAgeratingsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAgeratingsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing ageratings_translations item. */
  deleteSingleItemsAgeratingsTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing ageratings_translations item. */
  updateSingleItemsAgeratingsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAgeratingsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsAgeratingsTranslations"];
      };
    };
  };
  /** List the assetfiles items. */
  readItemsAssetfiles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetfiles"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new assetfiles item. */
  createItemsAssetfiles: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetfiles"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsAssetfiles"][]
          | components["schemas"]["ItemsAssetfiles"];
      };
    };
  };
  /** Retrieve a single assetfiles item by unique identifier. */
  readSingleItemsAssetfiles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetfiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing assetfiles item. */
  deleteSingleItemsAssetfiles: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing assetfiles item. */
  updateSingleItemsAssetfiles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetfiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsAssetfiles"];
      };
    };
  };
  /** List the asset_management items. */
  readItemsAssetManagement: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetManagement"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new asset_management item. */
  createItemsAssetManagement: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetManagement"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsAssetManagement"][]
          | components["schemas"]["ItemsAssetManagement"];
      };
    };
  };
  /** Retrieve a single asset_management item by unique identifier. */
  readSingleItemsAssetManagement: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetManagement"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing asset_management item. */
  deleteSingleItemsAssetManagement: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing asset_management item. */
  updateSingleItemsAssetManagement: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetManagement"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsAssetManagement"];
      };
    };
  };
  /** List the assets items. */
  readItemsAssets: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssets"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new assets item. */
  createItemsAssets: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssets"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsAssets"][]
          | components["schemas"]["ItemsAssets"];
      };
    };
  };
  /** Retrieve a single assets item by unique identifier. */
  readSingleItemsAssets: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing assets item. */
  deleteSingleItemsAssets: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing assets item. */
  updateSingleItemsAssets: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsAssets"];
      };
    };
  };
  /** List the assetstreams items. */
  readItemsAssetstreams: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetstreams"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new assetstreams item. */
  createItemsAssetstreams: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetstreams"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsAssetstreams"][]
          | components["schemas"]["ItemsAssetstreams"];
      };
    };
  };
  /** Retrieve a single assetstreams item by unique identifier. */
  readSingleItemsAssetstreams: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetstreams"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing assetstreams item. */
  deleteSingleItemsAssetstreams: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing assetstreams item. */
  updateSingleItemsAssetstreams: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetstreams"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsAssetstreams"];
      };
    };
  };
  /** List the assetstreams_audio_languages items. */
  readItemsAssetstreamsAudioLanguages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetstreamsAudioLanguages"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new assetstreams_audio_languages item. */
  createItemsAssetstreamsAudioLanguages: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetstreamsAudioLanguages"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsAssetstreamsAudioLanguages"][]
          | components["schemas"]["ItemsAssetstreamsAudioLanguages"];
      };
    };
  };
  /** Retrieve a single assetstreams_audio_languages item by unique identifier. */
  readSingleItemsAssetstreamsAudioLanguages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetstreamsAudioLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing assetstreams_audio_languages item. */
  deleteSingleItemsAssetstreamsAudioLanguages: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing assetstreams_audio_languages item. */
  updateSingleItemsAssetstreamsAudioLanguages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetstreamsAudioLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsAssetstreamsAudioLanguages"];
      };
    };
  };
  /** List the assetstreams_subtitle_languages items. */
  readItemsAssetstreamsSubtitleLanguages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetstreamsSubtitleLanguages"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new assetstreams_subtitle_languages item. */
  createItemsAssetstreamsSubtitleLanguages: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetstreamsSubtitleLanguages"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsAssetstreamsSubtitleLanguages"][]
          | components["schemas"]["ItemsAssetstreamsSubtitleLanguages"];
      };
    };
  };
  /** Retrieve a single assetstreams_subtitle_languages item by unique identifier. */
  readSingleItemsAssetstreamsSubtitleLanguages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetstreamsSubtitleLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing assetstreams_subtitle_languages item. */
  deleteSingleItemsAssetstreamsSubtitleLanguages: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing assetstreams_subtitle_languages item. */
  updateSingleItemsAssetstreamsSubtitleLanguages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAssetstreamsSubtitleLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsAssetstreamsSubtitleLanguages"];
      };
    };
  };
  /** List the calendar items. */
  readItemsCalendar: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCalendar"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new calendar item. */
  createItemsCalendar: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCalendar"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsCalendar"][]
          | components["schemas"]["ItemsCalendar"];
      };
    };
  };
  /** Retrieve a single calendar item by unique identifier. */
  readSingleItemsCalendar: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCalendar"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing calendar item. */
  deleteSingleItemsCalendar: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing calendar item. */
  updateSingleItemsCalendar: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCalendar"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsCalendar"];
      };
    };
  };
  /** List the calendarevent items. */
  readItemsCalendarevent: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCalendarevent"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new calendarevent item. */
  createItemsCalendarevent: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCalendarevent"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsCalendarevent"][]
          | components["schemas"]["ItemsCalendarevent"];
      };
    };
  };
  /** Retrieve a single calendarevent item by unique identifier. */
  readSingleItemsCalendarevent: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCalendarevent"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing calendarevent item. */
  deleteSingleItemsCalendarevent: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing calendarevent item. */
  updateSingleItemsCalendarevent: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCalendarevent"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsCalendarevent"];
      };
    };
  };
  /** List the categories items. */
  readItemsCategories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategories"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new categories item. */
  createItemsCategories: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategories"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsCategories"][]
          | components["schemas"]["ItemsCategories"];
      };
    };
  };
  /** Retrieve a single categories item by unique identifier. */
  readSingleItemsCategories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing categories item. */
  deleteSingleItemsCategories: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing categories item. */
  updateSingleItemsCategories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsCategories"];
      };
    };
  };
  /** List the categories_translations items. */
  readItemsCategoriesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategoriesTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new categories_translations item. */
  createItemsCategoriesTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategoriesTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsCategoriesTranslations"][]
          | components["schemas"]["ItemsCategoriesTranslations"];
      };
    };
  };
  /** Retrieve a single categories_translations item by unique identifier. */
  readSingleItemsCategoriesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategoriesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing categories_translations item. */
  deleteSingleItemsCategoriesTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing categories_translations item. */
  updateSingleItemsCategoriesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategoriesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsCategoriesTranslations"];
      };
    };
  };
  /** List the collections items. */
  readItemsCollections: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollections"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new collections item. */
  createItemsCollections: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollections"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsCollections"][]
          | components["schemas"]["ItemsCollections"];
      };
    };
  };
  /** Retrieve a single collections item by unique identifier. */
  readSingleItemsCollections: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing collections item. */
  deleteSingleItemsCollections: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing collections item. */
  updateSingleItemsCollections: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsCollections"];
      };
    };
  };
  /** List the collections_episodes items. */
  readItemsCollectionsEpisodes: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsEpisodes"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new collections_episodes item. */
  createItemsCollectionsEpisodes: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsEpisodes"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsCollectionsEpisodes"][]
          | components["schemas"]["ItemsCollectionsEpisodes"];
      };
    };
  };
  /** Retrieve a single collections_episodes item by unique identifier. */
  readSingleItemsCollectionsEpisodes: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsEpisodes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing collections_episodes item. */
  deleteSingleItemsCollectionsEpisodes: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing collections_episodes item. */
  updateSingleItemsCollectionsEpisodes: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsEpisodes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsCollectionsEpisodes"];
      };
    };
  };
  /** List the collections_relations items. */
  readItemsCollectionsRelations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsRelations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new collections_relations item. */
  createItemsCollectionsRelations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsRelations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsCollectionsRelations"][]
          | components["schemas"]["ItemsCollectionsRelations"];
      };
    };
  };
  /** Retrieve a single collections_relations item by unique identifier. */
  readSingleItemsCollectionsRelations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsRelations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing collections_relations item. */
  deleteSingleItemsCollectionsRelations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing collections_relations item. */
  updateSingleItemsCollectionsRelations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsRelations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsCollectionsRelations"];
      };
    };
  };
  /** List the collections_seasons items. */
  readItemsCollectionsSeasons: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsSeasons"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new collections_seasons item. */
  createItemsCollectionsSeasons: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsSeasons"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsCollectionsSeasons"][]
          | components["schemas"]["ItemsCollectionsSeasons"];
      };
    };
  };
  /** Retrieve a single collections_seasons item by unique identifier. */
  readSingleItemsCollectionsSeasons: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsSeasons"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing collections_seasons item. */
  deleteSingleItemsCollectionsSeasons: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing collections_seasons item. */
  updateSingleItemsCollectionsSeasons: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsSeasons"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsCollectionsSeasons"];
      };
    };
  };
  /** List the collections_shows items. */
  readItemsCollectionsShows: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsShows"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new collections_shows item. */
  createItemsCollectionsShows: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsShows"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsCollectionsShows"][]
          | components["schemas"]["ItemsCollectionsShows"];
      };
    };
  };
  /** Retrieve a single collections_shows item by unique identifier. */
  readSingleItemsCollectionsShows: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsShows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing collections_shows item. */
  deleteSingleItemsCollectionsShows: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing collections_shows item. */
  updateSingleItemsCollectionsShows: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsShows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsCollectionsShows"];
      };
    };
  };
  /** List the collections_translations items. */
  readItemsCollectionsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new collections_translations item. */
  createItemsCollectionsTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsCollectionsTranslations"][]
          | components["schemas"]["ItemsCollectionsTranslations"];
      };
    };
  };
  /** Retrieve a single collections_translations item by unique identifier. */
  readSingleItemsCollectionsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing collections_translations item. */
  deleteSingleItemsCollectionsTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing collections_translations item. */
  updateSingleItemsCollectionsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCollectionsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsCollectionsTranslations"];
      };
    };
  };
  /** List the config items. */
  readItemsConfig: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsConfig"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new config item. */
  createItemsConfig: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsConfig"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsConfig"][]
          | components["schemas"]["ItemsConfig"];
      };
    };
  };
  /** Retrieve a single config item by unique identifier. */
  readSingleItemsConfig: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsConfig"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing config item. */
  deleteSingleItemsConfig: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing config item. */
  updateSingleItemsConfig: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsConfig"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsConfig"];
      };
    };
  };
  /** List the episodes items. */
  readItemsEpisodes: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodes"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new episodes item. */
  createItemsEpisodes: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodes"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsEpisodes"][]
          | components["schemas"]["ItemsEpisodes"];
      };
    };
  };
  /** Retrieve a single episodes item by unique identifier. */
  readSingleItemsEpisodes: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing episodes item. */
  deleteSingleItemsEpisodes: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing episodes item. */
  updateSingleItemsEpisodes: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsEpisodes"];
      };
    };
  };
  /** List the episodes_categories items. */
  readItemsEpisodesCategories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesCategories"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new episodes_categories item. */
  createItemsEpisodesCategories: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesCategories"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsEpisodesCategories"][]
          | components["schemas"]["ItemsEpisodesCategories"];
      };
    };
  };
  /** Retrieve a single episodes_categories item by unique identifier. */
  readSingleItemsEpisodesCategories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing episodes_categories item. */
  deleteSingleItemsEpisodesCategories: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing episodes_categories item. */
  updateSingleItemsEpisodesCategories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsEpisodesCategories"];
      };
    };
  };
  /** List the episodes_tags items. */
  readItemsEpisodesTags: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesTags"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new episodes_tags item. */
  createItemsEpisodesTags: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesTags"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsEpisodesTags"][]
          | components["schemas"]["ItemsEpisodesTags"];
      };
    };
  };
  /** Retrieve a single episodes_tags item by unique identifier. */
  readSingleItemsEpisodesTags: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesTags"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing episodes_tags item. */
  deleteSingleItemsEpisodesTags: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing episodes_tags item. */
  updateSingleItemsEpisodesTags: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesTags"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsEpisodesTags"];
      };
    };
  };
  /** List the episodes_translations items. */
  readItemsEpisodesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new episodes_translations item. */
  createItemsEpisodesTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsEpisodesTranslations"][]
          | components["schemas"]["ItemsEpisodesTranslations"];
      };
    };
  };
  /** Retrieve a single episodes_translations item by unique identifier. */
  readSingleItemsEpisodesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing episodes_translations item. */
  deleteSingleItemsEpisodesTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing episodes_translations item. */
  updateSingleItemsEpisodesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsEpisodesTranslations"];
      };
    };
  };
  /** List the episodes_usergroups items. */
  readItemsEpisodesUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesUsergroups"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new episodes_usergroups item. */
  createItemsEpisodesUsergroups: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesUsergroups"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsEpisodesUsergroups"][]
          | components["schemas"]["ItemsEpisodesUsergroups"];
      };
    };
  };
  /** Retrieve a single episodes_usergroups item by unique identifier. */
  readSingleItemsEpisodesUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesUsergroups"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing episodes_usergroups item. */
  deleteSingleItemsEpisodesUsergroups: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing episodes_usergroups item. */
  updateSingleItemsEpisodesUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesUsergroups"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsEpisodesUsergroups"];
      };
    };
  };
  /** List the episodes_usergroups_download items. */
  readItemsEpisodesUsergroupsDownload: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesUsergroupsDownload"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new episodes_usergroups_download item. */
  createItemsEpisodesUsergroupsDownload: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesUsergroupsDownload"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsEpisodesUsergroupsDownload"][]
          | components["schemas"]["ItemsEpisodesUsergroupsDownload"];
      };
    };
  };
  /** Retrieve a single episodes_usergroups_download item by unique identifier. */
  readSingleItemsEpisodesUsergroupsDownload: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesUsergroupsDownload"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing episodes_usergroups_download item. */
  deleteSingleItemsEpisodesUsergroupsDownload: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing episodes_usergroups_download item. */
  updateSingleItemsEpisodesUsergroupsDownload: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesUsergroupsDownload"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsEpisodesUsergroupsDownload"];
      };
    };
  };
  /** List the episodes_usergroups_earlyaccess items. */
  readItemsEpisodesUsergroupsEarlyaccess: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesUsergroupsEarlyaccess"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new episodes_usergroups_earlyaccess item. */
  createItemsEpisodesUsergroupsEarlyaccess: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesUsergroupsEarlyaccess"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsEpisodesUsergroupsEarlyaccess"][]
          | components["schemas"]["ItemsEpisodesUsergroupsEarlyaccess"];
      };
    };
  };
  /** Retrieve a single episodes_usergroups_earlyaccess item by unique identifier. */
  readSingleItemsEpisodesUsergroupsEarlyaccess: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesUsergroupsEarlyaccess"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing episodes_usergroups_earlyaccess item. */
  deleteSingleItemsEpisodesUsergroupsEarlyaccess: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing episodes_usergroups_earlyaccess item. */
  updateSingleItemsEpisodesUsergroupsEarlyaccess: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEpisodesUsergroupsEarlyaccess"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsEpisodesUsergroupsEarlyaccess"];
      };
    };
  };
  /** List the languages items. */
  readItemsLanguages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new languages item. */
  createItemsLanguages: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsLanguages"][]
          | components["schemas"]["ItemsLanguages"];
      };
    };
  };
  /** Retrieve a single languages item by unique identifier. */
  readSingleItemsLanguages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing languages item. */
  deleteSingleItemsLanguages: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing languages item. */
  updateSingleItemsLanguages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsLanguages"];
      };
    };
  };
  /** List the lists items. */
  readItemsLists: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLists"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new lists item. */
  createItemsLists: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLists"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsLists"][]
          | components["schemas"]["ItemsLists"];
      };
    };
  };
  /** Retrieve a single lists item by unique identifier. */
  readSingleItemsLists: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLists"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing lists item. */
  deleteSingleItemsLists: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing lists item. */
  updateSingleItemsLists: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLists"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsLists"];
      };
    };
  };
  /** List the lists_relations items. */
  readItemsListsRelations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsListsRelations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new lists_relations item. */
  createItemsListsRelations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsListsRelations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsListsRelations"][]
          | components["schemas"]["ItemsListsRelations"];
      };
    };
  };
  /** Retrieve a single lists_relations item by unique identifier. */
  readSingleItemsListsRelations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsListsRelations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing lists_relations item. */
  deleteSingleItemsListsRelations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing lists_relations item. */
  updateSingleItemsListsRelations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsListsRelations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsListsRelations"];
      };
    };
  };
  /** List the main_content items. */
  readItemsMainContent: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMainContent"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new main_content item. */
  createItemsMainContent: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMainContent"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsMainContent"][]
          | components["schemas"]["ItemsMainContent"];
      };
    };
  };
  /** Retrieve a single main_content item by unique identifier. */
  readSingleItemsMainContent: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMainContent"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing main_content item. */
  deleteSingleItemsMainContent: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing main_content item. */
  updateSingleItemsMainContent: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMainContent"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsMainContent"];
      };
    };
  };
  /** List the page_management items. */
  readItemsPageManagement: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageManagement"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new page_management item. */
  createItemsPageManagement: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageManagement"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsPageManagement"][]
          | components["schemas"]["ItemsPageManagement"];
      };
    };
  };
  /** Retrieve a single page_management item by unique identifier. */
  readSingleItemsPageManagement: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageManagement"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing page_management item. */
  deleteSingleItemsPageManagement: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing page_management item. */
  updateSingleItemsPageManagement: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageManagement"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsPageManagement"];
      };
    };
  };
  /** List the pages items. */
  readItemsPages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new pages item. */
  createItemsPages: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsPages"][]
          | components["schemas"]["ItemsPages"];
      };
    };
  };
  /** Retrieve a single pages item by unique identifier. */
  readSingleItemsPages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing pages item. */
  deleteSingleItemsPages: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing pages item. */
  updateSingleItemsPages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsPages"];
      };
    };
  };
  /** List the seasons items. */
  readItemsSeasons: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSeasons"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new seasons item. */
  createItemsSeasons: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSeasons"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsSeasons"][]
          | components["schemas"]["ItemsSeasons"];
      };
    };
  };
  /** Retrieve a single seasons item by unique identifier. */
  readSingleItemsSeasons: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSeasons"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing seasons item. */
  deleteSingleItemsSeasons: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing seasons item. */
  updateSingleItemsSeasons: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSeasons"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsSeasons"];
      };
    };
  };
  /** List the seasons_translations items. */
  readItemsSeasonsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSeasonsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new seasons_translations item. */
  createItemsSeasonsTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSeasonsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsSeasonsTranslations"][]
          | components["schemas"]["ItemsSeasonsTranslations"];
      };
    };
  };
  /** Retrieve a single seasons_translations item by unique identifier. */
  readSingleItemsSeasonsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSeasonsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing seasons_translations item. */
  deleteSingleItemsSeasonsTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing seasons_translations item. */
  updateSingleItemsSeasonsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSeasonsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsSeasonsTranslations"];
      };
    };
  };
  /** List the seasons_usergroups items. */
  readItemsSeasonsUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSeasonsUsergroups"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new seasons_usergroups item. */
  createItemsSeasonsUsergroups: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSeasonsUsergroups"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsSeasonsUsergroups"][]
          | components["schemas"]["ItemsSeasonsUsergroups"];
      };
    };
  };
  /** Retrieve a single seasons_usergroups item by unique identifier. */
  readSingleItemsSeasonsUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSeasonsUsergroups"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing seasons_usergroups item. */
  deleteSingleItemsSeasonsUsergroups: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing seasons_usergroups item. */
  updateSingleItemsSeasonsUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSeasonsUsergroups"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsSeasonsUsergroups"];
      };
    };
  };
  /** List the sections items. */
  readItemsSections: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSections"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new sections item. */
  createItemsSections: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSections"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsSections"][]
          | components["schemas"]["ItemsSections"];
      };
    };
  };
  /** Retrieve a single sections item by unique identifier. */
  readSingleItemsSections: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing sections item. */
  deleteSingleItemsSections: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing sections item. */
  updateSingleItemsSections: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsSections"];
      };
    };
  };
  /** List the sections_translations items. */
  readItemsSectionsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new sections_translations item. */
  createItemsSectionsTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsSectionsTranslations"][]
          | components["schemas"]["ItemsSectionsTranslations"];
      };
    };
  };
  /** Retrieve a single sections_translations item by unique identifier. */
  readSingleItemsSectionsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing sections_translations item. */
  deleteSingleItemsSectionsTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing sections_translations item. */
  updateSingleItemsSectionsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsSectionsTranslations"];
      };
    };
  };
  /** List the sections_usergroups items. */
  readItemsSectionsUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionsUsergroups"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new sections_usergroups item. */
  createItemsSectionsUsergroups: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionsUsergroups"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsSectionsUsergroups"][]
          | components["schemas"]["ItemsSectionsUsergroups"];
      };
    };
  };
  /** Retrieve a single sections_usergroups item by unique identifier. */
  readSingleItemsSectionsUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionsUsergroups"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing sections_usergroups item. */
  deleteSingleItemsSectionsUsergroups: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing sections_usergroups item. */
  updateSingleItemsSectionsUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSectionsUsergroups"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsSectionsUsergroups"];
      };
    };
  };
  /** List the shows items. */
  readItemsShows: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsShows"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new shows item. */
  createItemsShows: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsShows"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsShows"][]
          | components["schemas"]["ItemsShows"];
      };
    };
  };
  /** Retrieve a single shows item by unique identifier. */
  readSingleItemsShows: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsShows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing shows item. */
  deleteSingleItemsShows: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing shows item. */
  updateSingleItemsShows: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsShows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsShows"];
      };
    };
  };
  /** List the shows_translations items. */
  readItemsShowsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsShowsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new shows_translations item. */
  createItemsShowsTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsShowsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsShowsTranslations"][]
          | components["schemas"]["ItemsShowsTranslations"];
      };
    };
  };
  /** Retrieve a single shows_translations item by unique identifier. */
  readSingleItemsShowsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsShowsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing shows_translations item. */
  deleteSingleItemsShowsTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing shows_translations item. */
  updateSingleItemsShowsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsShowsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsShowsTranslations"];
      };
    };
  };
  /** List the shows_usergroups items. */
  readItemsShowsUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsShowsUsergroups"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new shows_usergroups item. */
  createItemsShowsUsergroups: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsShowsUsergroups"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsShowsUsergroups"][]
          | components["schemas"]["ItemsShowsUsergroups"];
      };
    };
  };
  /** Retrieve a single shows_usergroups item by unique identifier. */
  readSingleItemsShowsUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsShowsUsergroups"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing shows_usergroups item. */
  deleteSingleItemsShowsUsergroups: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing shows_usergroups item. */
  updateSingleItemsShowsUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsShowsUsergroups"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsShowsUsergroups"];
      };
    };
  };
  /** List the tags items. */
  readItemsTags: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTags"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new tags item. */
  createItemsTags: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTags"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsTags"][]
          | components["schemas"]["ItemsTags"];
      };
    };
  };
  /** Retrieve a single tags item by unique identifier. */
  readSingleItemsTags: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTags"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing tags item. */
  deleteSingleItemsTags: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing tags item. */
  updateSingleItemsTags: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTags"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsTags"];
      };
    };
  };
  /** List the tvguideentry items. */
  readItemsTvguideentry: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTvguideentry"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new tvguideentry item. */
  createItemsTvguideentry: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTvguideentry"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsTvguideentry"][]
          | components["schemas"]["ItemsTvguideentry"];
      };
    };
  };
  /** Retrieve a single tvguideentry item by unique identifier. */
  readSingleItemsTvguideentry: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTvguideentry"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing tvguideentry item. */
  deleteSingleItemsTvguideentry: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing tvguideentry item. */
  updateSingleItemsTvguideentry: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTvguideentry"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsTvguideentry"];
      };
    };
  };
  /** List the tvguideentry_link items. */
  readItemsTvguideentryLink: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTvguideentryLink"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new tvguideentry_link item. */
  createItemsTvguideentryLink: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTvguideentryLink"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsTvguideentryLink"][]
          | components["schemas"]["ItemsTvguideentryLink"];
      };
    };
  };
  /** Retrieve a single tvguideentry_link item by unique identifier. */
  readSingleItemsTvguideentryLink: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTvguideentryLink"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing tvguideentry_link item. */
  deleteSingleItemsTvguideentryLink: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing tvguideentry_link item. */
  updateSingleItemsTvguideentryLink: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTvguideentryLink"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsTvguideentryLink"];
      };
    };
  };
  /** List the usergroups items. */
  readItemsUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUsergroups"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new usergroups item. */
  createItemsUsergroups: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUsergroups"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsUsergroups"][]
          | components["schemas"]["ItemsUsergroups"];
      };
    };
  };
  /** Retrieve a single usergroups item by unique identifier. */
  readSingleItemsUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUsergroups"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing usergroups item. */
  deleteSingleItemsUsergroups: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing usergroups item. */
  updateSingleItemsUsergroups: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUsergroups"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsUsergroups"];
      };
    };
  };
  /** Returns a list of activity actions. */
  getActivities: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Creates a new comment. */
  createComment: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          collection: string;
          item: number;
          comment: string;
        };
      };
    };
  };
  /** Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information. */
  getActivity: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing comment. Deleted comments can not be retrieved. */
  deleteComment: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** Deleted successfully */
      203: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update the content of an existing comment. */
  updateComment: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          comment?: string;
        };
      };
    };
  };
  /** Returns a list of the collections available in the project. */
  getCollections: {
    parameters: {
      query: {
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new collection in Directus. */
  createCollection: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Unique name of the collection. */
          collection: string;
          /** The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided. */
          fields: { [key: string]: any }[];
          /** Name of a Google Material Design Icon that's assigned to this collection. */
          icon?: string | null;
          /** A note describing the collection. */
          note?: string | null;
          /** Text representation of how items from this collection are shown across the system. */
          display_template?: string | null;
          /** Whether or not the collection is hidden from the navigation in the admin app. */
          hidden?: boolean;
          /** Whether or not the collection is treated as a single object. */
          singleton?: boolean;
          /** Key value pairs of how to show this collection's name in different languages in the admin app. */
          translation?: string | null;
          /** What field holds the archive value. */
          archive_field?: string | null;
          /** What value to use for "archived" items. */
          archive_app_filter?: string | null;
          /** What value to use to "unarchive" items. */
          archive_value?: string | null;
          /** Whether or not to show the "archived" filter. */
          unarchive_value?: string | null;
          /** The sort field in the collection. */
          sort_field?: string | null;
        };
      };
    };
  };
  /** Retrieves the details of a single collection. */
  getCollection: {
    parameters: {
      path: {
        /** Unique identifier of the collection. */
        id: string;
      };
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution. */
  deleteCollection: {
    parameters: {
      path: {
        /** Unique identifier of the collection. */
        id: string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing collection. */
  updateCollection: {
    parameters: {
      path: {
        /** Unique identifier of the collection. */
        id: string;
      };
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Metadata of the collection. */
          meta?: {
            /** Name of a Google Material Design Icon that's assigned to this collection. */
            icon?: string | null;
            /** Choose the color for the icon assigned to this collection. */
            color?: string | null;
            /** A note describing the collection. */
            note?: string | null;
            /** Text representation of how items from this collection are shown across the system. */
            display_template?: string | null;
            /** Whether or not the collection is hidden from the navigation in the admin app. */
            hidden?: boolean;
            /** Whether or not the collection is treated as a single object. */
            singleton?: boolean;
            /** Key value pairs of how to show this collection's name in different languages in the admin app. */
            translation?: string | null;
            /** What field holds the archive value. */
            archive_field?: string | null;
            /** What value to use for "archived" items. */
            archive_app_filter?: string | null;
            /** What value to use to "unarchive" items. */
            archive_value?: string | null;
            /** Whether or not to show the "archived" filter. */
            unarchive_value?: string | null;
            /** The sort field in the collection. */
            sort_field?: string | null;
          };
        };
      };
    };
  };
  /** Returns a list of the fields available in the project. */
  getFields: {
    parameters: {
      query: {
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Returns a list of the fields available in the given collection. */
  getCollectionFields: {
    parameters: {
      path: {
        /** Unique identifier of the collection the item resides in. */
        collection: string;
      };
      query: {
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new field in a given collection. */
  createField: {
    parameters: {
      path: {
        /** Unique identifier of the collection the item resides in. */
        collection: string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Unique name of the field. Field name is unique within the collection. */
          field: string;
          /** Directus specific data type. Used to cast values in the API. */
          type: string;
          /** The schema info. */
          schema?: {
            /** The name of the field. */
            name?: string;
            /** The collection of the field. */
            table?: string;
            /** The type of the field. */
            type?: string;
            /** The default value of the field. */
            default_value?: string | null;
            /** The max length of the field. */
            max_length?: number | null;
            /** If the field is nullable. */
            is_nullable?: boolean;
            /** If the field is primary key. */
            is_primary_key?: boolean;
            /** If the field has auto increment. */
            has_auto_increment?: boolean;
            /** Related column from the foreign key constraint. */
            foreign_key_column?: string | null;
            /** Related table from the foreign key constraint. */
            foreign_key_table?: string | null;
            /** Comment as saved in the database. */
            comment?: string | null;
            /** Database schema (pg only). */
            schema?: string;
            /** Related schema from the foreign key constraint (pg only). */
            foreign_key_schema?: string | null;
          };
          /** The meta info. */
          meta?: {
            /** Unique identifier for the field in the `directus_fields` collection. */
            id?: number;
            /** Unique name of the collection this field is in. */
            collection?: string;
            /** Unique name of the field. Field name is unique within the collection. */
            field?: string;
            /** Transformation flag for field */
            special?: string[] | null;
            /** What interface is used in the admin app to edit the value for this field. */
            "system-interface"?: string | null;
            /** Options for the interface that's used. This format is based on the individual interface. */
            options?: { [key: string]: any } | null;
            /** What display is used in the admin app to display the value for this field. */
            display?: string | null;
            /** Options for the display that's used. This format is based on the individual display. */
            display_options?: { [key: string]: any } | null;
            /** If the field can be altered by the end user. Directus system fields have this value set to `true`. */
            locked?: boolean;
            /** Prevents the user from editing the value in the field. */
            readonly?: boolean;
            /** If this field should be hidden. */
            hidden?: boolean;
            /** Sort order of this field on the edit page of the admin app. */
            sort?: number | null;
            /** Width of the field on the edit form. */
            width?:
              | ("half" | "half-left" | "half-right" | "full" | "fill")
              | null;
            /** What field group this field is part of. */
            group?: number | null;
            /** Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app. */
            translation?: { [key: string]: any } | null;
            /** A user provided note for the field. Will be rendered alongside the interface on the edit page. */
            note?: string | null;
          } | null;
        };
      };
    };
  };
  /** Retrieves the details of a single field in a given collection. */
  getCollectionField: {
    parameters: {
      path: {
        /** Unique identifier of the collection the item resides in. */
        collection: string;
        /** Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing field. */
  deleteField: {
    parameters: {
      path: {
        /** Unique identifier of the collection the item resides in. */
        collection: string;
        /** Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing field. */
  updateField: {
    parameters: {
      path: {
        /** Unique identifier of the collection the item resides in. */
        collection: string;
        /** Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Unique name of the field. Field name is unique within the collection. */
          field?: string;
          /** Directus specific data type. Used to cast values in the API. */
          type?: string;
          /** The schema info. */
          schema?: {
            /** The name of the field. */
            name?: string;
            /** The collection of the field. */
            table?: string;
            /** The type of the field. */
            type?: string;
            /** The default value of the field. */
            default_value?: string | null;
            /** The max length of the field. */
            max_length?: number | null;
            /** If the field is nullable. */
            is_nullable?: boolean;
            /** If the field is primary key. */
            is_primary_key?: boolean;
            /** If the field has auto increment. */
            has_auto_increment?: boolean;
            /** Related column from the foreign key constraint. */
            foreign_key_column?: string | null;
            /** Related table from the foreign key constraint. */
            foreign_key_table?: string | null;
            /** Comment as saved in the database. */
            comment?: string | null;
            /** Database schema (pg only). */
            schema?: string;
            /** Related schema from the foreign key constraint (pg only). */
            foreign_key_schema?: string | null;
          };
          /** The meta info. */
          meta?: {
            /** Unique identifier for the field in the `directus_fields` collection. */
            id?: number;
            /** Unique name of the collection this field is in. */
            collection?: string;
            /** Unique name of the field. Field name is unique within the collection. */
            field?: string;
            /** Transformation flag for field */
            special?: string[] | null;
            /** What interface is used in the admin app to edit the value for this field. */
            "system-interface"?: string | null;
            /** Options for the interface that's used. This format is based on the individual interface. */
            options?: { [key: string]: any } | null;
            /** What display is used in the admin app to display the value for this field. */
            display?: string | null;
            /** Options for the display that's used. This format is based on the individual display. */
            display_options?: { [key: string]: any } | null;
            /** If the field can be altered by the end user. Directus system fields have this value set to `true`. */
            locked?: boolean;
            /** Prevents the user from editing the value in the field. */
            readonly?: boolean;
            /** If this field should be hidden. */
            hidden?: boolean;
            /** Sort order of this field on the edit page of the admin app. */
            sort?: number | null;
            /** Width of the field on the edit form. */
            width?:
              | ("half" | "half-left" | "half-right" | "full" | "fill")
              | null;
            /** What field group this field is part of. */
            group?: number | null;
            /** Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app. */
            translation?: { [key: string]: any } | null;
            /** A user provided note for the field. Will be rendered alongside the interface on the edit page. */
            note?: string | null;
          } | null;
        };
      };
    };
  };
  /** List the files. */
  getFiles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new file */
  createFile: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          data?: string;
        };
      };
    };
  };
  /** Retrieve a single file by unique identifier. */
  getFile: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Delete an existing file. */
  deleteFile: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Update an existing file, and/or replace it's file contents. */
  updateFile: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "multipart/data": {
          /** Title for the file. Is extracted from the filename on upload, but can be edited by the user. */
          title?: string;
          /** Preferred filename when file is downloaded. */
          filename_download?: string;
          /** Description for the file. */
          description?: string | null;
          /** Virtual folder where this file resides in. */
          folder?: (string | components["schemas"]["Folders"]) | null;
          /** Tags for the file. Is automatically populated based on EXIF data for images. */
          tags?: string[] | null;
          /** File contents. */
          file: { [key: string]: any };
        };
        "application/json": {
          /** Title for the file. Is extracted from the filename on upload, but can be edited by the user. */
          title?: string;
          /** Preferred filename when file is downloaded. */
          filename_download?: string;
          /** Description for the file. */
          description?: string | null;
          /** Virtual folder where this file resides in. */
          folder?: (string | components["schemas"]["Folders"]) | null;
          /** Tags for the file. Is automatically populated based on EXIF data for images. */
          tags?: string[] | null;
        };
      };
    };
  };
  /** List the folders. */
  getFolders: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new folder. */
  createFolder: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Name of the folder. */
          name: string;
          /** Unique identifier of the parent folder. This allows for nested folders. */
          parent?: number;
        };
      };
    };
  };
  /** Retrieve a single folder by unique identifier. */
  getFolder: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing folder */
  deleteFolder: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing folder */
  updateFolder: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Name of the folder. Can't be null or empty. */
          name?: string;
          /** Unique identifier of the parent folder. This allows for nested folders. */
          parent?: number;
        };
      };
    };
  };
  /** List all permissions. */
  getPermissions: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new permission. */
  createPermission: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** What collection this permission applies to. */
          collection?: string;
          /** If the user can post comments. */
          comment?: "none" | "create" | "update" | "full";
          /** If the user can create items. */
          create?: "none" | "full";
          /** If the user can update items. */
          delete?: "none" | "mine" | "role" | "full";
          /** If the user is required to leave a comment explaining what was changed. */
          explain?: "none" | "create" | "update" | "always";
          /** If the user can read items. */
          read?: "none" | "mine" | "role" | "full";
          /** Unique identifier of the role this permission applies to. */
          role?: number;
          /** Explicitly denies read access for specific fields. */
          read_field_blacklist?: string[];
          /** What status this permission applies to. */
          status?: string;
          /** Explicitly denies specific statuses to be used. */
          status_blacklist?: string[];
          /** If the user can update items. */
          update?: "none" | "mine" | "role" | "full";
          /** Explicitly denies write access for specific fields. */
          write_field_blacklist?: string[];
        };
      };
    };
  };
  /** List the permissions that apply to the current user. */
  getMyPermissions: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a single permissions object by unique identifier. */
  getPermission: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing permission */
  deletePermission: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing permission */
  updatePermission: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** What collection this permission applies to. */
          collection?: { [key: string]: any };
          /** If the user can post comments. `full`. */
          comment?: "none" | "create" | "update";
          /** If the user can create items. */
          create?: "none" | "full";
          /** If the user can update items. */
          delete?: "none" | "mine" | "role" | "full";
          /** If the user is required to leave a comment explaining what was changed. */
          explain?: "none" | "create" | "update" | "always";
          /** If the user can read items. */
          read?: "none" | "mine" | "role" | "full";
          /** Explicitly denies read access for specific fields. */
          read_field_blacklist?: { [key: string]: any };
          /** Unique identifier of the role this permission applies to. */
          role?: { [key: string]: any };
          /** What status this permission applies to. */
          status?: { [key: string]: any };
          /** Explicitly denies specific statuses to be used. */
          status_blacklist?: { [key: string]: any };
          /** If the user can update items. */
          update?: "none" | "mine" | "role" | "full";
          /** Explicitly denies write access for specific fields. */
          write_field_blacklist?: { [key: string]: any };
        };
      };
    };
  };
  /** List the presets. */
  getPresets: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new preset. */
  createPreset: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** What collection this collection preset is used for. */
          collection: string;
          /** Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark. */
          title?: string;
          /** The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role. */
          role?: string;
          /** What the user searched for in search/filter in the header bar. */
          search?: string;
          filters?: {
            key?: string;
            field?: string;
            operator?: string;
            value?: number;
          }[];
          /** Name of the view type that is used. */
          layout?: string;
          /** Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
          layout_query?: string;
          /** Options of the views. The properties in here are controlled by the layout. */
          layout_options?: string;
        };
      };
    };
  };
  /** Retrieve a single preset by unique identifier. */
  getPreset: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Delete an existing preset. */
  deletePreset: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Update an existing preset. */
  updatePreset: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** What collection this collection preset is used for. */
          collection: string;
          /** Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark. */
          title?: string;
          /** The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role. */
          role?: number;
          /** What the user searched for in search/filter in the header bar. */
          search_query?: string;
          filters?: {
            field?: string;
            operator?: string;
            value?: number;
          }[];
          /** Name of the view type that is used. Defaults to tabular. */
          view_type?: string;
          /** View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
          view_query?: string;
          /** Options of the views. The properties in here are controlled by the layout. */
          view_options?: string;
          /** Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages. */
          translation?: { [key: string]: any };
        };
      };
    };
  };
  /** List the relations. */
  getRelations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new relation. */
  createRelation: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Collection that has the field that holds the foreign key. */
          collection_many?: string;
          /** Collection on the _one_ side of the relationship. */
          collection_one?: string;
          /** Foreign key. Field that holds the primary key of the related collection. */
          field_many?: string;
          /** Alias column that serves as the _one_ side of the relationship. */
          field_one?: string;
          /** Field on the junction table that holds the primary key of the related collection. */
          junction_field?: string;
        };
      };
    };
  };
  /** Retrieve a single relation by unique identifier. */
  getRelation: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing relation. */
  deleteRelation: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing relation */
  updateRelation: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Collection that has the field that holds the foreign key. */
          collection_many?: string;
          /** Collection on the _one_ side of the relationship. */
          collection_one?: string;
          /** Foreign key. Field that holds the primary key of the related collection. */
          field_many?: string;
          /** Alias column that serves as the _one_ side of the relationship. */
          field_one?: string;
          /** Field on the junction table that holds the primary key of the related collection. */
          junction_field?: string;
        };
      };
    };
  };
  /** List the revisions. */
  getRevisions: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Revisions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a single revision by unique identifier. */
  getRevision: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Revisions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List the roles. */
  getRoles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new role. */
  createRole: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Description of the role. */
          description?: string;
          /** Whether or not this role enforces the use of 2FA. */
          enforce_2fa?: boolean;
          /** ID used with external services in SCIM. */
          external_id?: string;
          /** Array of IP addresses that are allowed to connect to the API as a user of this role. */
          ip_whitelist?: string[];
          /** Custom override for the admin app module bar navigation. */
          module_listing?: string;
          /** Name of the role. */
          name?: string;
        };
      };
    };
  };
  /** Retrieve a single role by unique identifier. */
  getRole: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing role */
  deleteRole: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing role */
  updateRole: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Description of the role. */
          description?: string;
          /** Whether or not this role enforces the use of 2FA. */
          enforce_2fa?: boolean;
          /** ID used with external services in SCIM. */
          external_id?: string;
          /** Array of IP addresses that are allowed to connect to the API as a user of this role. */
          ip_whitelist?: string[];
          /** Custom override for the admin app module bar navigation. */
          module_listing?: string;
          /** Name of the role. */
          name?: string;
        };
      };
    };
  };
  /** List the settings. */
  getSettings: {
    parameters: {
      query: {
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Settings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update the settings */
  updateSetting: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Settings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": { [key: string]: any };
      };
    };
  };
  /** List the users. */
  getUsers: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new user. */
  createUser: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Users"];
      };
    };
  };
  /** Retrieve a single user by unique identifier. */
  getUser: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing user */
  deleteUser: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing user */
  updateUser: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Users"];
      };
    };
  };
  /** Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account. */
  invite: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Email address or array of email addresses of the to-be-invited user(s). */
          email?: string;
        };
      };
    };
  };
  /** Accepts and enables an invited user using a JWT invitation token. */
  acceptInvite: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Accept invite token. */
          token?: string;
          /** Password of the user. */
          password?: string;
        };
      };
    };
  };
  /** Retrieve the currently authenticated user. */
  getMe: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update the currently authenticated user. */
  updateMe: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used. */
  updateLastUsedPageMe: {
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Path of the page you used last. */
          last_page?: string;
        };
      };
    };
  };
  /** Enables two-factor authentication for the currently authenticated user. */
  meTfaEnable: {
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Disables two-factor authentication for the currently authenticated user. */
  meTfaDisable: {
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Get all webhooks. */
  getWebhooks: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new webhook. */
  createWebhook: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** The name of the webhook. */
          name?: string;
          /** Method used in the webhook. */
          method?: string;
          /** The url of the webhook. */
          url?: string;
          /** The status of the webhook. */
          status?: string;
          /** If yes, send the content of what was done */
          data?: boolean;
          /** The actions that triggers this webhook. */
          actions?: { [key: string]: any };
          /** The collections that triggers this webhook. */
          "system-collections"?: { [key: string]: any };
        };
      };
    };
  };
  /** Retrieve a single webhook by unique identifier. */
  getWebhook: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing webhook */
  deleteWebhook: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing webhook */
  updateWebhook: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** The name of the webhook. */
          name?: string;
          /** Method used in the webhook. */
          method?: string;
          /** The url of the webhook. */
          url?: string;
          /** The status of the webhook. */
          status?: string;
          /** If yes, send the content of what was done */
          data?: boolean;
          /** The actions that triggers this webhook. */
          actions?: { [key: string]: any };
          /** The collections that triggers this webhook. */
          "system-collections"?: { [key: string]: any };
        };
      };
    };
  };
}

export type BTVTypes = {
  ageratings: components["schemas"]["ItemsAgeratings"];
  ageratings_translations: components["schemas"]["ItemsAgeratingsTranslations"];
  assetfiles: components["schemas"]["ItemsAssetfiles"];
  asset_management: components["schemas"]["ItemsAssetManagement"];
  assets: components["schemas"]["ItemsAssets"];
  assetstreams: components["schemas"]["ItemsAssetstreams"];
  assetstreams_audio_languages: components["schemas"]["ItemsAssetstreamsAudioLanguages"];
  assetstreams_subtitle_languages: components["schemas"]["ItemsAssetstreamsSubtitleLanguages"];
  calendar: components["schemas"]["ItemsCalendar"];
  calendarevent: components["schemas"]["ItemsCalendarevent"];
  categories: components["schemas"]["ItemsCategories"];
  categories_translations: components["schemas"]["ItemsCategoriesTranslations"];
  collections: components["schemas"]["ItemsCollections"];
  collections_episodes: components["schemas"]["ItemsCollectionsEpisodes"];
  collections_relations: components["schemas"]["ItemsCollectionsRelations"];
  collections_seasons: components["schemas"]["ItemsCollectionsSeasons"];
  collections_shows: components["schemas"]["ItemsCollectionsShows"];
  collections_translations: components["schemas"]["ItemsCollectionsTranslations"];
  config: components["schemas"]["ItemsConfig"];
  episodes: components["schemas"]["ItemsEpisodes"];
  episodes_categories: components["schemas"]["ItemsEpisodesCategories"];
  episodes_tags: components["schemas"]["ItemsEpisodesTags"];
  episodes_translations: components["schemas"]["ItemsEpisodesTranslations"];
  episodes_usergroups: components["schemas"]["ItemsEpisodesUsergroups"];
  episodes_usergroups_download: components["schemas"]["ItemsEpisodesUsergroupsDownload"];
  episodes_usergroups_earlyaccess: components["schemas"]["ItemsEpisodesUsergroupsEarlyaccess"];
  languages: components["schemas"]["ItemsLanguages"];
  lists: components["schemas"]["ItemsLists"];
  lists_relations: components["schemas"]["ItemsListsRelations"];
  main_content: components["schemas"]["ItemsMainContent"];
  page_management: components["schemas"]["ItemsPageManagement"];
  pages: components["schemas"]["ItemsPages"];
  seasons: components["schemas"]["ItemsSeasons"];
  seasons_translations: components["schemas"]["ItemsSeasonsTranslations"];
  seasons_usergroups: components["schemas"]["ItemsSeasonsUsergroups"];
  sections: components["schemas"]["ItemsSections"];
  sections_translations: components["schemas"]["ItemsSectionsTranslations"];
  sections_usergroups: components["schemas"]["ItemsSectionsUsergroups"];
  shows: components["schemas"]["ItemsShows"];
  shows_translations: components["schemas"]["ItemsShowsTranslations"];
  shows_usergroups: components["schemas"]["ItemsShowsUsergroups"];
  tags: components["schemas"]["ItemsTags"];
  tvguideentry: components["schemas"]["ItemsTvguideentry"];
  tvguideentry_link: components["schemas"]["ItemsTvguideentryLink"];
  usergroups: components["schemas"]["ItemsUsergroups"];
};