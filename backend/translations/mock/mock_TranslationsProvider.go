// Code generated by mockery v2.51.0. DO NOT EDIT.

package Mocktranslations

import (
	context "context"

	common "github.com/bcc-code/bcc-media-platform/backend/common"

	mock "github.com/stretchr/testify/mock"

	translations "github.com/bcc-code/bcc-media-platform/backend/translations"
)

// MockTranslationsProvider is an autogenerated mock type for the TranslationsProvider type
type MockTranslationsProvider struct {
	mock.Mock
}

type MockTranslationsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTranslationsProvider) EXPECT() *MockTranslationsProvider_Expecter {
	return &MockTranslationsProvider_Expecter{mock: &_m.Mock}
}

// ProcessWebhook provides a mock function with given fields: ctx, url, hookData
func (_m *MockTranslationsProvider) ProcessWebhook(ctx context.Context, url string, hookData []byte) (*translations.TranslatableCollection, []common.TranslationData, error) {
	ret := _m.Called(ctx, url, hookData)

	if len(ret) == 0 {
		panic("no return value specified for ProcessWebhook")
	}

	var r0 *translations.TranslatableCollection
	var r1 []common.TranslationData
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (*translations.TranslatableCollection, []common.TranslationData, error)); ok {
		return rf(ctx, url, hookData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) *translations.TranslatableCollection); ok {
		r0 = rf(ctx, url, hookData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*translations.TranslatableCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) []common.TranslationData); ok {
		r1 = rf(ctx, url, hookData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]common.TranslationData)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, []byte) error); ok {
		r2 = rf(ctx, url, hookData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTranslationsProvider_ProcessWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessWebhook'
type MockTranslationsProvider_ProcessWebhook_Call struct {
	*mock.Call
}

// ProcessWebhook is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - hookData []byte
func (_e *MockTranslationsProvider_Expecter) ProcessWebhook(ctx interface{}, url interface{}, hookData interface{}) *MockTranslationsProvider_ProcessWebhook_Call {
	return &MockTranslationsProvider_ProcessWebhook_Call{Call: _e.mock.On("ProcessWebhook", ctx, url, hookData)}
}

func (_c *MockTranslationsProvider_ProcessWebhook_Call) Run(run func(ctx context.Context, url string, hookData []byte)) *MockTranslationsProvider_ProcessWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockTranslationsProvider_ProcessWebhook_Call) Return(collection *translations.TranslatableCollection, data []common.TranslationData, err error) *MockTranslationsProvider_ProcessWebhook_Call {
	_c.Call.Return(collection, data, err)
	return _c
}

func (_c *MockTranslationsProvider_ProcessWebhook_Call) RunAndReturn(run func(context.Context, string, []byte) (*translations.TranslatableCollection, []common.TranslationData, error)) *MockTranslationsProvider_ProcessWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// SendToTranslation provides a mock function with given fields: ctx, collection, data
func (_m *MockTranslationsProvider) SendToTranslation(ctx context.Context, collection string, data []common.TranslationData) error {
	ret := _m.Called(ctx, collection, data)

	if len(ret) == 0 {
		panic("no return value specified for SendToTranslation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []common.TranslationData) error); ok {
		r0 = rf(ctx, collection, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTranslationsProvider_SendToTranslation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendToTranslation'
type MockTranslationsProvider_SendToTranslation_Call struct {
	*mock.Call
}

// SendToTranslation is a helper method to define mock.On call
//   - ctx context.Context
//   - collection string
//   - data []common.TranslationData
func (_e *MockTranslationsProvider_Expecter) SendToTranslation(ctx interface{}, collection interface{}, data interface{}) *MockTranslationsProvider_SendToTranslation_Call {
	return &MockTranslationsProvider_SendToTranslation_Call{Call: _e.mock.On("SendToTranslation", ctx, collection, data)}
}

func (_c *MockTranslationsProvider_SendToTranslation_Call) Run(run func(ctx context.Context, collection string, data []common.TranslationData)) *MockTranslationsProvider_SendToTranslation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]common.TranslationData))
	})
	return _c
}

func (_c *MockTranslationsProvider_SendToTranslation_Call) Return(_a0 error) *MockTranslationsProvider_SendToTranslation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTranslationsProvider_SendToTranslation_Call) RunAndReturn(run func(context.Context, string, []common.TranslationData) error) *MockTranslationsProvider_SendToTranslation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTranslationsProvider creates a new instance of MockTranslationsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTranslationsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTranslationsProvider {
	mock := &MockTranslationsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
