package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/bcc-code/bcc-media-platform/backend/common"
	"github.com/bcc-code/bcc-media-platform/backend/graph/api/generated"
	"github.com/bcc-code/bcc-media-platform/backend/graph/api/model"
	"github.com/bcc-code/bcc-media-platform/backend/utils"
	"github.com/samber/lo"
)

// Person is the resolver for the person field.
func (r *contributionResolver) Person(ctx context.Context, obj *model.Contribution) (*model.Person, error) {
	panic(fmt.Errorf("not implemented: Person - person"))
}

// Image is the resolver for the image field.
func (r *personResolver) Image(ctx context.Context, obj *model.Person, style *model.ImageStyle) (*string, error) {
	e, err := r.Loaders.PersonLoader.Get(ctx, utils.AsUuid(obj.ID))
	if err != nil {
		return nil, err
	}
	return imageOrFallback(ctx, e.Images, style), nil
}

// ContributionTypes is the resolver for the contributionTypes field.
func (r *personResolver) ContributionTypes(ctx context.Context, obj *model.Person) ([]*model.ContributionTypeCount, error) {
	types, err := r.Loaders.PersonContributionTypesLoader.Get(ctx, utils.AsUuid(obj.ID))
	if err != nil {
		return nil, err
	}
	mapped := lo.Map(types, func(t *common.ContributionTypeCount, index int) *model.ContributionTypeCount {
		return &model.ContributionTypeCount{
			Type:  model.ContributionType(t.Type),
			Count: t.Count,
		}
	})

	return mapped, err
}

// Contributions is the resolver for the contributions field.
func (r *personResolver) Contributions(ctx context.Context, obj *model.Person, first *int, offset *int, typeArg *model.ContributionType) (*model.ContributionsPagination, error) {
	ids, err := r.Loaders.PersonContributionsLoader.Get(ctx, utils.AsUuid(obj.ID))
	if err != nil {
		return nil, err
	}

	commonItems, err := r.Loaders.ContributionsLoader.GetMany(ctx, utils.PointerArrayToArray(ids))
	if err != nil {
		return nil, err
	}

	filteredItems, err := FilteredContributions(ctx, commonItems, r.FilteredLoaders(ctx))
	if err != nil {
		return nil, err
	}

	page := utils.Paginate(filteredItems, first, offset, nil)
	if err != nil {
		return nil, err
	}

	var items []*model.Contribution
	for _, c := range page.Items {
		contribution, err := model.ContributionFrom(ctx, c, r.Loaders)
		if err != nil {
			return nil, err
		}
		if contribution == nil {
			continue
		}
		items = append(items, contribution)
	}

	return &model.ContributionsPagination{
		Offset: page.Offset,
		First:  page.First,
		Total:  page.Total,
		Items:  items,
	}, nil
}

// Contribution returns generated.ContributionResolver implementation.
func (r *Resolver) Contribution() generated.ContributionResolver { return &contributionResolver{r} }

// Person returns generated.PersonResolver implementation.
func (r *Resolver) Person() generated.PersonResolver { return &personResolver{r} }

type contributionResolver struct{ *Resolver }
type personResolver struct{ *Resolver }
