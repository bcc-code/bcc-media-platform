// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CalendarEntry interface {
	IsCalendarEntry()
	GetID() string
	GetEvent() *Event
	GetTitle() string
	GetDescription() string
	GetStart() string
	GetEnd() string
}

type CollectionItem interface {
	IsCollectionItem()
	GetID() string
	GetSort() int
	GetTitle() string
	GetImageURL() *string
	GetImages() []*Image
}

type EpisodeContextUnion interface {
	IsEpisodeContextUnion()
}

type GridSection interface {
	IsSection()
	IsItemSection()
	IsGridSection()
	GetID() string
	GetMetadata() *ItemSectionMetadata
	GetTitle() *string
	GetDescription() *string
	GetSize() GridSectionSize
	GetItems() *SectionItemPagination
}

type ItemSection interface {
	IsSection()
	IsItemSection()
	GetID() string
	GetMetadata() *ItemSectionMetadata
	GetTitle() *string
	GetDescription() *string
	GetItems() *SectionItemPagination
}

type Pagination interface {
	IsPagination()
	GetTotal() int
	GetFirst() int
	GetOffset() int
}

type Prompt interface {
	IsPrompt()
	GetID() string
	GetTitle() string
	GetFrom() string
	GetTo() string
}

type SearchResultItem interface {
	IsSearchResultItem()
	GetID() string
	GetLegacyID() *string
	GetCollection() string
	GetTitle() string
	GetHeader() *string
	GetDescription() *string
	GetHighlight() *string
	GetImage() *string
	GetURL() string
}

type Section interface {
	IsSection()
	GetID() string
	GetTitle() *string
	GetDescription() *string
}

type SectionItemType interface {
	IsSectionItemType()
}

type SurveyQuestion interface {
	IsSurveyQuestion()
	GetID() string
	GetTitle() string
	GetDescription() *string
}

type Task interface {
	IsTask()
	GetID() string
	GetTitle() string
	GetCompleted() bool
}

type UserCollectionEntryItem interface {
	IsUserCollectionEntryItem()
}

type Achievement struct {
	ID          string            `json:"id"`
	Title       string            `json:"title"`
	Description *string           `json:"description,omitempty"`
	Image       *string           `json:"image,omitempty"`
	Achieved    bool              `json:"achieved"`
	AchievedAt  *string           `json:"achievedAt,omitempty"`
	Group       *AchievementGroup `json:"group,omitempty"`
}

type AchievementGroup struct {
	ID           string                 `json:"id"`
	Title        string                 `json:"title"`
	Achievements *AchievementPagination `json:"achievements"`
}

type AchievementGroupPagination struct {
	Offset int                 `json:"offset"`
	First  int                 `json:"first"`
	Total  int                 `json:"total"`
	Items  []*AchievementGroup `json:"items"`
}

func (AchievementGroupPagination) IsPagination()       {}
func (this AchievementGroupPagination) GetTotal() int  { return this.Total }
func (this AchievementGroupPagination) GetFirst() int  { return this.First }
func (this AchievementGroupPagination) GetOffset() int { return this.Offset }

type AchievementPagination struct {
	Offset int            `json:"offset"`
	First  int            `json:"first"`
	Total  int            `json:"total"`
	Items  []*Achievement `json:"items"`
}

func (AchievementPagination) IsPagination()       {}
func (this AchievementPagination) GetTotal() int  { return this.Total }
func (this AchievementPagination) GetFirst() int  { return this.First }
func (this AchievementPagination) GetOffset() int { return this.Offset }

type AchievementSection struct {
	ID          string  `json:"id"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
}

func (AchievementSection) IsSection()                   {}
func (this AchievementSection) GetID() string           { return this.ID }
func (this AchievementSection) GetTitle() *string       { return this.Title }
func (this AchievementSection) GetDescription() *string { return this.Description }

type AddToCollectionResult struct {
	EntryID    string          `json:"entryId"`
	Collection *UserCollection `json:"collection"`
}

type Alternative struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	IsCorrect *bool  `json:"isCorrect,omitempty"`
	Selected  bool   `json:"selected"`
}

type AlternativesTask struct {
	ID              string         `json:"id"`
	Title           string         `json:"title"`
	Completed       bool           `json:"completed"`
	Alternatives    []*Alternative `json:"alternatives"`
	CompetitionMode bool           `json:"competitionMode"`
	Locked          bool           `json:"locked"`
}

func (AlternativesTask) IsTask()                 {}
func (this AlternativesTask) GetID() string      { return this.ID }
func (this AlternativesTask) GetTitle() string   { return this.Title }
func (this AlternativesTask) GetCompleted() bool { return this.Completed }

type Analytics struct {
	AnonymousID string `json:"anonymousId"`
}

type AnswerSurveyQuestionResult struct {
	ID string `json:"id"`
}

type Application struct {
	ID            string `json:"id"`
	Code          string `json:"code"`
	ClientVersion string `json:"clientVersion"`
	Page          *Page  `json:"page,omitempty"`
	SearchPage    *Page  `json:"searchPage,omitempty"`
	GamesPage     *Page  `json:"gamesPage,omitempty"`
}

type BirthOptions struct {
	Year int `json:"year"`
}

type Calendar struct {
	Period *CalendarPeriod `json:"period"`
	Day    *CalendarDay    `json:"day"`
}

type CalendarDay struct {
	Events  []*Event        `json:"events"`
	Entries []CalendarEntry `json:"entries"`
}

type CalendarPeriod struct {
	ActiveDays []string `json:"activeDays"`
	Events     []*Event `json:"events"`
}

type CardListSection struct {
	ID          string                 `json:"id"`
	Metadata    *ItemSectionMetadata   `json:"metadata,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Description *string                `json:"description,omitempty"`
	Size        CardSectionSize        `json:"size"`
	Items       *SectionItemPagination `json:"items"`
}

func (CardListSection) IsSection()                   {}
func (this CardListSection) GetID() string           { return this.ID }
func (this CardListSection) GetTitle() *string       { return this.Title }
func (this CardListSection) GetDescription() *string { return this.Description }

func (CardListSection) IsItemSection() {}

func (this CardListSection) GetMetadata() *ItemSectionMetadata { return this.Metadata }

func (this CardListSection) GetItems() *SectionItemPagination { return this.Items }

type CardSection struct {
	ID          string                 `json:"id"`
	Metadata    *ItemSectionMetadata   `json:"metadata,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Description *string                `json:"description,omitempty"`
	Size        CardSectionSize        `json:"size"`
	Items       *SectionItemPagination `json:"items"`
}

func (CardSection) IsSection()                   {}
func (this CardSection) GetID() string           { return this.ID }
func (this CardSection) GetTitle() *string       { return this.Title }
func (this CardSection) GetDescription() *string { return this.Description }

func (CardSection) IsItemSection() {}

func (this CardSection) GetMetadata() *ItemSectionMetadata { return this.Metadata }

func (this CardSection) GetItems() *SectionItemPagination { return this.Items }

type Chapter struct {
	ID    string `json:"id"`
	Start int    `json:"start"`
	Title string `json:"title"`
}

type Collection struct {
	ID    string                    `json:"id"`
	Slug  *string                   `json:"slug,omitempty"`
	Items *CollectionItemPagination `json:"items,omitempty"`
}

type CollectionItemPagination struct {
	Total  int              `json:"total"`
	First  int              `json:"first"`
	Offset int              `json:"offset"`
	Items  []CollectionItem `json:"items"`
}

func (CollectionItemPagination) IsPagination()       {}
func (this CollectionItemPagination) GetTotal() int  { return this.Total }
func (this CollectionItemPagination) GetFirst() int  { return this.First }
func (this CollectionItemPagination) GetOffset() int { return this.Offset }

type Config struct {
	Global *GlobalConfig `json:"global"`
}

type ConfirmAchievementResult struct {
	Success bool `json:"success"`
}

type ContextCollection struct {
	ID    string                 `json:"id"`
	Slug  *string                `json:"slug,omitempty"`
	Items *SectionItemPagination `json:"items,omitempty"`
}

func (ContextCollection) IsEpisodeContextUnion() {}

type DefaultGridSection struct {
	ID          string                 `json:"id"`
	Metadata    *ItemSectionMetadata   `json:"metadata,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Description *string                `json:"description,omitempty"`
	Size        GridSectionSize        `json:"size"`
	Items       *SectionItemPagination `json:"items"`
}

func (DefaultGridSection) IsSection()                   {}
func (this DefaultGridSection) GetID() string           { return this.ID }
func (this DefaultGridSection) GetTitle() *string       { return this.Title }
func (this DefaultGridSection) GetDescription() *string { return this.Description }

func (DefaultGridSection) IsItemSection() {}

func (this DefaultGridSection) GetMetadata() *ItemSectionMetadata { return this.Metadata }

func (this DefaultGridSection) GetItems() *SectionItemPagination { return this.Items }

func (DefaultGridSection) IsGridSection() {}

func (this DefaultGridSection) GetSize() GridSectionSize { return this.Size }

type DefaultSection struct {
	ID          string                 `json:"id"`
	Metadata    *ItemSectionMetadata   `json:"metadata,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Description *string                `json:"description,omitempty"`
	Size        SectionSize            `json:"size"`
	Items       *SectionItemPagination `json:"items"`
}

func (DefaultSection) IsSection()                   {}
func (this DefaultSection) GetID() string           { return this.ID }
func (this DefaultSection) GetTitle() *string       { return this.Title }
func (this DefaultSection) GetDescription() *string { return this.Description }

func (DefaultSection) IsItemSection() {}

func (this DefaultSection) GetMetadata() *ItemSectionMetadata { return this.Metadata }

func (this DefaultSection) GetItems() *SectionItemPagination { return this.Items }

type Device struct {
	Token     string `json:"token"`
	UpdatedAt string `json:"updatedAt"`
}

type Episode struct {
	ID                    string                 `json:"id"`
	UUID                  string                 `json:"uuid"`
	Status                Status                 `json:"status"`
	Type                  EpisodeType            `json:"type"`
	LegacyID              *string                `json:"legacyID,omitempty"`
	LegacyProgramID       *string                `json:"legacyProgramID,omitempty"`
	Locked                bool                   `json:"locked"`
	PublishDate           string                 `json:"publishDate"`
	ProductionDate        string                 `json:"productionDate"`
	ProductionDateInTitle bool                   `json:"productionDateInTitle"`
	AvailableFrom         string                 `json:"availableFrom"`
	AvailableTo           string                 `json:"availableTo"`
	AgeRating             string                 `json:"ageRating"`
	Title                 string                 `json:"title"`
	Description           string                 `json:"description"`
	ExtraDescription      string                 `json:"extraDescription"`
	Image                 *string                `json:"image,omitempty"`
	ImageURL              *string                `json:"imageUrl,omitempty"`
	Streams               []*Stream              `json:"streams"`
	Files                 []*File                `json:"files"`
	Chapters              []*Chapter             `json:"chapters"`
	Season                *Season                `json:"season,omitempty"`
	Duration              int                    `json:"duration"`
	Progress              *int                   `json:"progress,omitempty"`
	Watched               bool                   `json:"watched"`
	AudioLanguages        []string               `json:"audioLanguages"`
	SubtitleLanguages     []string               `json:"subtitleLanguages"`
	Context               EpisodeContextUnion    `json:"context,omitempty"`
	RelatedItems          *SectionItemPagination `json:"relatedItems,omitempty"`
	Images                []*Image               `json:"images"`
	Number                *int                   `json:"number,omitempty"`
	Lessons               *LessonPagination      `json:"lessons"`
	ShareRestriction      ShareRestriction       `json:"shareRestriction"`
	InMyList              bool                   `json:"inMyList"`
	// Should probably be used asynchronously, and retrieved separately from the episode, as it can be slow in some cases (a few db requests can occur)
	Next []*Episode `json:"next"`
}

func (Episode) IsSectionItemType() {}

func (Episode) IsUserCollectionEntryItem() {}

type EpisodeCalendarEntry struct {
	ID          string   `json:"id"`
	Event       *Event   `json:"event,omitempty"`
	Title       string   `json:"title"`
	Description string   `json:"description"`
	Start       string   `json:"start"`
	End         string   `json:"end"`
	IsReplay    bool     `json:"isReplay"`
	Episode     *Episode `json:"episode,omitempty"`
}

func (EpisodeCalendarEntry) IsCalendarEntry()            {}
func (this EpisodeCalendarEntry) GetID() string          { return this.ID }
func (this EpisodeCalendarEntry) GetEvent() *Event       { return this.Event }
func (this EpisodeCalendarEntry) GetTitle() string       { return this.Title }
func (this EpisodeCalendarEntry) GetDescription() string { return this.Description }
func (this EpisodeCalendarEntry) GetStart() string       { return this.Start }
func (this EpisodeCalendarEntry) GetEnd() string         { return this.End }

type EpisodeContext struct {
	CollectionID *string `json:"collectionId,omitempty"`
}

type EpisodeItem struct {
	ID       string   `json:"id"`
	Sort     int      `json:"sort"`
	Title    string   `json:"title"`
	ImageURL *string  `json:"imageUrl,omitempty"`
	Images   []*Image `json:"images"`
	Episode  *Episode `json:"episode"`
}

func (EpisodeItem) IsCollectionItem()         {}
func (this EpisodeItem) GetID() string        { return this.ID }
func (this EpisodeItem) GetSort() int         { return this.Sort }
func (this EpisodeItem) GetTitle() string     { return this.Title }
func (this EpisodeItem) GetImageURL() *string { return this.ImageURL }
func (this EpisodeItem) GetImages() []*Image {
	if this.Images == nil {
		return nil
	}
	interfaceSlice := make([]*Image, 0, len(this.Images))
	for _, concrete := range this.Images {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type EpisodePagination struct {
	Total  int        `json:"total"`
	First  int        `json:"first"`
	Offset int        `json:"offset"`
	Items  []*Episode `json:"items"`
}

func (EpisodePagination) IsPagination()       {}
func (this EpisodePagination) GetTotal() int  { return this.Total }
func (this EpisodePagination) GetFirst() int  { return this.First }
func (this EpisodePagination) GetOffset() int { return this.Offset }

type EpisodeSearchItem struct {
	ID              string  `json:"id"`
	LegacyID        *string `json:"legacyID,omitempty"`
	LegacyProgramID *string `json:"legacyProgramID,omitempty"`
	Duration        int     `json:"duration"`
	AgeRating       string  `json:"ageRating"`
	Collection      string  `json:"collection"`
	Title           string  `json:"title"`
	Header          *string `json:"header,omitempty"`
	Description     *string `json:"description,omitempty"`
	Highlight       *string `json:"highlight,omitempty"`
	Image           *string `json:"image,omitempty"`
	URL             string  `json:"url"`
	ShowID          *string `json:"showId,omitempty"`
	ShowTitle       *string `json:"showTitle,omitempty"`
	Show            *Show   `json:"show,omitempty"`
	SeasonID        *string `json:"seasonId,omitempty"`
	SeasonTitle     *string `json:"seasonTitle,omitempty"`
	Season          *Season `json:"season,omitempty"`
}

func (EpisodeSearchItem) IsSearchResultItem()          {}
func (this EpisodeSearchItem) GetID() string           { return this.ID }
func (this EpisodeSearchItem) GetLegacyID() *string    { return this.LegacyID }
func (this EpisodeSearchItem) GetCollection() string   { return this.Collection }
func (this EpisodeSearchItem) GetTitle() string        { return this.Title }
func (this EpisodeSearchItem) GetHeader() *string      { return this.Header }
func (this EpisodeSearchItem) GetDescription() *string { return this.Description }
func (this EpisodeSearchItem) GetHighlight() *string   { return this.Highlight }
func (this EpisodeSearchItem) GetImage() *string       { return this.Image }
func (this EpisodeSearchItem) GetURL() string          { return this.URL }

type Event struct {
	ID    string `json:"id"`
	Title string `json:"title"`
	Start string `json:"start"`
	End   string `json:"end"`
	Image string `json:"image"`
}

type Export struct {
	DbVersion string `json:"dbVersion"`
	URL       string `json:"url"`
}

type Faq struct {
	Categories *FAQCategoryPagination `json:"categories,omitempty"`
	Category   *FAQCategory           `json:"category"`
	Question   *Question              `json:"question"`
}

type FAQCategory struct {
	ID        string              `json:"id"`
	Title     string              `json:"title"`
	Questions *QuestionPagination `json:"questions,omitempty"`
}

type FAQCategoryPagination struct {
	Total  int            `json:"total"`
	First  int            `json:"first"`
	Offset int            `json:"offset"`
	Items  []*FAQCategory `json:"items"`
}

func (FAQCategoryPagination) IsPagination()       {}
func (this FAQCategoryPagination) GetTotal() int  { return this.Total }
func (this FAQCategoryPagination) GetFirst() int  { return this.First }
func (this FAQCategoryPagination) GetOffset() int { return this.Offset }

type FeaturedSection struct {
	ID          string                 `json:"id"`
	Metadata    *ItemSectionMetadata   `json:"metadata,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Description *string                `json:"description,omitempty"`
	Size        SectionSize            `json:"size"`
	Items       *SectionItemPagination `json:"items"`
}

func (FeaturedSection) IsSection()                   {}
func (this FeaturedSection) GetID() string           { return this.ID }
func (this FeaturedSection) GetTitle() *string       { return this.Title }
func (this FeaturedSection) GetDescription() *string { return this.Description }

func (FeaturedSection) IsItemSection() {}

func (this FeaturedSection) GetMetadata() *ItemSectionMetadata { return this.Metadata }

func (this FeaturedSection) GetItems() *SectionItemPagination { return this.Items }

type File struct {
	ID               string  `json:"id"`
	URL              string  `json:"url"`
	AudioLanguage    string  `json:"audioLanguage"`
	SubtitleLanguage *string `json:"subtitleLanguage,omitempty"`
	Size             int     `json:"size"`
	FileName         string  `json:"fileName"`
	MimeType         string  `json:"mimeType"`
	Resolution       *string `json:"resolution,omitempty"`
}

type Game struct {
	ID          string  `json:"id"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	URL         string  `json:"url"`
	Image       *string `json:"image,omitempty"`
}

func (Game) IsSectionItemType() {}

type GlobalConfig struct {
	LiveOnline  bool `json:"liveOnline"`
	NpawEnabled bool `json:"npawEnabled"`
}

type IconGridSection struct {
	ID          string                 `json:"id"`
	Metadata    *ItemSectionMetadata   `json:"metadata,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Description *string                `json:"description,omitempty"`
	Size        GridSectionSize        `json:"size"`
	Items       *SectionItemPagination `json:"items"`
}

func (IconGridSection) IsSection()                   {}
func (this IconGridSection) GetID() string           { return this.ID }
func (this IconGridSection) GetTitle() *string       { return this.Title }
func (this IconGridSection) GetDescription() *string { return this.Description }

func (IconGridSection) IsItemSection() {}

func (this IconGridSection) GetMetadata() *ItemSectionMetadata { return this.Metadata }

func (this IconGridSection) GetItems() *SectionItemPagination { return this.Items }

func (IconGridSection) IsGridSection() {}

func (this IconGridSection) GetSize() GridSectionSize { return this.Size }

type IconSection struct {
	ID          string                 `json:"id"`
	Metadata    *ItemSectionMetadata   `json:"metadata,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Description *string                `json:"description,omitempty"`
	Items       *SectionItemPagination `json:"items"`
}

func (IconSection) IsSection()                   {}
func (this IconSection) GetID() string           { return this.ID }
func (this IconSection) GetTitle() *string       { return this.Title }
func (this IconSection) GetDescription() *string { return this.Description }

func (IconSection) IsItemSection() {}

func (this IconSection) GetMetadata() *ItemSectionMetadata { return this.Metadata }

func (this IconSection) GetItems() *SectionItemPagination { return this.Items }

type Image struct {
	Style string `json:"style"`
	URL   string `json:"url"`
}

type ItemSectionMetadata struct {
	ContinueWatching   bool   `json:"continueWatching"`
	MyList             bool   `json:"myList"`
	SecondaryTitles    bool   `json:"secondaryTitles"`
	CollectionID       string `json:"collectionId"`
	UseContext         bool   `json:"useContext"`
	PrependLiveElement bool   `json:"prependLiveElement"`
}

type LabelSection struct {
	ID          string                 `json:"id"`
	Metadata    *ItemSectionMetadata   `json:"metadata,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Description *string                `json:"description,omitempty"`
	Items       *SectionItemPagination `json:"items"`
}

func (LabelSection) IsSection()                   {}
func (this LabelSection) GetID() string           { return this.ID }
func (this LabelSection) GetTitle() *string       { return this.Title }
func (this LabelSection) GetDescription() *string { return this.Description }

func (LabelSection) IsItemSection() {}

func (this LabelSection) GetMetadata() *ItemSectionMetadata { return this.Metadata }

func (this LabelSection) GetItems() *SectionItemPagination { return this.Items }

type LegacyIDLookup struct {
	ID string `json:"id"`
}

type LegacyIDLookupOptions struct {
	EpisodeID *int `json:"episodeID,omitempty"`
	ProgramID *int `json:"programID,omitempty"`
}

type Lesson struct {
	ID          string          `json:"id"`
	Title       string          `json:"title"`
	Description string          `json:"description"`
	Image       *string         `json:"image,omitempty"`
	Tasks       *TaskPagination `json:"tasks"`
	Topic       *StudyTopic     `json:"topic"`
	// The default episode.
	// Should not be used actively in lists, as it could affect query speeds.
	DefaultEpisode *Episode           `json:"defaultEpisode,omitempty"`
	Episodes       *EpisodePagination `json:"episodes"`
	Links          *LinkPagination    `json:"links"`
	Progress       *TasksProgress     `json:"progress"`
	Completed      bool               `json:"completed"`
	Locked         bool               `json:"locked"`
	Previous       *Lesson            `json:"previous,omitempty"`
	Next           *Lesson            `json:"next,omitempty"`
}

type LessonPagination struct {
	Offset int       `json:"offset"`
	First  int       `json:"first"`
	Total  int       `json:"total"`
	Items  []*Lesson `json:"items"`
}

func (LessonPagination) IsPagination()       {}
func (this LessonPagination) GetTotal() int  { return this.Total }
func (this LessonPagination) GetFirst() int  { return this.First }
func (this LessonPagination) GetOffset() int { return this.Offset }

type LessonsProgress struct {
	Total     int `json:"total"`
	Completed int `json:"completed"`
}

type Link struct {
	ID          string   `json:"id"`
	URL         string   `json:"url"`
	Title       string   `json:"title"`
	Description *string  `json:"description,omitempty"`
	Type        LinkType `json:"type"`
	Image       *string  `json:"image,omitempty"`
}

func (Link) IsSectionItemType() {}

type LinkPagination struct {
	Total  int     `json:"total"`
	First  int     `json:"first"`
	Offset int     `json:"offset"`
	Items  []*Link `json:"items"`
}

func (LinkPagination) IsPagination()       {}
func (this LinkPagination) GetTotal() int  { return this.Total }
func (this LinkPagination) GetFirst() int  { return this.First }
func (this LinkPagination) GetOffset() int { return this.Offset }

type LinkTask struct {
	ID             string  `json:"id"`
	Title          string  `json:"title"`
	Completed      bool    `json:"completed"`
	Link           *Link   `json:"link"`
	SecondaryTitle *string `json:"secondaryTitle,omitempty"`
	Description    *string `json:"description,omitempty"`
}

func (LinkTask) IsTask()                 {}
func (this LinkTask) GetID() string      { return this.ID }
func (this LinkTask) GetTitle() string   { return this.Title }
func (this LinkTask) GetCompleted() bool { return this.Completed }

type ListSection struct {
	ID          string                 `json:"id"`
	Metadata    *ItemSectionMetadata   `json:"metadata,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Description *string                `json:"description,omitempty"`
	Size        SectionSize            `json:"size"`
	Items       *SectionItemPagination `json:"items"`
}

func (ListSection) IsSection()                   {}
func (this ListSection) GetID() string           { return this.ID }
func (this ListSection) GetTitle() *string       { return this.Title }
func (this ListSection) GetDescription() *string { return this.Description }

func (ListSection) IsItemSection() {}

func (this ListSection) GetMetadata() *ItemSectionMetadata { return this.Metadata }

func (this ListSection) GetItems() *SectionItemPagination { return this.Items }

type Message struct {
	Title   string        `json:"title"`
	Content string        `json:"content"`
	Style   *MessageStyle `json:"style"`
}

type MessageSection struct {
	ID          string               `json:"id"`
	Metadata    *ItemSectionMetadata `json:"metadata,omitempty"`
	Title       *string              `json:"title,omitempty"`
	Description *string              `json:"description,omitempty"`
	Messages    []*Message           `json:"messages,omitempty"`
}

func (MessageSection) IsSection()                   {}
func (this MessageSection) GetID() string           { return this.ID }
func (this MessageSection) GetTitle() *string       { return this.Title }
func (this MessageSection) GetDescription() *string { return this.Description }

type MessageStyle struct {
	Text       string `json:"text"`
	Background string `json:"background"`
	Border     string `json:"border"`
}

type NameOptions struct {
	First string `json:"first"`
	Last  string `json:"last"`
}

type Page struct {
	ID          string             `json:"id"`
	Code        string             `json:"code"`
	Title       string             `json:"title"`
	Description *string            `json:"description,omitempty"`
	Image       *string            `json:"image,omitempty"`
	Images      []*Image           `json:"images"`
	Sections    *SectionPagination `json:"sections"`
}

func (Page) IsSectionItemType() {}

type PageDetailsSection struct {
	ID          string  `json:"id"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
}

func (PageDetailsSection) IsSection()                   {}
func (this PageDetailsSection) GetID() string           { return this.ID }
func (this PageDetailsSection) GetTitle() *string       { return this.Title }
func (this PageDetailsSection) GetDescription() *string { return this.Description }

type PageItem struct {
	ID       string   `json:"id"`
	Sort     int      `json:"sort"`
	Title    string   `json:"title"`
	ImageURL *string  `json:"imageUrl,omitempty"`
	Images   []*Image `json:"images"`
	Page     *Page    `json:"page"`
}

func (PageItem) IsCollectionItem()         {}
func (this PageItem) GetID() string        { return this.ID }
func (this PageItem) GetSort() int         { return this.Sort }
func (this PageItem) GetTitle() string     { return this.Title }
func (this PageItem) GetImageURL() *string { return this.ImageURL }
func (this PageItem) GetImages() []*Image {
	if this.Images == nil {
		return nil
	}
	interfaceSlice := make([]*Image, 0, len(this.Images))
	for _, concrete := range this.Images {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type PosterGridSection struct {
	ID          string                 `json:"id"`
	Metadata    *ItemSectionMetadata   `json:"metadata,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Description *string                `json:"description,omitempty"`
	Size        GridSectionSize        `json:"size"`
	Items       *SectionItemPagination `json:"items"`
}

func (PosterGridSection) IsSection()                   {}
func (this PosterGridSection) GetID() string           { return this.ID }
func (this PosterGridSection) GetTitle() *string       { return this.Title }
func (this PosterGridSection) GetDescription() *string { return this.Description }

func (PosterGridSection) IsItemSection() {}

func (this PosterGridSection) GetMetadata() *ItemSectionMetadata { return this.Metadata }

func (this PosterGridSection) GetItems() *SectionItemPagination { return this.Items }

func (PosterGridSection) IsGridSection() {}

func (this PosterGridSection) GetSize() GridSectionSize { return this.Size }

type PosterSection struct {
	ID          string                 `json:"id"`
	Metadata    *ItemSectionMetadata   `json:"metadata,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Description *string                `json:"description,omitempty"`
	Size        SectionSize            `json:"size"`
	Items       *SectionItemPagination `json:"items"`
}

func (PosterSection) IsSection()                   {}
func (this PosterSection) GetID() string           { return this.ID }
func (this PosterSection) GetTitle() *string       { return this.Title }
func (this PosterSection) GetDescription() *string { return this.Description }

func (PosterSection) IsItemSection() {}

func (this PosterSection) GetMetadata() *ItemSectionMetadata { return this.Metadata }

func (this PosterSection) GetItems() *SectionItemPagination { return this.Items }

type PosterTask struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Completed bool   `json:"completed"`
	Image     string `json:"image"`
}

func (PosterTask) IsTask()                 {}
func (this PosterTask) GetID() string      { return this.ID }
func (this PosterTask) GetTitle() string   { return this.Title }
func (this PosterTask) GetCompleted() bool { return this.Completed }

type Profile struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Question struct {
	ID       string       `json:"id"`
	Category *FAQCategory `json:"category"`
	Question string       `json:"question"`
	Answer   string       `json:"answer"`
}

type QuestionPagination struct {
	Total  int         `json:"total"`
	First  int         `json:"first"`
	Offset int         `json:"offset"`
	Items  []*Question `json:"items"`
}

func (QuestionPagination) IsPagination()       {}
func (this QuestionPagination) GetTotal() int  { return this.Total }
func (this QuestionPagination) GetFirst() int  { return this.First }
func (this QuestionPagination) GetOffset() int { return this.Offset }

type QuoteTask struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Completed bool   `json:"completed"`
	Image     string `json:"image"`
}

func (QuoteTask) IsTask()                 {}
func (this QuoteTask) GetID() string      { return this.ID }
func (this QuoteTask) GetTitle() string   { return this.Title }
func (this QuoteTask) GetCompleted() bool { return this.Completed }

type RedirectLink struct {
	URL string `json:"url"`
}

type RedirectParam struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type SearchResult struct {
	Hits   int                `json:"hits"`
	Page   int                `json:"page"`
	Result []SearchResultItem `json:"result"`
}

type Season struct {
	ID          string   `json:"id"`
	LegacyID    *string  `json:"legacyID,omitempty"`
	Status      Status   `json:"status"`
	AgeRating   string   `json:"ageRating"`
	Title       string   `json:"title"`
	Description string   `json:"description"`
	Image       *string  `json:"image,omitempty"`
	ImageURL    *string  `json:"imageUrl,omitempty"`
	Images      []*Image `json:"images"`
	Number      int      `json:"number"`
	Show        *Show    `json:"show"`
	// The default episode.
	// Should not be used actively in lists, as it could affect query speeds.
	DefaultEpisode *Episode           `json:"defaultEpisode"`
	Episodes       *EpisodePagination `json:"episodes"`
}

func (Season) IsEpisodeContextUnion() {}

func (Season) IsSectionItemType() {}

type SeasonCalendarEntry struct {
	ID          string  `json:"id"`
	Event       *Event  `json:"event,omitempty"`
	Title       string  `json:"title"`
	Description string  `json:"description"`
	Start       string  `json:"start"`
	End         string  `json:"end"`
	Season      *Season `json:"season,omitempty"`
}

func (SeasonCalendarEntry) IsCalendarEntry()            {}
func (this SeasonCalendarEntry) GetID() string          { return this.ID }
func (this SeasonCalendarEntry) GetEvent() *Event       { return this.Event }
func (this SeasonCalendarEntry) GetTitle() string       { return this.Title }
func (this SeasonCalendarEntry) GetDescription() string { return this.Description }
func (this SeasonCalendarEntry) GetStart() string       { return this.Start }
func (this SeasonCalendarEntry) GetEnd() string         { return this.End }

type SeasonItem struct {
	ID       string   `json:"id"`
	Sort     int      `json:"sort"`
	Title    string   `json:"title"`
	ImageURL *string  `json:"imageUrl,omitempty"`
	Images   []*Image `json:"images"`
	Season   *Season  `json:"season"`
}

func (SeasonItem) IsCollectionItem()         {}
func (this SeasonItem) GetID() string        { return this.ID }
func (this SeasonItem) GetSort() int         { return this.Sort }
func (this SeasonItem) GetTitle() string     { return this.Title }
func (this SeasonItem) GetImageURL() *string { return this.ImageURL }
func (this SeasonItem) GetImages() []*Image {
	if this.Images == nil {
		return nil
	}
	interfaceSlice := make([]*Image, 0, len(this.Images))
	for _, concrete := range this.Images {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type SeasonPagination struct {
	Total  int       `json:"total"`
	First  int       `json:"first"`
	Offset int       `json:"offset"`
	Items  []*Season `json:"items"`
}

func (SeasonPagination) IsPagination()       {}
func (this SeasonPagination) GetTotal() int  { return this.Total }
func (this SeasonPagination) GetFirst() int  { return this.First }
func (this SeasonPagination) GetOffset() int { return this.Offset }

type SeasonSearchItem struct {
	ID          string  `json:"id"`
	LegacyID    *string `json:"legacyID,omitempty"`
	AgeRating   string  `json:"ageRating"`
	Collection  string  `json:"collection"`
	Title       string  `json:"title"`
	Header      *string `json:"header,omitempty"`
	Description *string `json:"description,omitempty"`
	Highlight   *string `json:"highlight,omitempty"`
	Image       *string `json:"image,omitempty"`
	URL         string  `json:"url"`
	ShowID      string  `json:"showId"`
	ShowTitle   string  `json:"showTitle"`
	Show        *Show   `json:"show"`
}

func (SeasonSearchItem) IsSearchResultItem()          {}
func (this SeasonSearchItem) GetID() string           { return this.ID }
func (this SeasonSearchItem) GetLegacyID() *string    { return this.LegacyID }
func (this SeasonSearchItem) GetCollection() string   { return this.Collection }
func (this SeasonSearchItem) GetTitle() string        { return this.Title }
func (this SeasonSearchItem) GetHeader() *string      { return this.Header }
func (this SeasonSearchItem) GetDescription() *string { return this.Description }
func (this SeasonSearchItem) GetHighlight() *string   { return this.Highlight }
func (this SeasonSearchItem) GetImage() *string       { return this.Image }
func (this SeasonSearchItem) GetURL() string          { return this.URL }

type SectionItem struct {
	ID          string          `json:"id"`
	Sort        int             `json:"sort"`
	Title       string          `json:"title"`
	Description string          `json:"description"`
	Image       *string         `json:"image,omitempty"`
	Item        SectionItemType `json:"item"`
}

type SectionItemPagination struct {
	First  int            `json:"first"`
	Offset int            `json:"offset"`
	Total  int            `json:"total"`
	Items  []*SectionItem `json:"items"`
}

func (SectionItemPagination) IsPagination()       {}
func (this SectionItemPagination) GetTotal() int  { return this.Total }
func (this SectionItemPagination) GetFirst() int  { return this.First }
func (this SectionItemPagination) GetOffset() int { return this.Offset }

type SectionPagination struct {
	Total  int       `json:"total"`
	First  int       `json:"first"`
	Offset int       `json:"offset"`
	Items  []Section `json:"items"`
}

func (SectionPagination) IsPagination()       {}
func (this SectionPagination) GetTotal() int  { return this.Total }
func (this SectionPagination) GetFirst() int  { return this.First }
func (this SectionPagination) GetOffset() int { return this.Offset }

type Settings struct {
	AudioLanguages    []string `json:"audioLanguages"`
	SubtitleLanguages []string `json:"subtitleLanguages"`
}

type Show struct {
	ID           string            `json:"id"`
	LegacyID     *string           `json:"legacyID,omitempty"`
	Status       Status            `json:"status"`
	Type         ShowType          `json:"type"`
	Title        string            `json:"title"`
	Description  string            `json:"description"`
	Image        *string           `json:"image,omitempty"`
	ImageURL     *string           `json:"imageUrl,omitempty"`
	Images       []*Image          `json:"images"`
	EpisodeCount int               `json:"episodeCount"`
	SeasonCount  int               `json:"seasonCount"`
	Seasons      *SeasonPagination `json:"seasons"`
	// The default episode.
	// Should not be used actively in lists, as it could affect query speeds.
	DefaultEpisode *Episode `json:"defaultEpisode"`
}

func (Show) IsSectionItemType() {}

func (Show) IsUserCollectionEntryItem() {}

type ShowCalendarEntry struct {
	ID          string `json:"id"`
	Event       *Event `json:"event,omitempty"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Start       string `json:"start"`
	End         string `json:"end"`
	Show        *Show  `json:"show,omitempty"`
}

func (ShowCalendarEntry) IsCalendarEntry()            {}
func (this ShowCalendarEntry) GetID() string          { return this.ID }
func (this ShowCalendarEntry) GetEvent() *Event       { return this.Event }
func (this ShowCalendarEntry) GetTitle() string       { return this.Title }
func (this ShowCalendarEntry) GetDescription() string { return this.Description }
func (this ShowCalendarEntry) GetStart() string       { return this.Start }
func (this ShowCalendarEntry) GetEnd() string         { return this.End }

type ShowItem struct {
	ID       string   `json:"id"`
	Sort     int      `json:"sort"`
	Title    string   `json:"title"`
	ImageURL *string  `json:"imageUrl,omitempty"`
	Images   []*Image `json:"images"`
	Show     *Show    `json:"show"`
}

func (ShowItem) IsCollectionItem()         {}
func (this ShowItem) GetID() string        { return this.ID }
func (this ShowItem) GetSort() int         { return this.Sort }
func (this ShowItem) GetTitle() string     { return this.Title }
func (this ShowItem) GetImageURL() *string { return this.ImageURL }
func (this ShowItem) GetImages() []*Image {
	if this.Images == nil {
		return nil
	}
	interfaceSlice := make([]*Image, 0, len(this.Images))
	for _, concrete := range this.Images {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type ShowSearchItem struct {
	ID          string  `json:"id"`
	LegacyID    *string `json:"legacyID,omitempty"`
	Collection  string  `json:"collection"`
	Title       string  `json:"title"`
	Header      *string `json:"header,omitempty"`
	Description *string `json:"description,omitempty"`
	Highlight   *string `json:"highlight,omitempty"`
	Image       *string `json:"image,omitempty"`
	URL         string  `json:"url"`
}

func (ShowSearchItem) IsSearchResultItem()          {}
func (this ShowSearchItem) GetID() string           { return this.ID }
func (this ShowSearchItem) GetLegacyID() *string    { return this.LegacyID }
func (this ShowSearchItem) GetCollection() string   { return this.Collection }
func (this ShowSearchItem) GetTitle() string        { return this.Title }
func (this ShowSearchItem) GetHeader() *string      { return this.Header }
func (this ShowSearchItem) GetDescription() *string { return this.Description }
func (this ShowSearchItem) GetHighlight() *string   { return this.Highlight }
func (this ShowSearchItem) GetImage() *string       { return this.Image }
func (this ShowSearchItem) GetURL() string          { return this.URL }

type SimpleCalendarEntry struct {
	ID          string `json:"id"`
	Event       *Event `json:"event,omitempty"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Start       string `json:"start"`
	End         string `json:"end"`
}

func (SimpleCalendarEntry) IsCalendarEntry()            {}
func (this SimpleCalendarEntry) GetID() string          { return this.ID }
func (this SimpleCalendarEntry) GetEvent() *Event       { return this.Event }
func (this SimpleCalendarEntry) GetTitle() string       { return this.Title }
func (this SimpleCalendarEntry) GetDescription() string { return this.Description }
func (this SimpleCalendarEntry) GetStart() string       { return this.Start }
func (this SimpleCalendarEntry) GetEnd() string         { return this.End }

type Stream struct {
	ID                string     `json:"id"`
	URL               string     `json:"url"`
	AudioLanguages    []string   `json:"audioLanguages"`
	SubtitleLanguages []string   `json:"subtitleLanguages"`
	Type              StreamType `json:"type"`
}

type StudyTopic struct {
	ID          string   `json:"id"`
	Title       string   `json:"title"`
	Description string   `json:"description"`
	Image       *string  `json:"image,omitempty"`
	Images      []*Image `json:"images"`
	// The default lesson.
	// Should not be used actively in lists, as it could affect query speeds.
	DefaultLesson *Lesson           `json:"defaultLesson"`
	Lessons       *LessonPagination `json:"lessons"`
	Progress      *LessonsProgress  `json:"progress"`
}

func (StudyTopic) IsSectionItemType() {}

type Survey struct {
	ID          string                    `json:"id"`
	Title       string                    `json:"title"`
	Description *string                   `json:"description,omitempty"`
	Questions   *SurveyQuestionPagination `json:"questions"`
}

type SurveyPrompt struct {
	ID     string  `json:"id"`
	Title  string  `json:"title"`
	From   string  `json:"from"`
	To     string  `json:"to"`
	Survey *Survey `json:"survey"`
}

func (SurveyPrompt) IsPrompt()             {}
func (this SurveyPrompt) GetID() string    { return this.ID }
func (this SurveyPrompt) GetTitle() string { return this.Title }
func (this SurveyPrompt) GetFrom() string  { return this.From }
func (this SurveyPrompt) GetTo() string    { return this.To }

type SurveyQuestionPagination struct {
	First  int              `json:"first"`
	Offset int              `json:"offset"`
	Total  int              `json:"total"`
	Items  []SurveyQuestion `json:"items"`
}

func (SurveyQuestionPagination) IsPagination()       {}
func (this SurveyQuestionPagination) GetTotal() int  { return this.Total }
func (this SurveyQuestionPagination) GetFirst() int  { return this.First }
func (this SurveyQuestionPagination) GetOffset() int { return this.Offset }

type SurveyRatingQuestion struct {
	ID          string  `json:"id"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
}

func (SurveyRatingQuestion) IsSurveyQuestion()            {}
func (this SurveyRatingQuestion) GetID() string           { return this.ID }
func (this SurveyRatingQuestion) GetTitle() string        { return this.Title }
func (this SurveyRatingQuestion) GetDescription() *string { return this.Description }

type SurveyTextQuestion struct {
	ID          string  `json:"id"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
}

func (SurveyTextQuestion) IsSurveyQuestion()            {}
func (this SurveyTextQuestion) GetID() string           { return this.ID }
func (this SurveyTextQuestion) GetTitle() string        { return this.Title }
func (this SurveyTextQuestion) GetDescription() *string { return this.Description }

type TaskPagination struct {
	Offset int    `json:"offset"`
	First  int    `json:"first"`
	Total  int    `json:"total"`
	Items  []Task `json:"items"`
}

func (TaskPagination) IsPagination()       {}
func (this TaskPagination) GetTotal() int  { return this.Total }
func (this TaskPagination) GetFirst() int  { return this.First }
func (this TaskPagination) GetOffset() int { return this.Offset }

type TasksProgress struct {
	Total     int `json:"total"`
	Completed int `json:"completed"`
}

type TextTask struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Completed bool   `json:"completed"`
}

func (TextTask) IsTask()                 {}
func (this TextTask) GetID() string      { return this.ID }
func (this TextTask) GetTitle() string   { return this.Title }
func (this TextTask) GetCompleted() bool { return this.Completed }

type User struct {
	ID                    *string    `json:"id,omitempty"`
	Anonymous             bool       `json:"anonymous"`
	BccMember             bool       `json:"bccMember"`
	Audience              *string    `json:"audience,omitempty"`
	Email                 *string    `json:"email,omitempty"`
	EmailVerified         bool       `json:"emailVerified"`
	Settings              *Settings  `json:"settings"`
	Roles                 []string   `json:"roles"`
	Analytics             *Analytics `json:"analytics"`
	Gender                Gender     `json:"gender"`
	FirstName             string     `json:"firstName"`
	DisplayName           string     `json:"displayName"`
	CompletedRegistration bool       `json:"completedRegistration"`
}

type UserCollection struct {
	ID      string                         `json:"id"`
	Title   string                         `json:"title"`
	Entries *UserCollectionEntryPagination `json:"entries"`
}

type UserCollectionEntry struct {
	ID   string                  `json:"id"`
	Item UserCollectionEntryItem `json:"item"`
}

type UserCollectionEntryPagination struct {
	Total  int                    `json:"total"`
	Offset int                    `json:"offset"`
	First  int                    `json:"first"`
	Items  []*UserCollectionEntry `json:"items"`
}

func (UserCollectionEntryPagination) IsPagination()       {}
func (this UserCollectionEntryPagination) GetTotal() int  { return this.Total }
func (this UserCollectionEntryPagination) GetFirst() int  { return this.First }
func (this UserCollectionEntryPagination) GetOffset() int { return this.Offset }

type VideoTask struct {
	ID             string   `json:"id"`
	Title          string   `json:"title"`
	Completed      bool     `json:"completed"`
	Episode        *Episode `json:"episode"`
	SecondaryTitle *string  `json:"secondaryTitle,omitempty"`
	Description    *string  `json:"description,omitempty"`
}

func (VideoTask) IsTask()                 {}
func (this VideoTask) GetID() string      { return this.ID }
func (this VideoTask) GetTitle() string   { return this.Title }
func (this VideoTask) GetCompleted() bool { return this.Completed }

type WebSection struct {
	ID             string               `json:"id"`
	Metadata       *ItemSectionMetadata `json:"metadata,omitempty"`
	Title          *string              `json:"title,omitempty"`
	Description    *string              `json:"description,omitempty"`
	URL            string               `json:"url"`
	WidthRatio     float64              `json:"widthRatio"`
	AspectRatio    *float64             `json:"aspectRatio,omitempty"`
	Height         *int                 `json:"height,omitempty"`
	Authentication bool                 `json:"authentication"`
}

func (WebSection) IsSection()                   {}
func (this WebSection) GetID() string           { return this.ID }
func (this WebSection) GetTitle() *string       { return this.Title }
func (this WebSection) GetDescription() *string { return this.Description }

type CardSectionSize string

const (
	CardSectionSizeLarge CardSectionSize = "large"
	CardSectionSizeMini  CardSectionSize = "mini"
)

var AllCardSectionSize = []CardSectionSize{
	CardSectionSizeLarge,
	CardSectionSizeMini,
}

func (e CardSectionSize) IsValid() bool {
	switch e {
	case CardSectionSizeLarge, CardSectionSizeMini:
		return true
	}
	return false
}

func (e CardSectionSize) String() string {
	return string(e)
}

func (e *CardSectionSize) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CardSectionSize(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CardSectionSize", str)
	}
	return nil
}

func (e CardSectionSize) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EpisodeType string

const (
	EpisodeTypeEpisode    EpisodeType = "episode"
	EpisodeTypeStandalone EpisodeType = "standalone"
)

var AllEpisodeType = []EpisodeType{
	EpisodeTypeEpisode,
	EpisodeTypeStandalone,
}

func (e EpisodeType) IsValid() bool {
	switch e {
	case EpisodeTypeEpisode, EpisodeTypeStandalone:
		return true
	}
	return false
}

func (e EpisodeType) String() string {
	return string(e)
}

func (e *EpisodeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EpisodeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EpisodeType", str)
	}
	return nil
}

func (e EpisodeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMale    Gender = "male"
	GenderFemale  Gender = "female"
	GenderUnknown Gender = "unknown"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderUnknown,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderUnknown:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GridSectionSize string

const (
	GridSectionSizeHalf GridSectionSize = "half"
)

var AllGridSectionSize = []GridSectionSize{
	GridSectionSizeHalf,
}

func (e GridSectionSize) IsValid() bool {
	switch e {
	case GridSectionSizeHalf:
		return true
	}
	return false
}

func (e GridSectionSize) String() string {
	return string(e)
}

func (e *GridSectionSize) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GridSectionSize(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GridSectionSize", str)
	}
	return nil
}

func (e GridSectionSize) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageStyle string

const (
	ImageStylePoster   ImageStyle = "poster"
	ImageStyleFeatured ImageStyle = "featured"
	ImageStyleDefault  ImageStyle = "default"
)

var AllImageStyle = []ImageStyle{
	ImageStylePoster,
	ImageStyleFeatured,
	ImageStyleDefault,
}

func (e ImageStyle) IsValid() bool {
	switch e {
	case ImageStylePoster, ImageStyleFeatured, ImageStyleDefault:
		return true
	}
	return false
}

func (e ImageStyle) String() string {
	return string(e)
}

func (e *ImageStyle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageStyle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageStyle", str)
	}
	return nil
}

func (e ImageStyle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LinkType string

const (
	LinkTypeText  LinkType = "text"
	LinkTypeAudio LinkType = "audio"
	LinkTypeVideo LinkType = "video"
	LinkTypeOther LinkType = "other"
)

var AllLinkType = []LinkType{
	LinkTypeText,
	LinkTypeAudio,
	LinkTypeVideo,
	LinkTypeOther,
}

func (e LinkType) IsValid() bool {
	switch e {
	case LinkTypeText, LinkTypeAudio, LinkTypeVideo, LinkTypeOther:
		return true
	}
	return false
}

func (e LinkType) String() string {
	return string(e)
}

func (e *LinkType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LinkType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LinkType", str)
	}
	return nil
}

func (e LinkType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SectionSize string

const (
	SectionSizeSmall  SectionSize = "small"
	SectionSizeMedium SectionSize = "medium"
)

var AllSectionSize = []SectionSize{
	SectionSizeSmall,
	SectionSizeMedium,
}

func (e SectionSize) IsValid() bool {
	switch e {
	case SectionSizeSmall, SectionSizeMedium:
		return true
	}
	return false
}

func (e SectionSize) String() string {
	return string(e)
}

func (e *SectionSize) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SectionSize(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SectionSize", str)
	}
	return nil
}

func (e SectionSize) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ShareRestriction string

const (
	ShareRestrictionRegistered ShareRestriction = "registered"
	ShareRestrictionMembers    ShareRestriction = "members"
	ShareRestrictionPublic     ShareRestriction = "public"
)

var AllShareRestriction = []ShareRestriction{
	ShareRestrictionRegistered,
	ShareRestrictionMembers,
	ShareRestrictionPublic,
}

func (e ShareRestriction) IsValid() bool {
	switch e {
	case ShareRestrictionRegistered, ShareRestrictionMembers, ShareRestrictionPublic:
		return true
	}
	return false
}

func (e ShareRestriction) String() string {
	return string(e)
}

func (e *ShareRestriction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShareRestriction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShareRestriction", str)
	}
	return nil
}

func (e ShareRestriction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ShowType string

const (
	ShowTypeEvent  ShowType = "event"
	ShowTypeSeries ShowType = "series"
)

var AllShowType = []ShowType{
	ShowTypeEvent,
	ShowTypeSeries,
}

func (e ShowType) IsValid() bool {
	switch e {
	case ShowTypeEvent, ShowTypeSeries:
		return true
	}
	return false
}

func (e ShowType) String() string {
	return string(e)
}

func (e *ShowType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShowType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShowType", str)
	}
	return nil
}

func (e ShowType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusPublished Status = "published"
	StatusUnlisted  Status = "unlisted"
)

var AllStatus = []Status{
	StatusPublished,
	StatusUnlisted,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusPublished, StatusUnlisted:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StreamType string

const (
	StreamTypeHlsTs   StreamType = "hls_ts"
	StreamTypeHlsCmaf StreamType = "hls_cmaf"
	StreamTypeDash    StreamType = "dash"
)

var AllStreamType = []StreamType{
	StreamTypeHlsTs,
	StreamTypeHlsCmaf,
	StreamTypeDash,
}

func (e StreamType) IsValid() bool {
	switch e {
	case StreamTypeHlsTs, StreamTypeHlsCmaf, StreamTypeDash:
		return true
	}
	return false
}

func (e StreamType) String() string {
	return string(e)
}

func (e *StreamType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StreamType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StreamType", str)
	}
	return nil
}

func (e StreamType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
