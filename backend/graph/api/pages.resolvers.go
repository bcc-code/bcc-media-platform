package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"strconv"
	"strings"

	"github.com/bcc-code/bcc-media-platform/backend/common"
	"github.com/bcc-code/bcc-media-platform/backend/graph/api/generated"
	"github.com/bcc-code/bcc-media-platform/backend/graph/api/model"
	"github.com/bcc-code/bcc-media-platform/backend/utils"
	"github.com/samber/lo"
)

// Items is the resolver for the items field.
func (r *contextCollectionResolver) Items(ctx context.Context, obj *model.ContextCollection, first *int, offset *int, cursor *string) (*model.SectionItemPagination, error) {
	pagination, err := r.sectionCollectionEntryResolver(ctx, &common.Section{
		Style:        "default",
		CollectionID: utils.AsNullInt(&obj.ID),
	}, first, offset, cursor, 0)
	if err != nil {
		return nil, err
	}

	return &model.SectionItemPagination{
		Total:       pagination.Total,
		First:       pagination.First,
		Offset:      pagination.Offset,
		Items:       pagination.Items,
		Cursor:      pagination.Cursor.Encode(),
		NextCursor:  pagination.NextCursor.Encode(),
		HasNext:     pagination.HasNext,
		HasPrevious: pagination.HasPrevious,
	}, nil
}

// Image is the resolver for the image field.
func (r *pageResolver) Image(ctx context.Context, obj *model.Page, style *model.ImageStyle) (*string, error) {
	e, err := r.Loaders.PageLoader.Get(ctx, utils.AsInt(obj.ID))
	if err != nil {
		return nil, err
	}
	return imageOrFallback(ctx, e.Images, style), nil
}

// Sections is the resolver for the sections field.
func (r *pageResolver) Sections(ctx context.Context, obj *model.Page, first *int, offset *int, cursor *string) (*model.SectionPagination, error) {
	if strings.HasPrefix(obj.Code, "c-") {
		collectionId := strings.TrimPrefix(obj.Code, "c-")
		intID, err := strconv.ParseInt(collectionId, 10, 64)
		if err != nil {
			return nil, err
		}
		return getSectionsForCollectionPage(int(intID))
	}

	intID, err := strconv.ParseInt(obj.ID, 10, 64)
	if err != nil {
		return nil, err
	}

	itemIDs, err := r.FilteredLoaders(ctx).SectionsLoader.Get(ctx, int(intID))
	if err != nil {
		return nil, err
	}

	var offsetCursor *utils.OffsetCursor
	if cursor != nil && *cursor != "" {
		offsetCursor, err = utils.ParseOffsetCursor(*cursor)
		if err != nil {
			return nil, err
		}
	}

	page := utils.Paginate(itemIDs, first, offset, nil, offsetCursor)

	sections, err := r.Loaders.SectionLoader.GetMany(ctx, utils.PointerIntArrayToIntArray(page.Items))
	if err != nil {
		return nil, err
	}
	sections = lo.Filter(sections, func(i *common.Section, _ int) bool {
		return i != nil
	})

	return &model.SectionPagination{
		Offset:      page.Offset,
		First:       page.First,
		Total:       page.Total,
		Items:       utils.MapWithCtx(ctx, sections, model.SectionFrom),
		Cursor:      page.Cursor.Encode(),
		NextCursor:  page.NextCursor.Encode(),
		HasNext:     page.HasNext,
		HasPrevious: page.HasPrevious,
	}, nil
}

// ContextCollection returns generated.ContextCollectionResolver implementation.
func (r *Resolver) ContextCollection() generated.ContextCollectionResolver {
	return &contextCollectionResolver{r}
}

// Page returns generated.PageResolver implementation.
func (r *Resolver) Page() generated.PageResolver { return &pageResolver{r} }

type contextCollectionResolver struct{ *Resolver }
type pageResolver struct{ *Resolver }
