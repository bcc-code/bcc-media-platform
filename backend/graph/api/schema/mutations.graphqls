type MutationRoot {
    setDevicePushToken(token: String!, languages: [String!]!): Device
    setEpisodeProgress(id: ID!, progress: Int, duration: Int, context: EpisodeContext): Episode!

    setShortProgress(id: UUID!, progress: Float, duration: Float): Short!

    sendSupportEmail(title: String!, content: String!, html: String!, options: EmailOptions): Boolean!

    completeTask(
        id: ID!,
        selectedAlternatives: [String!],
    ): Boolean!

    lockLessonAnswers(id: ID!) : Boolean!

    sendTaskMessage(taskId: ID!, message: String): ID!
    updateTaskMessage(id: ID!, message: String!): ID!

    sendEpisodeFeedback(episodeId: ID!, message: String, rating: Int): ID!
    updateEpisodeFeedback(id: ID!, message: String, rating: Int): ID!

    confirmAchievement(id: ID!): ConfirmAchievementResult!

    answerSurveyQuestion(id: UUID!, answer: String!): AnswerSurveyQuestionResult!
    updateSurveyQuestionAnswer(key: String!, answer: String!): AnswerSurveyQuestionResult!

    addEpisodeToMyList(episodeId: ID!): AddToCollectionResult!
    addShowToMyList(showId: ID!): AddToCollectionResult!
    addShortToMyList(shortId: ID!): AddToCollectionResult!

    removeEntryFromMyList(entryId: UUID!): UserCollection!

    updateUserMetadata(birthData: BirthOptions!, nameData: NameOptions!): Boolean!
    sendVerificationEmail: Boolean!

    subscribe(topic: SubscriptionTopic!): Boolean!
    unsubscribe(topic: SubscriptionTopic!): Boolean!
}

enum SubscriptionTopic {
    comics
}

type AnswerSurveyQuestionResult {
    id: String!
}

type AddToCollectionResult {
    entryId: UUID!
    collection: UserCollection! @goField(forceResolver: true)
}

input BirthOptions {
    year: Int!
}

input NameOptions {
    first: String!
    last: String!
}

input EmailOptions {
    name: String!
    email: String!
}
