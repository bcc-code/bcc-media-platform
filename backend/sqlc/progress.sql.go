// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: progress.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
	null_v4 "gopkg.in/guregu/null.v4"
)

const getProgressedMediaIDs = `-- name: GetProgressedMediaIDs :many
SELECT p.item_id
FROM "users"."media_progress" p
WHERE p.profile_id = $1::uuid
  AND p.item_id = ANY ($2::uuid[])
`

type GetProgressedMediaIDsParams struct {
	ProfileID uuid.UUID   `db:"profile_id" json:"profileId"`
	ItemIds   []uuid.UUID `db:"item_ids" json:"itemIds"`
}

func (q *Queries) GetProgressedMediaIDs(ctx context.Context, arg GetProgressedMediaIDsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getProgressedMediaIDs, arg.ProfileID, pq.Array(arg.ItemIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var item_id uuid.UUID
		if err := rows.Scan(&item_id); err != nil {
			return nil, err
		}
		items = append(items, item_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProgressForMediaIDs = `-- name: RemoveProgressForMediaIDs :exec
DELETE
FROM users.media_progress p
WHERE p.profile_id = $1
  AND p.item_id = ANY ($2::uuid[])
`

type RemoveProgressForMediaIDsParams struct {
	ProfileID uuid.UUID   `db:"profile_id" json:"profileId"`
	ItemIds   []uuid.UUID `db:"item_ids" json:"itemIds"`
}

func (q *Queries) RemoveProgressForMediaIDs(ctx context.Context, arg RemoveProgressForMediaIDsParams) error {
	_, err := q.db.ExecContext(ctx, removeProgressForMediaIDs, arg.ProfileID, pq.Array(arg.ItemIds))
	return err
}

const saveMediaProgress = `-- name: SaveMediaProgress :exec
INSERT INTO "users"."media_progress" (profile_id, item_id, progress, duration, watched, watched_at, updated_at,
                                      context)
VALUES ($1::uuid, $2::uuid, $3::float4, $4::float4, $5, $6, NOW(),
        $7)
ON CONFLICT (profile_id, item_id) DO UPDATE SET progress   = EXCLUDED.progress,
                                                updated_at = NOW(),
                                                watched    = EXCLUDED.watched,
                                                watched_at = EXCLUDED.watched_at,
                                                duration   = EXCLUDED.duration,
                                                context    = EXCLUDED.context
`

type SaveMediaProgressParams struct {
	ProfileID uuid.UUID             `db:"profile_id" json:"profileId"`
	ItemID    uuid.UUID             `db:"item_id" json:"itemId"`
	Progress  float32               `db:"progress" json:"progress"`
	Duration  float32               `db:"duration" json:"duration"`
	Watched   int32                 `db:"watched" json:"watched"`
	WatchedAt null_v4.Time          `db:"watched_at" json:"watchedAt"`
	Context   pqtype.NullRawMessage `db:"context" json:"context"`
}

func (q *Queries) SaveMediaProgress(ctx context.Context, arg SaveMediaProgressParams) error {
	_, err := q.db.ExecContext(ctx, saveMediaProgress,
		arg.ProfileID,
		arg.ItemID,
		arg.Progress,
		arg.Duration,
		arg.Watched,
		arg.WatchedAt,
		arg.Context,
	)
	return err
}

const deleteProgress = `-- name: deleteProgress :exec
UPDATE "users"."progress" p
SET progress   = 0,
    updated_at = NOW()
WHERE p.profile_id = $1
  AND p.episode_id = $2
`

type deleteProgressParams struct {
	ProfileID uuid.UUID `db:"profile_id" json:"profileId"`
	EpisodeID int32     `db:"episode_id" json:"episodeId"`
}

func (q *Queries) deleteProgress(ctx context.Context, arg deleteProgressParams) error {
	_, err := q.db.ExecContext(ctx, deleteProgress, arg.ProfileID, arg.EpisodeID)
	return err
}

const getDefaultEpisodeIDForSeasonIDs = `-- name: getDefaultEpisodeIDForSeasonIDs :many
SELECT DISTINCT ON (ep.season_id) p.episode_id as id, ep.season_id::int as parent_id
FROM users.progress p
         JOIN episodes ep ON ep.id = p.episode_id
WHERE p.profile_id = $1
  AND ep.status = 'published'
  AND ep.season_id = ANY ($2::int[])
ORDER BY ep.season_id, p.updated_at DESC
`

type getDefaultEpisodeIDForSeasonIDsParams struct {
	ProfileID uuid.UUID `db:"profile_id" json:"profileId"`
	SeasonIds []int32   `db:"season_ids" json:"seasonIds"`
}

type getDefaultEpisodeIDForSeasonIDsRow struct {
	ID       int32 `db:"id" json:"id"`
	ParentID int32 `db:"parent_id" json:"parentId"`
}

func (q *Queries) getDefaultEpisodeIDForSeasonIDs(ctx context.Context, arg getDefaultEpisodeIDForSeasonIDsParams) ([]getDefaultEpisodeIDForSeasonIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDefaultEpisodeIDForSeasonIDs, arg.ProfileID, pq.Array(arg.SeasonIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getDefaultEpisodeIDForSeasonIDsRow
	for rows.Next() {
		var i getDefaultEpisodeIDForSeasonIDsRow
		if err := rows.Scan(&i.ID, &i.ParentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDefaultEpisodeIDForShowIDs = `-- name: getDefaultEpisodeIDForShowIDs :many
SELECT DISTINCT ON (p.show_id) p.episode_id as id, p.show_id::int as parent_id
FROM users.progress p
         JOIN episodes ep ON ep.id = p.episode_id
WHERE p.profile_id = $1
  AND ep.status = 'published'
  AND p.show_id = ANY ($2::int[])
ORDER BY p.show_id, p.updated_at DESC
`

type getDefaultEpisodeIDForShowIDsParams struct {
	ProfileID uuid.UUID `db:"profile_id" json:"profileId"`
	ShowIds   []int32   `db:"show_ids" json:"showIds"`
}

type getDefaultEpisodeIDForShowIDsRow struct {
	ID       int32 `db:"id" json:"id"`
	ParentID int32 `db:"parent_id" json:"parentId"`
}

func (q *Queries) getDefaultEpisodeIDForShowIDs(ctx context.Context, arg getDefaultEpisodeIDForShowIDsParams) ([]getDefaultEpisodeIDForShowIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDefaultEpisodeIDForShowIDs, arg.ProfileID, pq.Array(arg.ShowIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getDefaultEpisodeIDForShowIDsRow
	for rows.Next() {
		var i getDefaultEpisodeIDForShowIDsRow
		if err := rows.Scan(&i.ID, &i.ParentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEpisodeIDsWithProgress = `-- name: getEpisodeIDsWithProgress :many
WITH uniques AS (SELECT DISTINCT ON (p.show_id, p.profile_id) p.show_id, p.profile_id, p.episode_id
                 FROM users.progress p
                 WHERE p.show_id IS NOT NULL
                   AND p.profile_id = ANY ($1::uuid[])
                 ORDER BY p.show_id, p.profile_id, p.updated_at DESC)
SELECT p.episode_id, p.profile_id, p.show_id, p.progress, p.duration
FROM users.progress p
         LEFT JOIN uniques u ON u.show_id = p.show_id AND u.profile_id = p.profile_id
WHERE p.profile_id = ANY ($1::uuid[])
  AND (u IS NULL OR u.episode_id = p.episode_id)
  AND p.progress > 10
  AND p.duration > 20
  AND ((p.progress::float / p.duration) > 0.8) != true
ORDER BY p.updated_at DESC
`

type getEpisodeIDsWithProgressRow struct {
	EpisodeID int32       `db:"episode_id" json:"episodeId"`
	ProfileID uuid.UUID   `db:"profile_id" json:"profileId"`
	ShowID    null_v4.Int `db:"show_id" json:"showId"`
	Progress  int32       `db:"progress" json:"progress"`
	Duration  int32       `db:"duration" json:"duration"`
}

func (q *Queries) getEpisodeIDsWithProgress(ctx context.Context, profileIds []uuid.UUID) ([]getEpisodeIDsWithProgressRow, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodeIDsWithProgress, pq.Array(profileIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getEpisodeIDsWithProgressRow
	for rows.Next() {
		var i getEpisodeIDsWithProgressRow
		if err := rows.Scan(
			&i.EpisodeID,
			&i.ProfileID,
			&i.ShowID,
			&i.Progress,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProgressForProfile = `-- name: getProgressForProfile :many
SELECT p.episode_id,
       p.show_id,
       p.progress,
       p.duration,
       p.watched,
       p.updated_at,
       p.watched_at,
       p.context
FROM "users"."progress" p
WHERE p.profile_id = $1::uuid
  AND p.episode_id = ANY ($2::int[])
ORDER BY watched, p.updated_at DESC
`

type getProgressForProfileParams struct {
	Column1 uuid.UUID `db:"column_1" json:"column1"`
	Column2 []int32   `db:"column_2" json:"column2"`
}

type getProgressForProfileRow struct {
	EpisodeID int32                 `db:"episode_id" json:"episodeId"`
	ShowID    null_v4.Int           `db:"show_id" json:"showId"`
	Progress  int32                 `db:"progress" json:"progress"`
	Duration  int32                 `db:"duration" json:"duration"`
	Watched   null_v4.Int           `db:"watched" json:"watched"`
	UpdatedAt time.Time             `db:"updated_at" json:"updatedAt"`
	WatchedAt null_v4.Time          `db:"watched_at" json:"watchedAt"`
	Context   pqtype.NullRawMessage `db:"context" json:"context"`
}

func (q *Queries) getProgressForProfile(ctx context.Context, arg getProgressForProfileParams) ([]getProgressForProfileRow, error) {
	rows, err := q.db.QueryContext(ctx, getProgressForProfile, arg.Column1, pq.Array(arg.Column2))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getProgressForProfileRow
	for rows.Next() {
		var i getProgressForProfileRow
		if err := rows.Scan(
			&i.EpisodeID,
			&i.ShowID,
			&i.Progress,
			&i.Duration,
			&i.Watched,
			&i.UpdatedAt,
			&i.WatchedAt,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveProgress = `-- name: saveProgress :exec
INSERT INTO "users"."progress" (profile_id, episode_id, show_id, progress, duration, watched, watched_at, updated_at,
                                context)
VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), $8)
ON CONFLICT (profile_id, episode_id) DO UPDATE SET progress   = EXCLUDED.progress,
                                                   show_id    = EXCLUDED.show_id,
                                                   updated_at = NOW(),
                                                   watched    = EXCLUDED.watched,
                                                   watched_at = EXCLUDED.watched_at,
                                                   duration   = EXCLUDED.duration,
                                                   context    = EXCLUDED.context
`

type saveProgressParams struct {
	ProfileID uuid.UUID             `db:"profile_id" json:"profileId"`
	EpisodeID int32                 `db:"episode_id" json:"episodeId"`
	ShowID    null_v4.Int           `db:"show_id" json:"showId"`
	Progress  int32                 `db:"progress" json:"progress"`
	Duration  int32                 `db:"duration" json:"duration"`
	Watched   null_v4.Int           `db:"watched" json:"watched"`
	WatchedAt null_v4.Time          `db:"watched_at" json:"watchedAt"`
	Context   pqtype.NullRawMessage `db:"context" json:"context"`
}

func (q *Queries) saveProgress(ctx context.Context, arg saveProgressParams) error {
	_, err := q.db.ExecContext(ctx, saveProgress,
		arg.ProfileID,
		arg.EpisodeID,
		arg.ShowID,
		arg.Progress,
		arg.Duration,
		arg.Watched,
		arg.WatchedAt,
		arg.Context,
	)
	return err
}
