// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: shows.sql

package sqlc

import (
	"context"
)

const getShows = `-- name: GetShows :many
SELECT agerating_code, available_from, available_to, date_created, date_updated, id, image_file_id, legacy_description_id, legacy_id, legacy_title_id, publish_date, status, type, user_created, user_updated FROM public.shows
`

func (q *Queries) GetShows(ctx context.Context) ([]Shows, error) {
	rows, err := q.db.QueryContext(ctx, getShows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shows
	for rows.Next() {
		var i Shows
		if err := rows.Scan(
			&i.AgeratingCode,
			&i.AvailableFrom,
			&i.AvailableTo,
			&i.DateCreated,
			&i.DateUpdated,
			&i.ID,
			&i.ImageFileID,
			&i.LegacyDescriptionID,
			&i.LegacyID,
			&i.LegacyTitleID,
			&i.PublishDate,
			&i.Status,
			&i.Type,
			&i.UserCreated,
			&i.UserUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
