// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: translations.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
	null_v4 "gopkg.in/guregu/null.v4"
)

const clearAchievementGroupTranslations = `-- name: ClearAchievementGroupTranslations :exec
DELETE
FROM achievementgroups_translations ts
WHERE ts.achievementgroups_id = ANY ($1::uuid[])
`

func (q *Queries) ClearAchievementGroupTranslations(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearAchievementGroupTranslations, pq.Array(dollar_1))
	return err
}

const clearAchievementTranslations = `-- name: ClearAchievementTranslations :exec
DELETE
FROM achievements_translations ts
WHERE ts.achievements_id = ANY ($1::uuid[])
`

func (q *Queries) ClearAchievementTranslations(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearAchievementTranslations, pq.Array(dollar_1))
	return err
}

const clearEpisodeTranslations = `-- name: ClearEpisodeTranslations :exec
DELETE
FROM episodes_translations
WHERE episodes_id = ANY ($1::int[])
  AND languages_code != 'no'
`

func (q *Queries) ClearEpisodeTranslations(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.ExecContext(ctx, clearEpisodeTranslations, pq.Array(dollar_1))
	return err
}

const clearFAQCategoryTranslations = `-- name: ClearFAQCategoryTranslations :exec
DELETE
FROM faqcategories_translations ts
WHERE ts.faqcategories_id = ANY ($1::uuid[])
`

func (q *Queries) ClearFAQCategoryTranslations(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearFAQCategoryTranslations, pq.Array(dollar_1))
	return err
}

const clearFAQTranslations = `-- name: ClearFAQTranslations :exec
DELETE
FROM faqs_translations ts
WHERE ts.faqs_id = ANY ($1::uuid[])
`

func (q *Queries) ClearFAQTranslations(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearFAQTranslations, pq.Array(dollar_1))
	return err
}

const clearLessonTranslations = `-- name: ClearLessonTranslations :exec
DELETE
FROM lessons_translations ts
WHERE ts.lessons_id = ANY ($1::uuid[])
`

func (q *Queries) ClearLessonTranslations(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearLessonTranslations, pq.Array(dollar_1))
	return err
}

const clearPageTranslations = `-- name: ClearPageTranslations :exec
DELETE
FROM pages_translations
WHERE pages_id = ANY ($1::int[])
  AND languages_code != 'no'
`

func (q *Queries) ClearPageTranslations(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.ExecContext(ctx, clearPageTranslations, pq.Array(dollar_1))
	return err
}

const clearQuestionAlternativeTranslations = `-- name: ClearQuestionAlternativeTranslations :exec
DELETE
FROM questionalternatives_translations ts
WHERE ts.questionalternatives_id = ANY ($1::uuid[])
`

func (q *Queries) ClearQuestionAlternativeTranslations(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearQuestionAlternativeTranslations, pq.Array(dollar_1))
	return err
}

const clearSeasonTranslations = `-- name: ClearSeasonTranslations :exec
DELETE
FROM seasons_translations
WHERE seasons_id = ANY ($1::int[])
  AND languages_code != 'no'
`

func (q *Queries) ClearSeasonTranslations(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.ExecContext(ctx, clearSeasonTranslations, pq.Array(dollar_1))
	return err
}

const clearSectionTranslations = `-- name: ClearSectionTranslations :exec
DELETE
FROM sections_translations
WHERE sections_id = ANY ($1::int[])
  AND languages_code != 'no'
`

func (q *Queries) ClearSectionTranslations(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.ExecContext(ctx, clearSectionTranslations, pq.Array(dollar_1))
	return err
}

const clearShowTranslations = `-- name: ClearShowTranslations :exec
DELETE
FROM shows_translations
WHERE shows_id = ANY ($1::int[])
  AND languages_code != 'no'
`

func (q *Queries) ClearShowTranslations(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.ExecContext(ctx, clearShowTranslations, pq.Array(dollar_1))
	return err
}

const clearStudyTopicTranslations = `-- name: ClearStudyTopicTranslations :exec
DELETE
FROM studytopics_translations ts
WHERE ts.studytopics_id = ANY ($1::uuid[])
`

func (q *Queries) ClearStudyTopicTranslations(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearStudyTopicTranslations, pq.Array(dollar_1))
	return err
}

const clearSurveyQuestionTranslations = `-- name: ClearSurveyQuestionTranslations :exec
DELETE
FROM surveyquestions_translations ts
WHERE ts.surveyquestions_id = ANY ($1::uuid[])
`

func (q *Queries) ClearSurveyQuestionTranslations(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearSurveyQuestionTranslations, pq.Array(dollar_1))
	return err
}

const clearSurveyTranslations = `-- name: ClearSurveyTranslations :exec
DELETE
FROM surveys_translations ts
WHERE ts.surveys_id = ANY ($1::uuid[])
`

func (q *Queries) ClearSurveyTranslations(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearSurveyTranslations, pq.Array(dollar_1))
	return err
}

const clearTaskTranslations = `-- name: ClearTaskTranslations :exec
DELETE
FROM tasks_translations ts
WHERE ts.tasks_id = ANY ($1::uuid[])
`

func (q *Queries) ClearTaskTranslations(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearTaskTranslations, pq.Array(dollar_1))
	return err
}

const listAchievementGroupOriginalTranslations = `-- name: ListAchievementGroupOriginalTranslations :many
SELECT items.id, items.title
FROM achievementgroups items
WHERE status = ANY ('{published,unlisted}')
`

type ListAchievementGroupOriginalTranslationsRow struct {
	ID    uuid.UUID      `db:"id" json:"id"`
	Title null_v4.String `db:"title" json:"title"`
}

func (q *Queries) ListAchievementGroupOriginalTranslations(ctx context.Context) ([]ListAchievementGroupOriginalTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAchievementGroupOriginalTranslations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAchievementGroupOriginalTranslationsRow
	for rows.Next() {
		var i ListAchievementGroupOriginalTranslationsRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAchievementGroupTranslations = `-- name: ListAchievementGroupTranslations :many
WITH items AS (SELECT i.id
               FROM achievementgroups i)
SELECT ts.id, achievementgroups_id as parent_id, languages_code, title, description
FROM achievementgroups_translations ts
         JOIN items i ON i.id = ts.achievementgroups_id
WHERE ts.languages_code = ANY ($1::varchar[])
`

type ListAchievementGroupTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      uuid.NullUUID  `db:"parent_id" json:"parentID"`
	LanguagesCode null_v4.String `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
	Description   null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListAchievementGroupTranslations(ctx context.Context, dollar_1 []string) ([]ListAchievementGroupTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAchievementGroupTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAchievementGroupTranslationsRow
	for rows.Next() {
		var i ListAchievementGroupTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAchievementOriginalTranslations = `-- name: ListAchievementOriginalTranslations :many
SELECT items.id, items.title, items.description
FROM achievements items
WHERE status = ANY ('{published,unlisted}')
`

type ListAchievementOriginalTranslationsRow struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	Title       string         `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListAchievementOriginalTranslations(ctx context.Context) ([]ListAchievementOriginalTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAchievementOriginalTranslations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAchievementOriginalTranslationsRow
	for rows.Next() {
		var i ListAchievementOriginalTranslationsRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAchievementTranslations = `-- name: ListAchievementTranslations :many
WITH items AS (SELECT i.id
               FROM achievements i)
SELECT ts.id, achievements_id as parent_id, languages_code, title, description
FROM achievements_translations ts
         JOIN items i ON i.id = ts.achievements_id
WHERE ts.languages_code = ANY ($1::varchar[])
`

type ListAchievementTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      uuid.NullUUID  `db:"parent_id" json:"parentID"`
	LanguagesCode string         `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
	Description   null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListAchievementTranslations(ctx context.Context, dollar_1 []string) ([]ListAchievementTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAchievementTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAchievementTranslationsRow
	for rows.Next() {
		var i ListAchievementTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAlternativeTranslations = `-- name: ListAlternativeTranslations :many
WITH items AS (SELECT i.id
               FROM questionalternatives i)
SELECT ts.id, questionalternatives_id as parent_id, languages_code, title
FROM questionalternatives_translations ts
         JOIN items i ON i.id = ts.questionalternatives_id
WHERE ts.languages_code = ANY ($1::varchar[])
`

type ListAlternativeTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      uuid.NullUUID  `db:"parent_id" json:"parentID"`
	LanguagesCode string         `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
}

func (q *Queries) ListAlternativeTranslations(ctx context.Context, dollar_1 []string) ([]ListAlternativeTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAlternativeTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAlternativeTranslationsRow
	for rows.Next() {
		var i ListAlternativeTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEpisodeTranslations = `-- name: ListEpisodeTranslations :many
WITH episodes AS (SELECT e.id
                  FROM episodes e
                           LEFT JOIN seasons s ON s.id = e.season_id
                           LEFT JOIN shows sh ON sh.id = s.show_id
                  WHERE e.status = ANY ('{published,unlisted}')
                    AND s.status = ANY ('{published,unlisted}')
                    AND sh.status = ANY ('{published,unlisted}'))
SELECT et.id, episodes_id as parent_id, languages_code, title, description, extra_description
FROM episodes_translations et
         JOIN episodes e ON e.id = et.episodes_id
WHERE et.languages_code = ANY ($1::varchar[])
`

type ListEpisodeTranslationsRow struct {
	ID               int32          `db:"id" json:"id"`
	ParentID         int32          `db:"parent_id" json:"parentID"`
	LanguagesCode    string         `db:"languages_code" json:"languagesCode"`
	Title            null_v4.String `db:"title" json:"title"`
	Description      null_v4.String `db:"description" json:"description"`
	ExtraDescription null_v4.String `db:"extra_description" json:"extraDescription"`
}

func (q *Queries) ListEpisodeTranslations(ctx context.Context, dollar_1 []string) ([]ListEpisodeTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listEpisodeTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEpisodeTranslationsRow
	for rows.Next() {
		var i ListEpisodeTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
			&i.ExtraDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFAQCategoryOriginalTranslations = `-- name: ListFAQCategoryOriginalTranslations :many
SELECT items.id, items.title, items.description
FROM faqcategories items
WHERE status = ANY ('{published,unlisted}')
`

type ListFAQCategoryOriginalTranslationsRow struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	Title       string         `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListFAQCategoryOriginalTranslations(ctx context.Context) ([]ListFAQCategoryOriginalTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listFAQCategoryOriginalTranslations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFAQCategoryOriginalTranslationsRow
	for rows.Next() {
		var i ListFAQCategoryOriginalTranslationsRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFAQCategoryTranslations = `-- name: ListFAQCategoryTranslations :many
WITH items AS (SELECT i.id
               FROM faqcategories i
               WHERE i.status = ANY ('{published,unlisted}'))
SELECT ts.id, faqcategories_id as parent_id, languages_code, title, description
FROM faqcategories_translations ts
         JOIN items i ON i.id = ts.faqcategories_id
WHERE ts.languages_code = ANY ($1::varchar[])
`

type ListFAQCategoryTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      uuid.NullUUID  `db:"parent_id" json:"parentID"`
	LanguagesCode null_v4.String `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
	Description   null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListFAQCategoryTranslations(ctx context.Context, dollar_1 []string) ([]ListFAQCategoryTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listFAQCategoryTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFAQCategoryTranslationsRow
	for rows.Next() {
		var i ListFAQCategoryTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFAQOriginalTranslations = `-- name: ListFAQOriginalTranslations :many

SELECT items.id, items.question, items.answer
FROM faqs items
WHERE status = ANY ('{published,unlisted}')
`

type ListFAQOriginalTranslationsRow struct {
	ID       uuid.UUID `db:"id" json:"id"`
	Question string    `db:"question" json:"question"`
	Answer   string    `db:"answer" json:"answer"`
}

// --------
// FAQ ---
// --------
func (q *Queries) ListFAQOriginalTranslations(ctx context.Context) ([]ListFAQOriginalTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listFAQOriginalTranslations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFAQOriginalTranslationsRow
	for rows.Next() {
		var i ListFAQOriginalTranslationsRow
		if err := rows.Scan(&i.ID, &i.Question, &i.Answer); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFAQTranslations = `-- name: ListFAQTranslations :many
WITH items AS (SELECT i.id
               FROM faqs i
               WHERE i.status = ANY ('{published,unlisted}'))
SELECT ts.id, faqs_id as parent_id, languages_code, question, answer
FROM faqs_translations ts
         JOIN items i ON i.id = ts.faqs_id
WHERE ts.languages_code = ANY ($1::varchar[])
`

type ListFAQTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      uuid.NullUUID  `db:"parent_id" json:"parentID"`
	LanguagesCode null_v4.String `db:"languages_code" json:"languagesCode"`
	Question      null_v4.String `db:"question" json:"question"`
	Answer        null_v4.String `db:"answer" json:"answer"`
}

func (q *Queries) ListFAQTranslations(ctx context.Context, dollar_1 []string) ([]ListFAQTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listFAQTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFAQTranslationsRow
	for rows.Next() {
		var i ListFAQTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Question,
			&i.Answer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLessonOriginalTranslations = `-- name: ListLessonOriginalTranslations :many
SELECT items.id, items.title, items.description
FROM lessons items
WHERE status = ANY ('{published,unlisted}')
`

type ListLessonOriginalTranslationsRow struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	Title       string         `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListLessonOriginalTranslations(ctx context.Context) ([]ListLessonOriginalTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listLessonOriginalTranslations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLessonOriginalTranslationsRow
	for rows.Next() {
		var i ListLessonOriginalTranslationsRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLessonTranslations = `-- name: ListLessonTranslations :many
WITH lessons AS (SELECT s.id
                 FROM lessons s
                 WHERE s.status = ANY ('{published,unlisted}'))
SELECT st.id, lessons_id as parent_id, languages_code, title, description
FROM lessons_translations st
         JOIN lessons e ON e.id = st.lessons_id
WHERE st.languages_code = ANY ($1::varchar[])
`

type ListLessonTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      uuid.NullUUID  `db:"parent_id" json:"parentID"`
	LanguagesCode null_v4.String `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
	Description   null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListLessonTranslations(ctx context.Context, dollar_1 []string) ([]ListLessonTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listLessonTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLessonTranslationsRow
	for rows.Next() {
		var i ListLessonTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLinkTranslations = `-- name: ListLinkTranslations :many
WITH links AS (SELECT s.id
               FROM links s
               WHERE s.status = ANY ('{published,unlisted}'))
SELECT st.id, links_id as parent_id, languages_code, title, description
FROM links_translations st
         JOIN links e ON e.id = st.links_id
WHERE st.languages_code = ANY ($1::varchar[])
`

type ListLinkTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      null_v4.Int    `db:"parent_id" json:"parentID"`
	LanguagesCode null_v4.String `db:"languages_code" json:"languagesCode"`
	Title         string         `db:"title" json:"title"`
	Description   string         `db:"description" json:"description"`
}

func (q *Queries) ListLinkTranslations(ctx context.Context, dollar_1 []string) ([]ListLinkTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listLinkTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLinkTranslationsRow
	for rows.Next() {
		var i ListLinkTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPageTranslations = `-- name: ListPageTranslations :many
WITH pages AS (SELECT s.id
               FROM pages s
               WHERE s.status = ANY ('{published,unlisted}'))
SELECT st.id, pages_id as parent_id, languages_code, title, description
FROM pages_translations st
         JOIN pages e ON e.id = st.pages_id
WHERE st.languages_code = ANY ($1::varchar[])
`

type ListPageTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      null_v4.Int    `db:"parent_id" json:"parentID"`
	LanguagesCode null_v4.String `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
	Description   null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListPageTranslations(ctx context.Context, dollar_1 []string) ([]ListPageTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPageTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPageTranslationsRow
	for rows.Next() {
		var i ListPageTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestionAlternativesOriginalTranslations = `-- name: ListQuestionAlternativesOriginalTranslations :many
SELECT items.id, items.title
FROM questionalternatives items
         JOIN tasks t ON t.id = items.task_id
WHERE t.status = ANY ('{published,unlisted}')
`

type ListQuestionAlternativesOriginalTranslationsRow struct {
	ID    uuid.UUID      `db:"id" json:"id"`
	Title null_v4.String `db:"title" json:"title"`
}

func (q *Queries) ListQuestionAlternativesOriginalTranslations(ctx context.Context) ([]ListQuestionAlternativesOriginalTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listQuestionAlternativesOriginalTranslations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListQuestionAlternativesOriginalTranslationsRow
	for rows.Next() {
		var i ListQuestionAlternativesOriginalTranslationsRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSeasonTranslations = `-- name: ListSeasonTranslations :many
WITH seasons AS (SELECT s.id
                 FROM seasons s
                          LEFT JOIN shows sh ON sh.id = s.show_id
                 WHERE s.status = ANY ('{published,unlisted}')
                   AND sh.status = ANY ('{published,unlisted}'))
SELECT et.id, seasons_id as parent_id, languages_code, title, description
FROM seasons_translations et
         JOIN seasons e ON e.id = et.seasons_id
WHERE et.languages_code = ANY ($1::varchar[])
`

type ListSeasonTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      int32          `db:"parent_id" json:"parentID"`
	LanguagesCode string         `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
	Description   null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListSeasonTranslations(ctx context.Context, dollar_1 []string) ([]ListSeasonTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listSeasonTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSeasonTranslationsRow
	for rows.Next() {
		var i ListSeasonTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSectionTranslations = `-- name: ListSectionTranslations :many
WITH sections AS (SELECT s.id
                  FROM sections s
                  WHERE s.status = 'published'
                    AND s.show_title = true)
SELECT st.id, sections_id as parent_id, languages_code, title, description
FROM sections_translations st
         JOIN sections e ON e.id = st.sections_id
WHERE st.languages_code = ANY ($1::varchar[])
`

type ListSectionTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      int32          `db:"parent_id" json:"parentID"`
	LanguagesCode string         `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
	Description   null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListSectionTranslations(ctx context.Context, dollar_1 []string) ([]ListSectionTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listSectionTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSectionTranslationsRow
	for rows.Next() {
		var i ListSectionTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShowTranslations = `-- name: ListShowTranslations :many
WITH shows AS (SELECT s.id
               FROM shows s
               WHERE s.status = ANY ('{published,unlisted}'))
SELECT et.id, shows_id as parent_id, languages_code, title, description
FROM shows_translations et
         JOIN shows e ON e.id = et.shows_id
WHERE et.languages_code = ANY ($1::varchar[])
`

type ListShowTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      int32          `db:"parent_id" json:"parentID"`
	LanguagesCode string         `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
	Description   null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListShowTranslations(ctx context.Context, dollar_1 []string) ([]ListShowTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listShowTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListShowTranslationsRow
	for rows.Next() {
		var i ListShowTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudyTopicOriginalTranslations = `-- name: ListStudyTopicOriginalTranslations :many
SELECT items.id, items.title, items.description
FROM studytopics items
WHERE status = ANY ('{published,unlisted}')
`

type ListStudyTopicOriginalTranslationsRow struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	Title       string         `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListStudyTopicOriginalTranslations(ctx context.Context) ([]ListStudyTopicOriginalTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listStudyTopicOriginalTranslations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStudyTopicOriginalTranslationsRow
	for rows.Next() {
		var i ListStudyTopicOriginalTranslationsRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudyTopicTranslations = `-- name: ListStudyTopicTranslations :many
WITH items AS (SELECT i.id
               FROM studytopics i
               WHERE i.status = ANY ('{published,unlisted}'))
SELECT ts.id, studytopics_id as parent_id, languages_code, title, description
FROM studytopics_translations ts
         JOIN items i ON i.id = ts.studytopics_id
WHERE ts.languages_code = ANY ($1::varchar[])
`

type ListStudyTopicTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      uuid.NullUUID  `db:"parent_id" json:"parentID"`
	LanguagesCode null_v4.String `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
	Description   null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListStudyTopicTranslations(ctx context.Context, dollar_1 []string) ([]ListStudyTopicTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listStudyTopicTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStudyTopicTranslationsRow
	for rows.Next() {
		var i ListStudyTopicTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSurveyOriginalTranslations = `-- name: ListSurveyOriginalTranslations :many
SELECT items.id, items.title, items.description
FROM surveys items
WHERE status = ANY ('{published,unlisted}')
`

type ListSurveyOriginalTranslationsRow struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	Title       string         `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListSurveyOriginalTranslations(ctx context.Context) ([]ListSurveyOriginalTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listSurveyOriginalTranslations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSurveyOriginalTranslationsRow
	for rows.Next() {
		var i ListSurveyOriginalTranslationsRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSurveyQuestionOriginalTranslations = `-- name: ListSurveyQuestionOriginalTranslations :many
SELECT items.id, items.title, items.description, items.placeholder
FROM surveyquestions items
`

type ListSurveyQuestionOriginalTranslationsRow struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	Title       string         `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
	Placeholder null_v4.String `db:"placeholder" json:"placeholder"`
}

func (q *Queries) ListSurveyQuestionOriginalTranslations(ctx context.Context) ([]ListSurveyQuestionOriginalTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listSurveyQuestionOriginalTranslations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSurveyQuestionOriginalTranslationsRow
	for rows.Next() {
		var i ListSurveyQuestionOriginalTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Placeholder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSurveyQuestionTranslations = `-- name: ListSurveyQuestionTranslations :many
SELECT ts.id, surveyquestions_id as parent_id, languages_code, ts.title, ts.description, ts.placeholder
FROM surveyquestions_translations ts
         JOIN surveyquestions items ON items.id = ts.surveyquestions_id
         JOIN surveys s ON s.id = items.survey_id AND s.status = ANY ('{published,unlisted}')
WHERE ts.languages_code = ANY ($1::varchar[])
`

type ListSurveyQuestionTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      uuid.UUID      `db:"parent_id" json:"parentID"`
	LanguagesCode string         `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
	Description   null_v4.String `db:"description" json:"description"`
	Placeholder   null_v4.String `db:"placeholder" json:"placeholder"`
}

func (q *Queries) ListSurveyQuestionTranslations(ctx context.Context, dollar_1 []string) ([]ListSurveyQuestionTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listSurveyQuestionTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSurveyQuestionTranslationsRow
	for rows.Next() {
		var i ListSurveyQuestionTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
			&i.Placeholder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSurveyTranslations = `-- name: ListSurveyTranslations :many
WITH items AS (SELECT i.id
               FROM surveys i
               WHERE i.status = ANY ('{published,unlisted}'))
SELECT ts.id, surveys_id as parent_id, languages_code, title, description
FROM surveys_translations ts
         JOIN items i ON i.id = ts.surveys_id
WHERE ts.languages_code = ANY ($1::varchar[])
`

type ListSurveyTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      uuid.UUID      `db:"parent_id" json:"parentID"`
	LanguagesCode string         `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
	Description   null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListSurveyTranslations(ctx context.Context, dollar_1 []string) ([]ListSurveyTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listSurveyTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSurveyTranslationsRow
	for rows.Next() {
		var i ListSurveyTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskOriginalTranslations = `-- name: ListTaskOriginalTranslations :many
SELECT items.id, items.title, items.description
FROM tasks items
WHERE status = ANY ('{published,unlisted}')
`

type ListTaskOriginalTranslationsRow struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListTaskOriginalTranslations(ctx context.Context) ([]ListTaskOriginalTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listTaskOriginalTranslations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTaskOriginalTranslationsRow
	for rows.Next() {
		var i ListTaskOriginalTranslationsRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskTranslations = `-- name: ListTaskTranslations :many
WITH items AS (SELECT i.id
               FROM tasks i
               WHERE i.status = ANY ('{published,unlisted}'))
SELECT ts.id, tasks_id as parent_id, languages_code, title, description
FROM tasks_translations ts
         JOIN items i ON i.id = ts.tasks_id
WHERE ts.languages_code = ANY ($1::varchar[])
`

type ListTaskTranslationsRow struct {
	ID            int32          `db:"id" json:"id"`
	ParentID      uuid.NullUUID  `db:"parent_id" json:"parentID"`
	LanguagesCode null_v4.String `db:"languages_code" json:"languagesCode"`
	Title         null_v4.String `db:"title" json:"title"`
	Description   null_v4.String `db:"description" json:"description"`
}

func (q *Queries) ListTaskTranslations(ctx context.Context, dollar_1 []string) ([]ListTaskTranslationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listTaskTranslations, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTaskTranslationsRow
	for rows.Next() {
		var i ListTaskTranslationsRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.LanguagesCode,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
