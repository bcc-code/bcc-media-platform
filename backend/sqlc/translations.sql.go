// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: translations.sql

package sqlc

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	null_v4 "gopkg.in/guregu/null.v4"
)

const getCalendarEntryTranslatable = `-- name: GetCalendarEntryTranslatable :many
SELECT et.id,
       calendarentries_id                                            as parent_id,
       languages_code                                                as language,
       json_build_object('title', title, 'description', description) as values
FROM calendarentries_translations et
         JOIN events e ON e.id = et.calendarentries_id
WHERE et.languages_code = 'no'
AND et.date_updated > $1
`

type GetCalendarEntryTranslatableRow struct {
	ID       int32           `db:"id" json:"id"`
	ParentID int32           `db:"parent_id" json:"parentId"`
	Language string          `db:"language" json:"language"`
	Values   json.RawMessage `db:"values" json:"values"`
}

func (q *Queries) GetCalendarEntryTranslatable(ctx context.Context, dateUpdated time.Time) ([]GetCalendarEntryTranslatableRow, error) {
	rows, err := q.db.QueryContext(ctx, getCalendarEntryTranslatable, dateUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCalendarEntryTranslatableRow
	for rows.Next() {
		var i GetCalendarEntryTranslatableRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Language,
			&i.Values,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEpisodeTranslatable = `-- name: GetEpisodeTranslatable :many
WITH episodes AS (SELECT e.id
                  FROM episodes e
                           LEFT JOIN seasons s ON s.id = e.season_id
                           LEFT JOIN shows sh ON sh.id = s.show_id
                  WHERE e.translations_required
                    AND e.date_updated > $1
                    AND e.status = ANY ('{published,unlisted}')
                    AND (e.season_id IS NULL OR (s.status = ANY ('{published,unlisted}')
                      AND sh.status = ANY ('{published,unlisted}'))))
SELECT e.id, title, description
FROM episodes_translations et
         JOIN episodes e ON e.id = et.episodes_id
WHERE et.languages_code = 'no' AND et.date_updated > $1
`

type GetEpisodeTranslatableRow struct {
	ID          int32          `db:"id" json:"id"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) GetEpisodeTranslatable(ctx context.Context, dateUpdated time.Time) ([]GetEpisodeTranslatableRow, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodeTranslatable, dateUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEpisodeTranslatableRow
	for rows.Next() {
		var i GetEpisodeTranslatableRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventTranslatable = `-- name: GetEventTranslatable :many
SELECT e.id, title, description
FROM events_translations et
         JOIN events e ON e.id = et.events_id
WHERE et.languages_code = 'no' AND e.status = ANY ('{published,unlisted}')
AND et.date_updated > $1
`

type GetEventTranslatableRow struct {
	ID          int32          `db:"id" json:"id"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) GetEventTranslatable(ctx context.Context, dateUpdated time.Time) ([]GetEventTranslatableRow, error) {
	rows, err := q.db.QueryContext(ctx, getEventTranslatable, dateUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventTranslatableRow
	for rows.Next() {
		var i GetEventTranslatableRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLessonsTranslatableText = `-- name: GetLessonsTranslatableText :many

SELECT id, title, description FROM lessons WHERE
               status = ANY ('{published,unlisted}')
               AND date_updated > $1::timestamp
               AND translations_required
`

type GetLessonsTranslatableTextRow struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	Title       string         `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) GetLessonsTranslatableText(ctx context.Context, dateUpdated time.Time) ([]GetLessonsTranslatableTextRow, error) {
	rows, err := q.db.QueryContext(ctx, getLessonsTranslatableText, dateUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLessonsTranslatableTextRow
	for rows.Next() {
		var i GetLessonsTranslatableTextRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkTranslatable = `-- name: GetLinkTranslatable :many
SELECT e.id, title, description
FROM links_translations st
         JOIN links e ON e.id = st.links_id
WHERE st.languages_code = 'no'
  AND st.date_updated > $1
  AND e.date_updated > $1
  AND e.translations_required
  AND status = ANY ('{published,unlisted}')
`

type GetLinkTranslatableRow struct {
	ID          int32  `db:"id" json:"id"`
	Title       string `db:"title" json:"title"`
	Description string `db:"description" json:"description"`
}

func (q *Queries) GetLinkTranslatable(ctx context.Context, dateUpdated time.Time) ([]GetLinkTranslatableRow, error) {
	rows, err := q.db.QueryContext(ctx, getLinkTranslatable, dateUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLinkTranslatableRow
	for rows.Next() {
		var i GetLinkTranslatableRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPageTranslatable = `-- name: GetPageTranslatable :many
SELECT p.id, title, description
FROM pages_translations pt
         JOIN pages p ON p.id = pt.pages_id
WHERE pt.languages_code = 'no'
  AND pt.date_updated > $1
  AND p.translations_required
  AND p.status = ANY ('{published,unlisted}')
`

type GetPageTranslatableRow struct {
	ID          int32          `db:"id" json:"id"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) GetPageTranslatable(ctx context.Context, dateUpdated time.Time) ([]GetPageTranslatableRow, error) {
	rows, err := q.db.QueryContext(ctx, getPageTranslatable, dateUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPageTranslatableRow
	for rows.Next() {
		var i GetPageTranslatableRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylistTranslatable = `-- name: GetPlaylistTranslatable :many
SELECT id, title, description FROM playlists
WHERE translations_required
  AND (date_updated > $1::timestamp OR date_created > $1::timestamp)
  AND status = ANY ('{published,unlisted}')
`

type GetPlaylistTranslatableRow struct {
	ID          uuid.UUID      `db:"id" json:"id"`
	Title       string         `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) GetPlaylistTranslatable(ctx context.Context, dateUpdated time.Time) ([]GetPlaylistTranslatableRow, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylistTranslatable, dateUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlaylistTranslatableRow
	for rows.Next() {
		var i GetPlaylistTranslatableRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSeasonTranslatable = `-- name: GetSeasonTranslatable :many
SELECT s.id, title, description
FROM seasons_translations st
         JOIN seasons s ON s.id = st.seasons_id
         JOIN shows sh ON sh.id = s.show_id
WHERE st.languages_code = 'no'
  AND st.date_updated > $1
  AND s.date_updated > $1
  AND s.translations_required
  AND s.status = ANY ('{published,unlisted}')
  AND sh.status = ANY ('{published,unlisted}')
`

type GetSeasonTranslatableRow struct {
	ID          int32          `db:"id" json:"id"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) GetSeasonTranslatable(ctx context.Context, dateUpdated time.Time) ([]GetSeasonTranslatableRow, error) {
	rows, err := q.db.QueryContext(ctx, getSeasonTranslatable, dateUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSeasonTranslatableRow
	for rows.Next() {
		var i GetSeasonTranslatableRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSectionTranslatable = `-- name: GetSectionTranslatable :many
SELECT s.id,title,description
FROM sections_translations st
         JOIN sections s ON s.id = st.sections_id
WHERE st.languages_code = 'no'
  AND st.date_updated > $1
  AND s.date_updated > $1
  AND s.translations_required
  AND s.status = 'published'
  AND s.show_title = true
`

type GetSectionTranslatableRow struct {
	ID          int32          `db:"id" json:"id"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) GetSectionTranslatable(ctx context.Context, dateUpdated time.Time) ([]GetSectionTranslatableRow, error) {
	rows, err := q.db.QueryContext(ctx, getSectionTranslatable, dateUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSectionTranslatableRow
	for rows.Next() {
		var i GetSectionTranslatableRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowTranslatable = `-- name: GetShowTranslatable :many
SELECT s.id, title, description
FROM shows_translations st
         JOIN shows s ON s.id = st.shows_id
WHERE st.languages_code = 'no'
  AND st.date_updated > $1
  AND s.date_updated > $1
  AND s.translations_required
  AND s.status = ANY ('{published,unlisted}')
`

type GetShowTranslatableRow struct {
	ID          int32          `db:"id" json:"id"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) GetShowTranslatable(ctx context.Context, dateUpdated time.Time) ([]GetShowTranslatableRow, error) {
	rows, err := q.db.QueryContext(ctx, getShowTranslatable, dateUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetShowTranslatableRow
	for rows.Next() {
		var i GetShowTranslatableRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTranslationsHash = `-- name: GetTranslationsHash :many
SELECT collection, hash, last_sent, date_updated FROM translations_hash WHERE hash = $1
`

func (q *Queries) GetTranslationsHash(ctx context.Context, hash []byte) ([]TranslationsHash, error) {
	rows, err := q.db.QueryContext(ctx, getTranslationsHash, hash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TranslationsHash
	for rows.Next() {
		var i TranslationsHash
		if err := rows.Scan(
			&i.Collection,
			&i.Hash,
			&i.LastSent,
			&i.DateUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const shouldSendTranslations = `-- name: ShouldSendTranslations :one

SELECT (COUNT(*) = 0)::bool as should -- if we have any rows, that means this hash should not be sent
FROM translations_hash
WHERE collection = $1
  AND hash = $2::bytea
  AND last_sent > NOW() - INTERVAL '30 minutes'
`

type ShouldSendTranslationsParams struct {
	Collection string `db:"collection" json:"collection"`
	Hash       []byte `db:"hash" json:"hash"`
}

// ---------
// HASH ---
// ---------
func (q *Queries) ShouldSendTranslations(ctx context.Context, arg ShouldSendTranslationsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, shouldSendTranslations, arg.Collection, arg.Hash)
	var should bool
	err := row.Scan(&should)
	return should, err
}

const updateAchievementGroupTranslation = `-- name: UpdateAchievementGroupTranslation :exec
INSERT INTO achievementgroups_translations (achievementgroups_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (achievementgroups_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                                 description = EXCLUDED.description
`

type UpdateAchievementGroupTranslationParams struct {
	ItemID      uuid.UUID      `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateAchievementGroupTranslation(ctx context.Context, arg UpdateAchievementGroupTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateAchievementGroupTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateAchievementTranslation = `-- name: UpdateAchievementTranslation :exec
INSERT INTO achievements_translations (achievements_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (achievements_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                            description = EXCLUDED.description
`

type UpdateAchievementTranslationParams struct {
	ItemID      uuid.UUID      `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateAchievementTranslation(ctx context.Context, arg UpdateAchievementTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateAchievementTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateAlternativeTranslation = `-- name: UpdateAlternativeTranslation :exec
INSERT INTO questionalternatives_translations (questionalternatives_id, languages_code, title)
VALUES ($1, $2, $3)
ON CONFLICT (questionalternatives_id, languages_code) DO UPDATE SET title = EXCLUDED.title
`

type UpdateAlternativeTranslationParams struct {
	ItemID   uuid.UUID      `db:"item_id" json:"itemId"`
	Language string         `db:"language" json:"language"`
	Title    null_v4.String `db:"title" json:"title"`
}

func (q *Queries) UpdateAlternativeTranslation(ctx context.Context, arg UpdateAlternativeTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateAlternativeTranslation, arg.ItemID, arg.Language, arg.Title)
	return err
}

const updateCalendarEntryTranslation = `-- name: UpdateCalendarEntryTranslation :exec
INSERT INTO calendarentries_translations (calendarentries_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (calendarentries_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                               description = EXCLUDED.description
`

type UpdateCalendarEntryTranslationParams struct {
	ItemID      int32          `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateCalendarEntryTranslation(ctx context.Context, arg UpdateCalendarEntryTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateCalendarEntryTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateEpisodeTranslation = `-- name: UpdateEpisodeTranslation :exec
INSERT INTO episodes_translations (episodes_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (episodes_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                        description = EXCLUDED.description
`

type UpdateEpisodeTranslationParams struct {
	ItemID      int32          `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateEpisodeTranslation(ctx context.Context, arg UpdateEpisodeTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateEpisodeTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateEventTranslation = `-- name: UpdateEventTranslation :exec
INSERT INTO events_translations (events_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (events_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                      description = EXCLUDED.description
`

type UpdateEventTranslationParams struct {
	ItemID      int32          `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateEventTranslation(ctx context.Context, arg UpdateEventTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateEventTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateFAQCategoryTranslation = `-- name: UpdateFAQCategoryTranslation :exec
INSERT INTO faqcategories_translations (faqcategories_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (faqcategories_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                             description = EXCLUDED.description
`

type UpdateFAQCategoryTranslationParams struct {
	ItemID      uuid.UUID      `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateFAQCategoryTranslation(ctx context.Context, arg UpdateFAQCategoryTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateFAQCategoryTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateFAQTranslation = `-- name: UpdateFAQTranslation :exec

INSERT INTO faqs_translations (faqs_id, languages_code, question, answer)
VALUES ($1, $2, $3::text, $4::text)
ON CONFLICT (faqs_id, languages_code) DO UPDATE SET question = EXCLUDED.question,
                                                    answer   = EXCLUDED.answer
`

type UpdateFAQTranslationParams struct {
	ItemID   uuid.UUID `db:"item_id" json:"itemId"`
	Language string    `db:"language" json:"language"`
	Question string    `db:"question" json:"question"`
	Answer   string    `db:"answer" json:"answer"`
}

// --------
// FAQ ---
// --------
func (q *Queries) UpdateFAQTranslation(ctx context.Context, arg UpdateFAQTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateFAQTranslation,
		arg.ItemID,
		arg.Language,
		arg.Question,
		arg.Answer,
	)
	return err
}

const updateGameTranslation = `-- name: UpdateGameTranslation :exec
INSERT INTO games_translations (games_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (games_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                     description = EXCLUDED.description
`

type UpdateGameTranslationParams struct {
	ItemID      uuid.UUID      `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateGameTranslation(ctx context.Context, arg UpdateGameTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateGameTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateLessonTranslation = `-- name: UpdateLessonTranslation :exec
INSERT INTO lessons_translations (lessons_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (lessons_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                       description = EXCLUDED.description
`

type UpdateLessonTranslationParams struct {
	ItemID      uuid.UUID      `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateLessonTranslation(ctx context.Context, arg UpdateLessonTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateLessonTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateLinkTranslation = `-- name: UpdateLinkTranslation :exec
INSERT INTO links_translations (links_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (links_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                     description = EXCLUDED.description
`

type UpdateLinkTranslationParams struct {
	ItemID      int32  `db:"item_id" json:"itemId"`
	Language    string `db:"language" json:"language"`
	Title       string `db:"title" json:"title"`
	Description string `db:"description" json:"description"`
}

func (q *Queries) UpdateLinkTranslation(ctx context.Context, arg UpdateLinkTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateLinkTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateMediaItemTranslation = `-- name: UpdateMediaItemTranslation :exec
INSERT INTO mediaitems_translations (mediaitems_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (mediaitems_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                          description = EXCLUDED.description
`

type UpdateMediaItemTranslationParams struct {
	ItemID      uuid.UUID      `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateMediaItemTranslation(ctx context.Context, arg UpdateMediaItemTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateMediaItemTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updatePageTranslation = `-- name: UpdatePageTranslation :exec
INSERT INTO pages_translations (pages_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (pages_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                     description = EXCLUDED.description
`

type UpdatePageTranslationParams struct {
	ItemID      int32          `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdatePageTranslation(ctx context.Context, arg UpdatePageTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updatePageTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updatePlaylistTranslation = `-- name: UpdatePlaylistTranslation :exec
INSERT INTO playlists_translations (playlists_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (playlists_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                         description = EXCLUDED.description
`

type UpdatePlaylistTranslationParams struct {
	ItemID      uuid.UUID      `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdatePlaylistTranslation(ctx context.Context, arg UpdatePlaylistTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updatePlaylistTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateSeasonTranslation = `-- name: UpdateSeasonTranslation :exec
INSERT INTO seasons_translations (seasons_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (seasons_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                       description = EXCLUDED.description
`

type UpdateSeasonTranslationParams struct {
	ItemID      int32          `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateSeasonTranslation(ctx context.Context, arg UpdateSeasonTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateSeasonTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateSectionTranslation = `-- name: UpdateSectionTranslation :exec
INSERT INTO sections_translations (sections_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (sections_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                        description = EXCLUDED.description
`

type UpdateSectionTranslationParams struct {
	ItemID      int32          `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateSectionTranslation(ctx context.Context, arg UpdateSectionTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateSectionTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateShowTranslation = `-- name: UpdateShowTranslation :exec
INSERT INTO shows_translations (shows_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (shows_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                     description = EXCLUDED.description
`

type UpdateShowTranslationParams struct {
	ItemID      int32          `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateShowTranslation(ctx context.Context, arg UpdateShowTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateShowTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateStudyTopicTranslation = `-- name: UpdateStudyTopicTranslation :exec
INSERT INTO studytopics_translations (studytopics_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (studytopics_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                           description = EXCLUDED.description
`

type UpdateStudyTopicTranslationParams struct {
	ItemID      uuid.UUID      `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateStudyTopicTranslation(ctx context.Context, arg UpdateStudyTopicTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateStudyTopicTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateSurveyQuestionTranslation = `-- name: UpdateSurveyQuestionTranslation :exec
INSERT INTO surveyquestions_translations (surveyquestions_id, languages_code, title, description, action_button_text, cancel_button_text)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (surveyquestions_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                               description = EXCLUDED.description,
                                                               action_button_text = EXCLUDED.action_button_text,
                                                               cancel_button_text = EXCLUDED.cancel_button_text
`

type UpdateSurveyQuestionTranslationParams struct {
	ItemID           uuid.UUID      `db:"item_id" json:"itemId"`
	Language         string         `db:"language" json:"language"`
	Title            null_v4.String `db:"title" json:"title"`
	Description      null_v4.String `db:"description" json:"description"`
	ActionButtonText null_v4.String `db:"action_button_text" json:"actionButtonText"`
	CancelButtonText null_v4.String `db:"cancel_button_text" json:"cancelButtonText"`
}

func (q *Queries) UpdateSurveyQuestionTranslation(ctx context.Context, arg UpdateSurveyQuestionTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateSurveyQuestionTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
		arg.ActionButtonText,
		arg.CancelButtonText,
	)
	return err
}

const updateSurveyTranslation = `-- name: UpdateSurveyTranslation :exec

INSERT INTO surveys_translations (surveys_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (surveys_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                       description = EXCLUDED.description
`

type UpdateSurveyTranslationParams struct {
	ItemID      uuid.UUID      `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

// ------------
// SURVEYS ---
// ------------
func (q *Queries) UpdateSurveyTranslation(ctx context.Context, arg UpdateSurveyTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateSurveyTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateTaskTranslation = `-- name: UpdateTaskTranslation :exec
INSERT INTO tasks_translations (tasks_id, languages_code, title, description)
VALUES ($1, $2, $3, $4)
ON CONFLICT (tasks_id, languages_code) DO UPDATE SET title       = EXCLUDED.title,
                                                     description = EXCLUDED.description
`

type UpdateTaskTranslationParams struct {
	ItemID      uuid.UUID      `db:"item_id" json:"itemId"`
	Language    string         `db:"language" json:"language"`
	Title       null_v4.String `db:"title" json:"title"`
	Description null_v4.String `db:"description" json:"description"`
}

func (q *Queries) UpdateTaskTranslation(ctx context.Context, arg UpdateTaskTranslationParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskTranslation,
		arg.ItemID,
		arg.Language,
		arg.Title,
		arg.Description,
	)
	return err
}

const updateTranslationsHash = `-- name: UpdateTranslationsHash :exec
INSERT INTO translations_hash (collection, hash)
VALUES ($1, $2)
ON CONFLICT (collection) DO UPDATE SET hash = EXCLUDED.hash, last_sent = NOW()
`

type UpdateTranslationsHashParams struct {
	Collection string `db:"collection" json:"collection"`
	Hash       []byte `db:"hash" json:"hash"`
}

func (q *Queries) UpdateTranslationsHash(ctx context.Context, arg UpdateTranslationsHashParams) error {
	_, err := q.db.ExecContext(ctx, updateTranslationsHash, arg.Collection, arg.Hash)
	return err
}
