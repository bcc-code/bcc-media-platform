// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: contributions.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
	null_v4 "gopkg.in/guregu/null.v4"
)

const getContributionIDsForPersons = `-- name: getContributionIDsForPersons :many
SELECT id, person_id::uuid as parent_id
FROM contributions
WHERE person_id = ANY ($1::uuid[])
`

type getContributionIDsForPersonsRow struct {
	ID       int32     `db:"id" json:"id"`
	ParentID uuid.UUID `db:"parent_id" json:"parentId"`
}

func (q *Queries) getContributionIDsForPersons(ctx context.Context, personIds []uuid.UUID) ([]getContributionIDsForPersonsRow, error) {
	rows, err := q.db.QueryContext(ctx, getContributionIDsForPersons, pq.Array(personIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getContributionIDsForPersonsRow
	for rows.Next() {
		var i getContributionIDsForPersonsRow
		if err := rows.Scan(&i.ID, &i.ParentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContributionItems = `-- name: getContributionItems :many
SELECT
  c.id,
  COALESCE(mc.mediaitems_id, tmc.timedmetadata_id) AS item_id,
  CASE
    WHEN mc.mediaitems_id IS NOT NULL THEN 'mediaitem'
    WHEN tmc.timedmetadata_id IS NOT NULL THEN 'timedmetadata'
    ELSE ''
  END AS item_type,
  c.type,
  c.person_id
FROM contributions c
LEFT JOIN public.mediaitems_contributions mc ON c.id = mc.contributions_id
LEFT JOIN public.timedmetadata_contributions tmc ON c.id = tmc.contributions_id
WHERE c.id = ANY ($1::int[])
  AND (mc.mediaitems_id IS NOT NULL OR tmc.timedmetadata_id IS NOT NULL)
`

type getContributionItemsRow struct {
	ID       int32          `db:"id" json:"id"`
	ItemID   uuid.NullUUID  `db:"item_id" json:"itemId"`
	ItemType string         `db:"item_type" json:"itemType"`
	Type     null_v4.String `db:"type" json:"type"`
	PersonID uuid.NullUUID  `db:"person_id" json:"personId"`
}

func (q *Queries) getContributionItems(ctx context.Context, ids []int32) ([]getContributionItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getContributionItems, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getContributionItemsRow
	for rows.Next() {
		var i getContributionItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.ItemID,
			&i.ItemType,
			&i.Type,
			&i.PersonID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContributionTypesForPersons = `-- name: getContributionTypesForPersons :many
SELECT count(*), type, person_id::uuid
FROM contributions
WHERE person_id = ANY ($1::uuid[])
group by type, person_id
`

type getContributionTypesForPersonsRow struct {
	Count    int64          `db:"count" json:"count"`
	Type     null_v4.String `db:"type" json:"type"`
	PersonID uuid.UUID      `db:"person_id" json:"personId"`
}

func (q *Queries) getContributionTypesForPersons(ctx context.Context, personIds []uuid.UUID) ([]getContributionTypesForPersonsRow, error) {
	rows, err := q.db.QueryContext(ctx, getContributionTypesForPersons, pq.Array(personIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getContributionTypesForPersonsRow
	for rows.Next() {
		var i getContributionTypesForPersonsRow
		if err := rows.Scan(&i.Count, &i.Type, &i.PersonID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
