// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: relations.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getPersons = `-- name: getPersons :many
SELECT id, name
FROM persons
WHERE id = ANY ($1::uuid[])
`

func (q *Queries) getPersons(ctx context.Context, ids []uuid.UUID) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, getPersons, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSongs = `-- name: getSongs :many
SELECT id, collection_id, title
FROM songs
WHERE id = ANY ($1::uuid[])
`

func (q *Queries) getSongs(ctx context.Context, ids []uuid.UUID) ([]Song, error) {
	rows, err := q.db.QueryContext(ctx, getSongs, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(&i.ID, &i.CollectionID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
