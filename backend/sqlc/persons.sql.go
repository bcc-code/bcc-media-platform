// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: persons.sql

package sqlc

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getPersonIDsByNames = `-- name: GetPersonIDsByNames :many
SELECT p.id, p.name
FROM persons p
WHERE name = ANY ($1::varchar[])
`

func (q *Queries) GetPersonIDsByNames(ctx context.Context, names []string) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, getPersonIDsByNames, pq.Array(names))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPerson = `-- name: InsertPerson :exec
INSERT INTO "public"."persons" (id, name)
VALUES ($1, $2)
`

type InsertPersonParams struct {
	ID   uuid.UUID `db:"id" json:"id"`
	Name string    `db:"name" json:"name"`
}

func (q *Queries) InsertPerson(ctx context.Context, arg InsertPersonParams) error {
	_, err := q.db.ExecContext(ctx, insertPerson, arg.ID, arg.Name)
	return err
}

const getPersons = `-- name: getPersons :many
SELECT p.id, p.name, COALESCE(images.images, '{}'::json) AS images
FROM persons p
LEFT JOIN (
    SELECT
    simg.persons_id,
    json_agg(json_build_object('style', img.style, 'language', img.language, 'filename_disk', df.filename_disk)) AS images
    FROM persons_styledimages simg
    JOIN styledimages img ON (img.id = simg.styledimages_id)
    JOIN directus_files df ON (img.file = df.id)
    WHERE simg.persons_id = ANY($1::uuid[])
    GROUP BY simg.persons_id
) images ON (images.persons_id = p.id)
WHERE id = ANY ($1::uuid[])
`

type getPersonsRow struct {
	ID     uuid.UUID       `db:"id" json:"id"`
	Name   string          `db:"name" json:"name"`
	Images json.RawMessage `db:"images" json:"images"`
}

func (q *Queries) getPersons(ctx context.Context, ids []uuid.UUID) ([]getPersonsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPersons, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getPersonsRow
	for rows.Next() {
		var i getPersonsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Images); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
