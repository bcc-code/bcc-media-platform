// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: episodes.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"github.com/tabbed/pqtype"
	null_v4 "gopkg.in/guregu/null.v4"
)

const refreshEpisodeAccessView = `-- name: RefreshEpisodeAccessView :one
SELECT update_access('episodes_access')
`

func (q *Queries) RefreshEpisodeAccessView(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, refreshEpisodeAccessView)
	var update_access bool
	err := row.Scan(&update_access)
	return update_access, err
}

const getEpisodeIDsForSeasons = `-- name: getEpisodeIDsForSeasons :many
SELECT
    e.id,
    e.season_id
FROM episodes e
WHERE e.season_id = ANY($1::int[])
ORDER BY e.episode_number
`

type getEpisodeIDsForSeasonsRow struct {
	ID       int32       `db:"id" json:"id"`
	SeasonID null_v4.Int `db:"season_id" json:"seasonID"`
}

func (q *Queries) getEpisodeIDsForSeasons(ctx context.Context, dollar_1 []int32) ([]getEpisodeIDsForSeasonsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodeIDsForSeasons, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getEpisodeIDsForSeasonsRow
	for rows.Next() {
		var i getEpisodeIDsForSeasonsRow
		if err := rows.Scan(&i.ID, &i.SeasonID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEpisodes = `-- name: getEpisodes :many
WITH ts AS (SELECT episodes_id,
                  json_object_agg(languages_code, title)             AS title,
                  json_object_agg(languages_code, description)       AS description,
                  json_object_agg(languages_code, extra_description) AS extra_description
           FROM episodes_translations
           GROUP BY episodes_id),
     tags AS (SELECT episodes_id,
                     array_agg(tags_id) AS tags
              FROM episodes_tags
              GROUP BY episodes_id)
SELECT e.id,
       e.legacy_id,
       e.legacy_program_id,
       e.asset_id,
       e.episode_number,
       COALESCE(e.image_file_id, s.image_file_id, sh.image_file_id)::uuid as image_file_id,
       e.season_id,
       e.type,
       ts.title,
       ts.description,
       ts.extra_description,
       tags.tags::int[] AS tag_ids,
       assets.duration as duration,
       COALESCE(e.agerating_code, s.agerating_code, 'A') as agerating
FROM episodes e
         LEFT JOIN ts ON e.id = ts.episodes_id
         LEFT JOIN tags ON tags.episodes_id = e.id
         LEFT JOIN assets ON e.asset_id = assets.id
         LEFT JOIN seasons s ON e.season_id = s.id
         LEFT JOIN shows sh ON s.show_id = sh.id
WHERE e.id = ANY($1::int[])
ORDER BY e.episode_number
`

type getEpisodesRow struct {
	ID               int32                 `db:"id" json:"id"`
	LegacyID         null_v4.Int           `db:"legacy_id" json:"legacyID"`
	LegacyProgramID  null_v4.Int           `db:"legacy_program_id" json:"legacyProgramID"`
	AssetID          null_v4.Int           `db:"asset_id" json:"assetID"`
	EpisodeNumber    null_v4.Int           `db:"episode_number" json:"episodeNumber"`
	ImageFileID      uuid.UUID             `db:"image_file_id" json:"imageFileID"`
	SeasonID         null_v4.Int           `db:"season_id" json:"seasonID"`
	Type             string                `db:"type" json:"type"`
	Title            pqtype.NullRawMessage `db:"title" json:"title"`
	Description      pqtype.NullRawMessage `db:"description" json:"description"`
	ExtraDescription pqtype.NullRawMessage `db:"extra_description" json:"extraDescription"`
	TagIds           []int32               `db:"tag_ids" json:"tagIds"`
	Duration         null_v4.Int           `db:"duration" json:"duration"`
	Agerating        string                `db:"agerating" json:"agerating"`
}

func (q *Queries) getEpisodes(ctx context.Context, dollar_1 []int32) ([]getEpisodesRow, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodes, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getEpisodesRow
	for rows.Next() {
		var i getEpisodesRow
		if err := rows.Scan(
			&i.ID,
			&i.LegacyID,
			&i.LegacyProgramID,
			&i.AssetID,
			&i.EpisodeNumber,
			&i.ImageFileID,
			&i.SeasonID,
			&i.Type,
			&i.Title,
			&i.Description,
			&i.ExtraDescription,
			pq.Array(&i.TagIds),
			&i.Duration,
			&i.Agerating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsForEpisodes = `-- name: getPermissionsForEpisodes :many
WITH er AS (SELECT e.id,
                   COALESCE((SELECT array_agg(DISTINCT eu.usergroups_code) AS code
                             FROM episodes_usergroups eu
                             WHERE eu.episodes_id = e.id), ARRAY []::character varying[]) AS roles,
                   COALESCE((SELECT array_agg(DISTINCT eu.usergroups_code) AS code
                             FROM episodes_usergroups_download eu
                             WHERE eu.episodes_id = e.id), ARRAY []::character varying[]) AS roles_download,
                   COALESCE((SELECT array_agg(DISTINCT eu.usergroups_code) AS code
                             FROM episodes_usergroups_earlyaccess eu
                             WHERE eu.episodes_id = e.id),
                            ARRAY []::character varying[])                                AS roles_earlyaccess
            FROM episodes e),
     ea AS (SELECT e.id,
                   e.status::text = 'published'::text AND (e.season_id IS NULL OR (se.status::text = 'published'::text AND
                                                                                   s.status::text = 'published'::text))                  AS published,
                   COALESCE(GREATEST(e.available_from, se.available_from, s.available_from),
                            '1800-01-01 00:00:00'::timestamp without time zone) AS available_from,
                   COALESCE(LEAST(e.available_to, se.available_to, s.available_to),
                            '3000-01-01 00:00:00'::timestamp without time zone) AS available_to
            FROM episodes e
                     LEFT JOIN seasons se ON e.season_id = se.id
                     LEFT JOIN shows s ON se.show_id = s.id)
SELECT e.id,
       access.published::bool AS published,
       access.available_from::timestamp              AS available_from,
       access.available_to::timestamp                AS available_to,
       roles.roles::varchar[]                        AS usergroups,
       roles.roles_download::varchar[]               AS usergroups_downloads,
       roles.roles_earlyaccess::varchar[]            AS usergroups_earlyaccess
FROM episodes e
         LEFT JOIN ea access ON access.id = e.id
         LEFT JOIN er roles ON roles.id = e.id
WHERE e.id = ANY($1::int[])
`

type getPermissionsForEpisodesRow struct {
	ID                    int32     `db:"id" json:"id"`
	Published             bool      `db:"published" json:"published"`
	AvailableFrom         time.Time `db:"available_from" json:"availableFrom"`
	AvailableTo           time.Time `db:"available_to" json:"availableTo"`
	Usergroups            []string  `db:"usergroups" json:"usergroups"`
	UsergroupsDownloads   []string  `db:"usergroups_downloads" json:"usergroupsDownloads"`
	UsergroupsEarlyaccess []string  `db:"usergroups_earlyaccess" json:"usergroupsEarlyaccess"`
}

func (q *Queries) getPermissionsForEpisodes(ctx context.Context, dollar_1 []int32) ([]getPermissionsForEpisodesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsForEpisodes, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getPermissionsForEpisodesRow
	for rows.Next() {
		var i getPermissionsForEpisodesRow
		if err := rows.Scan(
			&i.ID,
			&i.Published,
			&i.AvailableFrom,
			&i.AvailableTo,
			pq.Array(&i.Usergroups),
			pq.Array(&i.UsergroupsDownloads),
			pq.Array(&i.UsergroupsEarlyaccess),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEpisodes = `-- name: listEpisodes :many
WITH ts AS (SELECT episodes_id,
                   json_object_agg(languages_code, title)             AS title,
                   json_object_agg(languages_code, description)       AS description,
                   json_object_agg(languages_code, extra_description) AS extra_description
            FROM episodes_translations
            GROUP BY episodes_id),
     tags AS (SELECT episodes_id,
                     array_agg(tags_id) AS tags
              FROM episodes_tags
              GROUP BY episodes_id)
SELECT e.id,
       e.legacy_id,
       e.legacy_program_id,
       e.asset_id,
       e.episode_number,
       COALESCE(e.image_file_id, s.image_file_id, sh.image_file_id)::uuid as image_file_id,
       e.season_id,
       e.type,
       ts.title,
       ts.description,
       ts.extra_description,
       tags.tags::int[] AS tag_ids,
       assets.duration as duration,
       COALESCE(e.agerating_code, s.agerating_code, 'A') as agerating
FROM episodes e
         LEFT JOIN ts ON e.id = ts.episodes_id
         LEFT JOIN tags ON tags.episodes_id = e.id
         LEFT JOIN assets ON e.asset_id = assets.id
         LEFT JOIN seasons s ON e.season_id = s.id
         LEFT JOIN shows sh ON s.show_id = sh.id
`

type listEpisodesRow struct {
	ID               int32                 `db:"id" json:"id"`
	LegacyID         null_v4.Int           `db:"legacy_id" json:"legacyID"`
	LegacyProgramID  null_v4.Int           `db:"legacy_program_id" json:"legacyProgramID"`
	AssetID          null_v4.Int           `db:"asset_id" json:"assetID"`
	EpisodeNumber    null_v4.Int           `db:"episode_number" json:"episodeNumber"`
	ImageFileID      uuid.UUID             `db:"image_file_id" json:"imageFileID"`
	SeasonID         null_v4.Int           `db:"season_id" json:"seasonID"`
	Type             string                `db:"type" json:"type"`
	Title            pqtype.NullRawMessage `db:"title" json:"title"`
	Description      pqtype.NullRawMessage `db:"description" json:"description"`
	ExtraDescription pqtype.NullRawMessage `db:"extra_description" json:"extraDescription"`
	TagIds           []int32               `db:"tag_ids" json:"tagIds"`
	Duration         null_v4.Int           `db:"duration" json:"duration"`
	Agerating        string                `db:"agerating" json:"agerating"`
}

func (q *Queries) listEpisodes(ctx context.Context) ([]listEpisodesRow, error) {
	rows, err := q.db.QueryContext(ctx, listEpisodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []listEpisodesRow
	for rows.Next() {
		var i listEpisodesRow
		if err := rows.Scan(
			&i.ID,
			&i.LegacyID,
			&i.LegacyProgramID,
			&i.AssetID,
			&i.EpisodeNumber,
			&i.ImageFileID,
			&i.SeasonID,
			&i.Type,
			&i.Title,
			&i.Description,
			&i.ExtraDescription,
			pq.Array(&i.TagIds),
			&i.Duration,
			&i.Agerating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
