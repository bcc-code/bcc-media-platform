// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: tags.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
	"github.com/tabbed/pqtype"
)

const getTags = `-- name: getTags :many
WITH ts AS (SELECT ts.tags_id,
                   json_object_agg(ts.languages_code, ts.name)       AS name
            FROM tags_translations ts
            GROUP BY ts.tags_id)
SELECT
    t.id,
    t.name as code,
    ts.name
FROM tags t
         LEFT JOIN ts ON ts.tags_id = t.id
WHERE id = ANY($1::int[])
`

type getTagsRow struct {
	ID   int32                 `db:"id" json:"id"`
	Code string                `db:"code" json:"code"`
	Name pqtype.NullRawMessage `db:"name" json:"name"`
}

func (q *Queries) getTags(ctx context.Context, dollar_1 []int32) ([]getTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTags, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getTagsRow
	for rows.Next() {
		var i getTagsRow
		if err := rows.Scan(&i.ID, &i.Code, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: listTags :many
WITH ts AS (SELECT ts.tags_id,
                  json_object_agg(ts.languages_code, ts.name)       AS name
           FROM tags_translations ts
           GROUP BY ts.tags_id)
SELECT
    t.id,
    t.name as code,
    ts.name
FROM tags t
         LEFT JOIN ts ON ts.tags_id = t.id
`

type listTagsRow struct {
	ID   int32                 `db:"id" json:"id"`
	Code string                `db:"code" json:"code"`
	Name pqtype.NullRawMessage `db:"name" json:"name"`
}

func (q *Queries) listTags(ctx context.Context) ([]listTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []listTagsRow
	for rows.Next() {
		var i listTagsRow
		if err := rows.Scan(&i.ID, &i.Code, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
