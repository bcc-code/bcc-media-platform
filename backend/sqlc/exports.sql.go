// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exports.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getExportById = `-- name: GetExportById :one
SELECT id, profile_id, user_groups, status, created_date, expiry_date, url FROM users.exports WHERE id = $1::uuid
`

func (q *Queries) GetExportById(ctx context.Context, id uuid.UUID) (UsersExport, error) {
	row := q.db.QueryRowContext(ctx, getExportById, id)
	var i UsersExport
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		pq.Array(&i.UserGroups),
		&i.Status,
		&i.CreatedDate,
		&i.ExpiryDate,
		&i.Url,
	)
	return i, err
}

const insertExport = `-- name: InsertExport :one
INSERT INTO users.exports (
    id,
    profile_id,
    user_groups,
    status,
    created_date,
    expiry_date,
    url
) VALUES (
    DEFAULT,
    $1,
    $2,
    DEFAULT,
    DEFAULT,
    NULL,
    DEFAULT
)
RETURNING id, profile_id, user_groups, status, created_date, expiry_date, url
`

type InsertExportParams struct {
	ProfileID  uuid.UUID `db:"profile_id" json:"profileId"`
	UserGroups []string  `db:"user_groups" json:"userGroups"`
}

func (q *Queries) InsertExport(ctx context.Context, arg InsertExportParams) (UsersExport, error) {
	row := q.db.QueryRowContext(ctx, insertExport, arg.ProfileID, pq.Array(arg.UserGroups))
	var i UsersExport
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		pq.Array(&i.UserGroups),
		&i.Status,
		&i.CreatedDate,
		&i.ExpiryDate,
		&i.Url,
	)
	return i, err
}

const updateExportStatus = `-- name: UpdateExportStatus :exec
UPDATE users.exports
SET status = $1
WHERE id = $2::uuid
`

type UpdateExportStatusParams struct {
	Status string    `db:"status" json:"status"`
	ID     uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateExportStatus(ctx context.Context, arg UpdateExportStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateExportStatus, arg.Status, arg.ID)
	return err
}

const updateExportURL = `-- name: UpdateExportURL :exec
UPDATE users.exports
SET url = $1
WHERE id = $2::uuid
`

type UpdateExportURLParams struct {
	Url string    `db:"url" json:"url"`
	ID  uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateExportURL(ctx context.Context, arg UpdateExportURLParams) error {
	_, err := q.db.ExecContext(ctx, updateExportURL, arg.Url, arg.ID)
	return err
}
