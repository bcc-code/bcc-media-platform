// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exports.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
	null_v4 "gopkg.in/guregu/null.v4"
)

const getExportById = `-- name: GetExportById :one
SELECT id, profile_id, user_groups, status, created_date, expiry_date, url, content_only_in_preferred_language, preferred_audio_languages, preferred_subtitles_languages, application_id, application_code, application_clientversion, application_default_page_id FROM users.exports WHERE id = $1::uuid
`

func (q *Queries) GetExportById(ctx context.Context, id uuid.UUID) (UsersExport, error) {
	row := q.db.QueryRowContext(ctx, getExportById, id)
	var i UsersExport
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		pq.Array(&i.UserGroups),
		&i.Status,
		&i.CreatedDate,
		&i.ExpiryDate,
		&i.Url,
		&i.ContentOnlyInPreferredLanguage,
		pq.Array(&i.PreferredAudioLanguages),
		pq.Array(&i.PreferredSubtitlesLanguages),
		&i.ApplicationID,
		&i.ApplicationCode,
		&i.ApplicationClientversion,
		&i.ApplicationDefaultPageID,
	)
	return i, err
}

const insertExport = `-- name: InsertExport :one
INSERT INTO users.exports (
    id,
    profile_id,
    user_groups,
    status,
    created_date,
    expiry_date,
    url,
    content_only_in_preferred_language,
    preferred_audio_languages,
    preferred_subtitles_languages,
    application_id,
    application_code,
    application_clientVersion,
    application_default_page_id
) VALUES (
    DEFAULT,    
    $1,
    $2,
    DEFAULT,
    DEFAULT,
    DEFAULT,
    DEFAULT,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
)
RETURNING id, profile_id, user_groups, status, created_date, expiry_date, url, content_only_in_preferred_language, preferred_audio_languages, preferred_subtitles_languages, application_id, application_code, application_clientversion, application_default_page_id
`

type InsertExportParams struct {
	ProfileID                      uuid.UUID   `db:"profile_id" json:"profileId"`
	UserGroups                     []string    `db:"user_groups" json:"userGroups"`
	ContentOnlyInPreferredLanguage bool        `db:"content_only_in_preferred_language" json:"contentOnlyInPreferredLanguage"`
	PreferredAudioLanguages        []string    `db:"preferred_audio_languages" json:"preferredAudioLanguages"`
	PreferredSubtitlesLanguages    []string    `db:"preferred_subtitles_languages" json:"preferredSubtitlesLanguages"`
	ApplicationID                  int32       `db:"application_id" json:"applicationId"`
	ApplicationCode                string      `db:"application_code" json:"applicationCode"`
	ApplicationClientVersion       string      `db:"application_client_version" json:"applicationClientVersion"`
	ApplicationDefaultPageID       null_v4.Int `db:"application_default_page_id" json:"applicationDefaultPageId"`
}

func (q *Queries) InsertExport(ctx context.Context, arg InsertExportParams) (UsersExport, error) {
	row := q.db.QueryRowContext(ctx, insertExport,
		arg.ProfileID,
		pq.Array(arg.UserGroups),
		arg.ContentOnlyInPreferredLanguage,
		pq.Array(arg.PreferredAudioLanguages),
		pq.Array(arg.PreferredSubtitlesLanguages),
		arg.ApplicationID,
		arg.ApplicationCode,
		arg.ApplicationClientVersion,
		arg.ApplicationDefaultPageID,
	)
	var i UsersExport
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		pq.Array(&i.UserGroups),
		&i.Status,
		&i.CreatedDate,
		&i.ExpiryDate,
		&i.Url,
		&i.ContentOnlyInPreferredLanguage,
		pq.Array(&i.PreferredAudioLanguages),
		pq.Array(&i.PreferredSubtitlesLanguages),
		&i.ApplicationID,
		&i.ApplicationCode,
		&i.ApplicationClientversion,
		&i.ApplicationDefaultPageID,
	)
	return i, err
}

const updateExpiryDate = `-- name: UpdateExpiryDate :exec
UPDATE users.exports
SET expiry_date = $1
WHERE id = $2::uuid
`

type UpdateExpiryDateParams struct {
	ExpiryDate null_v4.Time `db:"expiry_date" json:"expiryDate"`
	ID         uuid.UUID    `db:"id" json:"id"`
}

func (q *Queries) UpdateExpiryDate(ctx context.Context, arg UpdateExpiryDateParams) error {
	_, err := q.db.ExecContext(ctx, updateExpiryDate, arg.ExpiryDate, arg.ID)
	return err
}

const updateExportStatus = `-- name: UpdateExportStatus :exec
UPDATE users.exports
SET status = $1
WHERE id = $2::uuid
`

type UpdateExportStatusParams struct {
	Status string    `db:"status" json:"status"`
	ID     uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateExportStatus(ctx context.Context, arg UpdateExportStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateExportStatus, arg.Status, arg.ID)
	return err
}

const updateExportURL = `-- name: UpdateExportURL :exec
UPDATE users.exports
SET url = $1
WHERE id = $2::uuid
`

type UpdateExportURLParams struct {
	Url string    `db:"url" json:"url"`
	ID  uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateExportURL(ctx context.Context, arg UpdateExportURLParams) error {
	_, err := q.db.ExecContext(ctx, updateExportURL, arg.Url, arg.ID)
	return err
}
