// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: seasons_test.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
	null_v4 "gopkg.in/guregu/null.v4"
)

const addSeason = `-- name: AddSeason :one

INSERT INTO seasons (agerating_code, available_from, available_to, date_created, date_updated, publish_date,
                     season_number, show_id, status, user_created, user_updated, label, public_title,
                     episode_number_in_title, uuid, translations_required)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10::uuid,
        $11::uuid,
        $12,
        $13,
        $14::bool,
        $15::uuid,
        $16)
RETURNING agerating_code, available_from, available_to, date_created, date_updated, id, image_file_id, legacy_description_id, legacy_id, legacy_title_id, publish_date, season_number, show_id, status, user_created, user_updated, label, public_title, episode_number_in_title, uuid, translations_required
`

type AddSeasonParams struct {
	AgeratingCode        null_v4.String `db:"agerating_code" json:"ageratingCode"`
	AvailableFrom        null_v4.Time   `db:"available_from" json:"availableFrom"`
	AvailableTo          null_v4.Time   `db:"available_to" json:"availableTo"`
	DateCreated          time.Time      `db:"date_created" json:"dateCreated"`
	DateUpdated          time.Time      `db:"date_updated" json:"dateUpdated"`
	PublishDate          time.Time      `db:"publish_date" json:"publishDate"`
	SeasonNumber         int32          `db:"season_number" json:"seasonNumber"`
	ShowID               int32          `db:"show_id" json:"showId"`
	Status               string         `db:"status" json:"status"`
	UserCreated          uuid.UUID      `db:"user_created" json:"userCreated"`
	UserUpdated          uuid.UUID      `db:"user_updated" json:"userUpdated"`
	Label                null_v4.String `db:"label" json:"label"`
	PublicTitle          null_v4.String `db:"public_title" json:"publicTitle"`
	EpisodeNumberInTitle bool           `db:"episode_number_in_title" json:"episodeNumberInTitle"`
	Uuid                 uuid.UUID      `db:"uuid" json:"uuid"`
	TranslationsRequired bool           `db:"translations_required" json:"translationsRequired"`
}

func (q *Queries) AddSeason(ctx context.Context, arg AddSeasonParams) (Season, error) {
	row := q.db.QueryRowContext(ctx, addSeason,
		arg.AgeratingCode,
		arg.AvailableFrom,
		arg.AvailableTo,
		arg.DateCreated,
		arg.DateUpdated,
		arg.PublishDate,
		arg.SeasonNumber,
		arg.ShowID,
		arg.Status,
		arg.UserCreated,
		arg.UserUpdated,
		arg.Label,
		arg.PublicTitle,
		arg.EpisodeNumberInTitle,
		arg.Uuid,
		arg.TranslationsRequired,
	)
	var i Season
	err := row.Scan(
		&i.AgeratingCode,
		&i.AvailableFrom,
		&i.AvailableTo,
		&i.DateCreated,
		&i.DateUpdated,
		&i.ID,
		&i.ImageFileID,
		&i.LegacyDescriptionID,
		&i.LegacyID,
		&i.LegacyTitleID,
		&i.PublishDate,
		&i.SeasonNumber,
		&i.ShowID,
		&i.Status,
		&i.UserCreated,
		&i.UserUpdated,
		&i.Label,
		&i.PublicTitle,
		&i.EpisodeNumberInTitle,
		&i.Uuid,
		&i.TranslationsRequired,
	)
	return i, err
}
