// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shows_test.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	null_v4 "gopkg.in/guregu/null.v4"
)

const addShow = `-- name: AddShow :one

INSERT INTO public.shows (uuid, agerating_code, available_from, available_to, date_created, date_updated,
                          publish_date, status, type, user_created,
                          user_updated, default_episode_behaviour, publish_date_in_title, label, public_title,
                          translations_required)
VALUES (
		$1::uuid,
		$2::varchar,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10::uuid,
        $11::uuid,
        $12,
        $13,
        $14,
        $15,
        $16) RETURNING agerating_code, available_from, available_to, date_created, date_updated, id, image_file_id, legacy_description_id, legacy_id, legacy_title_id, publish_date, status, type, user_created, user_updated, default_episode_behaviour, publish_date_in_title, label, public_title, uuid, related_collection_id, translations_required
`

type AddShowParams struct {
	Uuid                    uuid.UUID      `db:"uuid" json:"uuid"`
	AgeratingCode           string         `db:"agerating_code" json:"ageratingCode"`
	AvailableFrom           null_v4.Time   `db:"available_from" json:"availableFrom"`
	AvailableTo             null_v4.Time   `db:"available_to" json:"availableTo"`
	DateCreated             time.Time      `db:"date_created" json:"dateCreated"`
	DateUpdated             time.Time      `db:"date_updated" json:"dateUpdated"`
	PublishDate             time.Time      `db:"publish_date" json:"publishDate"`
	Status                  string         `db:"status" json:"status"`
	Type                    string         `db:"type" json:"type"`
	UserCreated             uuid.UUID      `db:"user_created" json:"userCreated"`
	UserUpdated             uuid.UUID      `db:"user_updated" json:"userUpdated"`
	DefaultEpisodeBehaviour null_v4.String `db:"default_episode_behaviour" json:"defaultEpisodeBehaviour"`
	PublishDateInTitle      sql.NullBool   `db:"publish_date_in_title" json:"publishDateInTitle"`
	Label                   null_v4.String `db:"label" json:"label"`
	PublicTitle             null_v4.String `db:"public_title" json:"publicTitle"`
	TranslationsRequired    bool           `db:"translations_required" json:"translationsRequired"`
}

func (q *Queries) AddShow(ctx context.Context, arg AddShowParams) (Show, error) {
	row := q.db.QueryRowContext(ctx, addShow,
		arg.Uuid,
		arg.AgeratingCode,
		arg.AvailableFrom,
		arg.AvailableTo,
		arg.DateCreated,
		arg.DateUpdated,
		arg.PublishDate,
		arg.Status,
		arg.Type,
		arg.UserCreated,
		arg.UserUpdated,
		arg.DefaultEpisodeBehaviour,
		arg.PublishDateInTitle,
		arg.Label,
		arg.PublicTitle,
		arg.TranslationsRequired,
	)
	var i Show
	err := row.Scan(
		&i.AgeratingCode,
		&i.AvailableFrom,
		&i.AvailableTo,
		&i.DateCreated,
		&i.DateUpdated,
		&i.ID,
		&i.ImageFileID,
		&i.LegacyDescriptionID,
		&i.LegacyID,
		&i.LegacyTitleID,
		&i.PublishDate,
		&i.Status,
		&i.Type,
		&i.UserCreated,
		&i.UserUpdated,
		&i.DefaultEpisodeBehaviour,
		&i.PublishDateInTitle,
		&i.Label,
		&i.PublicTitle,
		&i.Uuid,
		&i.RelatedCollectionID,
		&i.TranslationsRequired,
	)
	return i, err
}
